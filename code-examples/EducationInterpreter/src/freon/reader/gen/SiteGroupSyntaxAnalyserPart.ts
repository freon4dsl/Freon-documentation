// Generated by the Freon Language Generator.
import { net } from "net.akehurst.language-agl-processor";
import SPPTBranch = net.akehurst.language.api.sppt.SPPTBranch;
import { SiteGroup, Topic, Flow } from "../../language/gen/index.js";
import { EducationSyntaxAnalyser } from "./EducationSyntaxAnalyser.js";
import { FreNodeReference } from "@freon4dsl/core";

export class SiteGroupSyntaxAnalyserPart {
    mainAnalyser: EducationSyntaxAnalyser;

    constructor(mainAnalyser: EducationSyntaxAnalyser) {
        this.mainAnalyser = mainAnalyser;
    }

    /**
     * Method to transform branches that match the following rule:
     * SiteGroup = 'SiteGroup' 'Overview'
     *	 'Name:' identifier
     *	 'Description:' stringLiteral
     *	 'Topics:' __fre_reference*
     *	 'Flows:' __fre_reference* ;
     * @param branch
     * @private
     */
    public transformSiteGroup(branch: SPPTBranch): SiteGroup {
        // console.log('transformSiteGroup called: ' + branch.name);
        let __name: string;
        let __description: string;
        let __topics: FreNodeReference<Topic>[];
        let __flows: FreNodeReference<Flow>[];
        const children = this.mainAnalyser.getChildren(branch);
        __name = this.mainAnalyser.transformSharedPackedParseTreeNode(children[3]); // RHSPrimEntry
        __description = this.mainAnalyser.transformSharedPackedParseTreeNode(children[5]); // RHSPrimEntry
        __topics = this.mainAnalyser.transformSharedPackedParseTreeRefList<Topic>(children[7], "Topic"); // RHSRefListEntry
        __flows = this.mainAnalyser.transformSharedPackedParseTreeRefList<Flow>(children[9], "Flow"); // RHSRefListEntry

        return SiteGroup.create({
            name: __name,
            description: __description,
            topics: __topics,
            flows: __flows,
            parseLocation: this.mainAnalyser.location(branch),
        });
    }
}
