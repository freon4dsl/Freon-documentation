// Generated by the Freon Language Generator.
// This file contains the input to the AGL parser generator
// (see https://https://github.com/dhakehurst/net.akehurst.language).
// The grammar in this file is read by EducationModelUnitReader

export const EducationGrammarStr = `
namespace EducationLanguage
grammar EducationGrammar {

// rules for "Flow"
Flow = 'Flow' identifier 'for' 'SiteGroup' __fre_reference
	 FlowRule* ;

FlowRule = '-------------------------------------'
	 'Name:' identifier
	 'Description:' stringLiteral
	 'From' 'page' __fre_reference
	 PageTransition* ;

PageTransition = 'when' Grade 'goto' 'page' __fre_reference ;

// rules for "SiteGroup"
SiteGroup = 'SiteGroup' 'Overview'
	 'Name:' identifier
	 'Description:' stringLiteral
	 'Topics:' __fre_reference*
	 'Flows:' __fre_reference* ;

// rules for "Test"
Test = 'Test' identifier
	 'Regarding' 'MainTopic:' __fre_reference ',' 'and' 'flow:' __fre_reference
	 Scenario* ;

Scenario = '------------------------------------'
	 stringLiteral
	 TestFlow* ;

TestFlow = [ __fre_super_Step / '===>' ]* ;

Step = __fre_reference '=>' Answer* ;

LastStep = __fre_reference ;

Answer = 'Answer' '\{'
	 'value' NumberConcept
	 'question' __fre_reference
	 '}' ;

__fre_super_Step = Step 
    | LastStep  ;

// rules for "Topic"
Topic = 'SiteGroup:' __fre_reference
	 'Topic:' identifier
	 'Topic' 'description:' stringLiteral
	 'Pages:'
	 Page* ;

Theory = '----------------------------------------------------'
	 'Theory' identifier
	 Line*
	 'Questions:' Question* 'Score' GradeScore* ;

Line = stringLiteral ;

Question = identifier
	 stringLiteral
	 'Correct' 'Answer:' NumberConcept ;

GradeScore = Grade ':' ScoreExpression ;

QuestionReference = 'Answer' 'to' __fre_reference 'is' 'correct' ;

NrOfCorrectAnswers = 'Number' 'Of' 'Correct' 'Answers' ;

NumberLiteralExpression = numberLiteral ;

Video = '----------------------------------------------------'
	 'Video' identifier
	 'Maybe' 'this' 'video' 'will' 'help' 'you' 'understand.'
	 stringLiteral
	 'Questions:' Question* 'Score' GradeScore* ;

WorkSheet = '----------------------------------------------------'
	 'Worksheet' identifier
	 'See' 'if' 'you' 'can' 'answer' 'the' 'following' 'questions.'
	 'Questions:' Question* 'Score' GradeScore* ;

ExamplePage = '----------------------------------------------------'
	 'Example' identifier
	 Line*
	 'Now,' 'please,' 'answer' 'the' 'following' 'questions.'
	 'Questions:' Question* 'Score' GradeScore* ;

InDepthMaterial = '----------------------------------------------------'
	 'InDepthMaterial' identifier
	 Line*
	 'Test' 'your' 'understanding' 'by' 'answering' 'the' 'following' 'questions.'
	 'Questions:' Question* 'Score' GradeScore* ;

Page = Theory 
    | WorkSheet 
    | ExamplePage 
    | InDepthMaterial 
    | Video  ;

ScoreExpression = QuestionReference 
    | NrOfCorrectAnswers 
    | NumberLiteralExpression 
    | __fre_binary_ScoreExpression ;

__fre_binary_ScoreExpression = [ScoreExpression / __fre_binary_operator]2+ ;
leaf __fre_binary_operator = 'and' | 'or' | '<=' | '>=' | '==' | '<' | '>' ;

// common rules
SimpleNumber = numberLiteral ;

Fraction = numberLiteral '\/' numberLiteral ;

NumberConcept = SimpleNumber 
    | Fraction  ;

Grade = 'gradeA'
	| 'gradeB'
	| 'gradeC'
	| 'gradeD'
	| 'gradeE'
	| 'gradeF' ;

__fre_reference = [ identifier / '.' ]+ ;

// white space and comments
skip WHITE_SPACE = "\\s+" ;
skip SINGLE_LINE_COMMENT = "//[^\\r\\n]*" ;
skip MULTI_LINE_COMMENT = "/\\*[^*]*\\*+(?:[^*/][^*]*\\*+)*/" ;

// the predefined basic types
leaf identifier          = "[a-zA-Z_][a-zA-Z0-9_]*" ;
/* see https://stackoverflow.com/questions/37032620/regex-for-matching-a-string-literal-in-java */
leaf stringLiteral       = '"' "[^\\"\\\\]*(\\\\.[^\\"\\\\]*)*" '"' ;
leaf numberLiteral       = "[0-9]+";
leaf booleanLiteral      = 'false' | 'true';

}`; // end of grammar
