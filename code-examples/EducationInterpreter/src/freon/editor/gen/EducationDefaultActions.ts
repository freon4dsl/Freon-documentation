// Generated by the Freon Language Generator.
import * as Keys from "@freon4dsl/core";
import {
    AFTER_BINARY_OPERATOR,
    BEFORE_BINARY_OPERATOR,
    Box,
    MetaKey,
    FreCombinedActions,
    FreCreateBinaryExpressionAction,
    FreCaret,
    FreCustomAction,
    FreEditor,
    FreNode,
    FreBinaryExpression,
    FreKey,
    FreLogger,
    FreTriggerType,
    ActionBox,
    OptionalBox,
    FreNodeReference,
    LEFT_MOST,
    RIGHT_MOST,
} from "@freon4dsl/core";

import {
    FlowRule,
    PageTransition,
    Grade,
    PrimitiveType,
    GradeScore,
    ScoreExpression,
    QuestionReference,
    NrOfCorrectAnswers,
    NumberLiteralExpression,
    BinaryExpression,
    AndExpression,
    OrExpression,
    ComparisonExpression,
    LessOrEqualsExpression,
    GreaterOrEqualsExpression,
    LessThenExpression,
    GreaterThenExpression,
    EqualsExpression,
    Scenario,
    TestFlow,
    Step,
    LastStep,
    Answer,
    Page,
    Theory,
    Line,
    Video,
    WorkSheet,
    ExamplePage,
    InDepthMaterial,
    Question,
    NumberConcept,
    SimpleNumber,
    Fraction,
    Type,
    Flow,
    SiteGroup,
    Test,
    Topic,
} from "../../language/gen/index.js";

/**
 * This module implements the actions available to the user in the editor.
 * These are the default actions. They are merged with the default and
 * custom editor parts in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */
export const BINARY_EXPRESSION_CREATORS: FreCreateBinaryExpressionAction[] = [
    FreCreateBinaryExpressionAction.create({
        trigger: "and",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: FreTriggerType, editor: FreEditor) => {
            const parent = box.node;
            const newExpression = new AndExpression();
            parent[(box as ActionBox).propertyName] = newExpression;
            return newExpression;
        },
    }),
    FreCreateBinaryExpressionAction.create({
        trigger: "or",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: FreTriggerType, editor: FreEditor) => {
            const parent = box.node;
            const newExpression = new OrExpression();
            parent[(box as ActionBox).propertyName] = newExpression;
            return newExpression;
        },
    }),
    FreCreateBinaryExpressionAction.create({
        trigger: "<=",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: FreTriggerType, editor: FreEditor) => {
            const parent = box.node;
            const newExpression = new LessOrEqualsExpression();
            parent[(box as ActionBox).propertyName] = newExpression;
            return newExpression;
        },
    }),
    FreCreateBinaryExpressionAction.create({
        trigger: ">=",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: FreTriggerType, editor: FreEditor) => {
            const parent = box.node;
            const newExpression = new GreaterOrEqualsExpression();
            parent[(box as ActionBox).propertyName] = newExpression;
            return newExpression;
        },
    }),
    FreCreateBinaryExpressionAction.create({
        trigger: "<",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: FreTriggerType, editor: FreEditor) => {
            const parent = box.node;
            const newExpression = new LessThenExpression();
            parent[(box as ActionBox).propertyName] = newExpression;
            return newExpression;
        },
    }),
    FreCreateBinaryExpressionAction.create({
        trigger: ">",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: FreTriggerType, editor: FreEditor) => {
            const parent = box.node;
            const newExpression = new GreaterThenExpression();
            parent[(box as ActionBox).propertyName] = newExpression;
            return newExpression;
        },
    }),
    FreCreateBinaryExpressionAction.create({
        trigger: "==",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: FreTriggerType, editor: FreEditor) => {
            const parent = box.node;
            const newExpression = new EqualsExpression();
            parent[(box as ActionBox).propertyName] = newExpression;
            return newExpression;
        },
    }),
];

export const CUSTOM_ACTIONS: FreCustomAction[] = [
    FreCustomAction.create({
        // Action to insert new reference to a concept
        activeInBoxRoles: ["topics"],
        trigger: "topics",
        action: (box: Box, trigger: FreTriggerType, ed: FreEditor): FreNode | null => {
            const parent: SiteGroup = box.node as SiteGroup;
            const newBase: FreNodeReference<Topic> = FreNodeReference.create<Topic>("", null);
            parent.topics.push(newBase);
            return newBase.referred;
        },
    }),
    FreCustomAction.create({
        // Action to insert new reference to a concept
        activeInBoxRoles: ["flows"],
        trigger: "flows",
        action: (box: Box, trigger: FreTriggerType, ed: FreEditor): FreNode | null => {
            const parent: SiteGroup = box.node as SiteGroup;
            const newBase: FreNodeReference<Flow> = FreNodeReference.create<Flow>("", null);
            parent.flows.push(newBase);
            return newBase.referred;
        },
    }),
    FreCustomAction.create({
        // Action to insert new reference to a concept
        activeInBoxRoles: ["tests"],
        trigger: "tests",
        action: (box: Box, trigger: FreTriggerType, ed: FreEditor): FreNode | null => {
            const parent: SiteGroup = box.node as SiteGroup;
            const newBase: FreNodeReference<Test> = FreNodeReference.create<Test>("", null);
            parent.tests.push(newBase);
            return newBase.referred;
        },
    }),
];
