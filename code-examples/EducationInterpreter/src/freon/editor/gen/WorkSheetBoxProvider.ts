// Generated by the Freon Language Generator.
import { Box, BoxUtil, FreBoxProvider, FreProjectionHandler, BoxFactory } from "@freon4dsl/core";

import { WorkSheet } from "../../language/gen/index.js";

import { PageBoxProvider } from "../../editor/gen/index.js";

/**
 * This class implements the box provider for a single node of type WorkSheet.
 * The box provider is able to create the (tree of) boxes for the node, based
 * on the projections that are currently selected by the user.
 * The top of the tree of boxes is always a box of type ElementBox, which is
 * a box that will never be rendered itself, only its content will. Thus, we
 * have a stable entry in the complete box tree for every FreNode node.
 */
export class WorkSheetBoxProvider extends FreBoxProvider {
    constructor(mainHandler: FreProjectionHandler) {
        super(mainHandler);
        this.knownBoxProjections = ["default"];
        this.knownTableProjections = ["default"];
        this.conceptName = "WorkSheet";
    }

    protected getContent(projectionName: string): Box {
        // console.log("GET CONTENT " + this._node?.freId() + ' ' +  this._node?.freLanguageConcept() + ' ' + projectionName);
        // see if we need to use a custom projection
        if (!this.knownBoxProjections.includes(projectionName) && !this.knownTableProjections.includes(projectionName)) {
            const BOX: Box = this.mainHandler.executeCustomProjection(this._node, projectionName);
            if (!!BOX) {
                // found one, so return it
                return BOX;
            }
        } else {
            // select the box to return based on the projectionName
            if (projectionName === "default") {
                return this.getDefault();
            }
        }
        // in all other cases, return the default
        return this.getDefault();
    }

    private getDefault(): Box {
        return BoxFactory.verticalLayout(this._node as WorkSheet, "WorkSheet-overall", "", [
            BoxUtil.labelBox(this._node as WorkSheet, "----------------------------------------------------", "top-1-line-0-item-0"),
            BoxFactory.horizontalLayout(
                this._node as WorkSheet,
                "WorkSheet-hlist-line-1",
                "",
                [BoxUtil.labelBox(this._node as WorkSheet, "Worksheet", "top-1-line-1-item-0"), this.getSuper("Page")],
                { selectable: false },
            ),
            BoxUtil.indentBox(
                this._node as WorkSheet,
                4,
                "2",
                BoxUtil.labelBox(this._node as WorkSheet, "See if you can answer the following questions.", "top-1-line-2-item-0"),
            ),
            BoxUtil.emptyLineBox(this._node as WorkSheet, "WorkSheet-empty-line-3"),
            BoxUtil.indentBox(this._node as WorkSheet, 4, "4", this.getSuper("Page", "footing")),
        ]);
    }

    /**
     * This method returns the content for one of the super concepts or interfaces of 'this._node'.
     * Based on the name of the super concept/interface, a temporary BoxProvider is created. This BoxProvider
     * then returns the result of its 'getContent' method, using 'projectionName' as parameter.
     *
     * @param superName         The name of the super concept or interface for which the projection is requested.
     * @param projectionName    The name of projection that is requested.
     * @private
     */
    private getSuper(superName: string, projectionName?: string): Box {
        let superBoxProvider: FreBoxProvider = null;
        switch (superName) {
            case "Page": {
                superBoxProvider = new PageBoxProvider(this.mainHandler);
                break;
            }
        }
        if (!!superBoxProvider) {
            superBoxProvider.node = this._node as WorkSheet;
            return superBoxProvider.getContentForSuper(projectionName);
        } else {
            return BoxUtil.labelBox(
                this._node as WorkSheet,
                "ERROR: '" +
                    superName +
                    "' is not a super concept or interface for element of type '" +
                    (this._node as WorkSheet).freLanguageConcept() +
                    "'",
                "super-projection-error-box",
            );
        }
    }
}
