// Generated by the Freon Language Generator.
// Generated by Freon LanguageTemplate
import {
    FreLanguage,
    FreLanguageModel,
    FreLanguageModelUnit,
    FreLanguageProperty,
    FreLanguageConcept,
    FreLanguageInterface,
    FreNodeReference,
} from "@freon4dsl/core";

// Import as MyLanguage to avoid naming conflicts in generated constructors
import * as MyLanguage from "./internal.js";
import { EducationStdlib } from "../../stdlib/gen/EducationStdlib.js";

/**
 * Creates an in-memory representation of structure of the language metamodel, used in e.g. the (de)serializer.
 */
export function initializeLanguage() {
    FreLanguage.getInstance().name = "Education";
    FreLanguage.getInstance().id = "";
    FreLanguage.getInstance().addModel(describeEducation());
    FreLanguage.getInstance().addUnit(describeFlow());
    FreLanguage.getInstance().addUnit(describeSiteGroup());
    FreLanguage.getInstance().addUnit(describeTest());
    FreLanguage.getInstance().addUnit(describeTopic());
    FreLanguage.getInstance().addConcept(describeFlowRule());
    FreLanguage.getInstance().addConcept(describePageTransition());
    FreLanguage.getInstance().addConcept(describeGrade());
    FreLanguage.getInstance().addConcept(describePrimitiveType());
    FreLanguage.getInstance().addConcept(describeGradeScore());
    FreLanguage.getInstance().addConcept(describeScoreExpression());
    FreLanguage.getInstance().addConcept(describeQuestionReference());
    FreLanguage.getInstance().addConcept(describeNrOfCorrectAnswers());
    FreLanguage.getInstance().addConcept(describeNumberLiteralExpression());
    FreLanguage.getInstance().addConcept(describeBinaryExpression());
    FreLanguage.getInstance().addConcept(describeAndExpression());
    FreLanguage.getInstance().addConcept(describeOrExpression());
    FreLanguage.getInstance().addConcept(describeComparisonExpression());
    FreLanguage.getInstance().addConcept(describeLessOrEqualsExpression());
    FreLanguage.getInstance().addConcept(describeGreaterOrEqualsExpression());
    FreLanguage.getInstance().addConcept(describeLessThenExpression());
    FreLanguage.getInstance().addConcept(describeGreaterThenExpression());
    FreLanguage.getInstance().addConcept(describeEqualsExpression());
    FreLanguage.getInstance().addConcept(describeScenario());
    FreLanguage.getInstance().addConcept(describeTestFlow());
    FreLanguage.getInstance().addConcept(describeStep());
    FreLanguage.getInstance().addConcept(describeLastStep());
    FreLanguage.getInstance().addConcept(describeAnswer());
    FreLanguage.getInstance().addConcept(describePage());
    FreLanguage.getInstance().addConcept(describeTheory());
    FreLanguage.getInstance().addConcept(describeLine());
    FreLanguage.getInstance().addConcept(describeVideo());
    FreLanguage.getInstance().addConcept(describeWorkSheet());
    FreLanguage.getInstance().addConcept(describeExamplePage());
    FreLanguage.getInstance().addConcept(describeInDepthMaterial());
    FreLanguage.getInstance().addConcept(describeQuestion());
    FreLanguage.getInstance().addConcept(describeNumberConcept());
    FreLanguage.getInstance().addConcept(describeSimpleNumber());
    FreLanguage.getInstance().addConcept(describeFraction());
    FreLanguage.getInstance().addInterface(describeType());
    FreLanguage.getInstance().addReferenceCreator((name: string, type: string) => {
        return !!name ? FreNodeReference.create(name, type) : null;
    });
    FreLanguage.getInstance().stdLib = EducationStdlib.getInstance();
}

function describeEducation(): FreLanguageModel {
    const model: FreLanguageModel = {
        typeName: "Education",
        id: "-id-Education",
        key: "-key-Education",
        isNamespace: true,
        language: "-key-Education",
        constructor: (id?: string) => {
            return new MyLanguage.Education(id);
        },
        creator: (data: Partial<MyLanguage.Education>) => {
            return MyLanguage.Education.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
    };
    model.properties.set("name", {
        name: "name",
        id: "-id-Education-name",
        key: "-key-Education-name",
        type: "string",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "primitive",
    });
    model.properties.set("topic", {
        name: "topic",
        id: "-id-Education-topic",
        key: "-key-Education-topic",
        type: "Topic",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    model.properties.set("flow", {
        name: "flow",
        id: "-id-Education-flow",
        key: "-key-Education-flow",
        type: "Flow",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    model.properties.set("tests", {
        name: "tests",
        id: "-id-Education-tests",
        key: "-key-Education-tests",
        type: "Test",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    model.properties.set("overviews", {
        name: "overviews",
        id: "-id-Education-overviews",
        key: "-key-Education-overviews",
        type: "SiteGroup",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });

    return model;
}

function describeFlow(): FreLanguageModelUnit {
    const modelunit: FreLanguageModelUnit = {
        typeName: "Flow",
        id: "-id-Flow",
        key: "-key-Flow",
        isNamedElement: true,
        language: "-key-Education",
        fileExtension: "flo",
        subConceptNames: [], // Nothing yet, but may change in the future
        constructor: (id?: string) => {
            return new MyLanguage.Flow(id);
        },
        creator: (data: Partial<MyLanguage.Flow>) => {
            return MyLanguage.Flow.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        trigger: "Flow",
    };
    modelunit.properties.set("name", {
        name: "name",
        id: "-id-Flow-name",
        key: "-key-Flow-name",
        type: "string",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "primitive",
    });
    modelunit.properties.set("rules", {
        name: "rules",
        id: "-id-Flow-rules",
        key: "-key-Flow-rules",
        type: "FlowRule",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    modelunit.properties.set("main", {
        name: "main",
        id: "-id-Flow-main",
        key: "-key-Flow-main",
        type: "SiteGroup",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "reference",
    });
    return modelunit;
}

function describeSiteGroup(): FreLanguageModelUnit {
    const modelunit: FreLanguageModelUnit = {
        typeName: "SiteGroup",
        id: "-id-SiteGroup",
        key: "-key-SiteGroup",
        isNamedElement: true,
        language: "-key-Education",
        fileExtension: "sit",
        subConceptNames: [], // Nothing yet, but may change in the future
        constructor: (id?: string) => {
            return new MyLanguage.SiteGroup(id);
        },
        creator: (data: Partial<MyLanguage.SiteGroup>) => {
            return MyLanguage.SiteGroup.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        trigger: "SiteGroup",
    };
    modelunit.properties.set("name", {
        name: "name",
        id: "-id-SiteGroup-name",
        key: "-key-SiteGroup-name",
        type: "string",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "primitive",
    });
    modelunit.properties.set("description", {
        name: "description",
        id: "-id-SiteGroup-description",
        key: "-key-SiteGroup-description",
        type: "string",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "primitive",
    });

    modelunit.properties.set("topics", {
        name: "topics",
        id: "-id-SiteGroup-topics",
        key: "-key-SiteGroup-topics",
        type: "Topic",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "reference",
    });
    modelunit.properties.set("flows", {
        name: "flows",
        id: "-id-SiteGroup-flows",
        key: "-key-SiteGroup-flows",
        type: "Flow",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "reference",
    });
    modelunit.properties.set("tests", {
        name: "tests",
        id: "-id-SiteGroup-tests",
        key: "-key-SiteGroup-tests",
        type: "Test",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "reference",
    });
    return modelunit;
}

function describeTest(): FreLanguageModelUnit {
    const modelunit: FreLanguageModelUnit = {
        typeName: "Test",
        id: "-id-Test",
        key: "-key-Test",
        isNamedElement: true,
        language: "-key-Education",
        fileExtension: "tes",
        subConceptNames: [], // Nothing yet, but may change in the future
        constructor: (id?: string) => {
            return new MyLanguage.Test(id);
        },
        creator: (data: Partial<MyLanguage.Test>) => {
            return MyLanguage.Test.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        trigger: "Test",
    };
    modelunit.properties.set("name", {
        name: "name",
        id: "-id-Test-name",
        key: "-key-Test-name",
        type: "string",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "primitive",
    });
    modelunit.properties.set("scenarios", {
        name: "scenarios",
        id: "-id-Test-scenarios",
        key: "-key-Test-scenarios",
        type: "Scenario",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    modelunit.properties.set("main", {
        name: "main",
        id: "-id-Test-main",
        key: "-key-Test-main",
        type: "SiteGroup",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "reference",
    });
    modelunit.properties.set("flow", {
        name: "flow",
        id: "-id-Test-flow",
        key: "-key-Test-flow",
        type: "Flow",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "reference",
    });
    return modelunit;
}

function describeTopic(): FreLanguageModelUnit {
    const modelunit: FreLanguageModelUnit = {
        typeName: "Topic",
        id: "-id-Topic",
        key: "-key-Topic",
        isNamedElement: true,
        language: "-key-Education",
        fileExtension: "top",
        subConceptNames: [], // Nothing yet, but may change in the future
        constructor: (id?: string) => {
            return new MyLanguage.Topic(id);
        },
        creator: (data: Partial<MyLanguage.Topic>) => {
            return MyLanguage.Topic.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        trigger: "Topic",
    };
    modelunit.properties.set("name", {
        name: "name",
        id: "-id-Topic-name",
        key: "-key-Topic-name",
        type: "string",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "primitive",
    });
    modelunit.properties.set("description", {
        name: "description",
        id: "-id-Topic-description",
        key: "-key-Topic-description",
        type: "string",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "primitive",
    });
    modelunit.properties.set("pages", {
        name: "pages",
        id: "-id-Topic-pages",
        key: "-key-Topic-pages",
        type: "Page",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    modelunit.properties.set("main", {
        name: "main",
        id: "-id-Topic-main",
        key: "-key-Topic-main",
        type: "SiteGroup",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "reference",
    });
    return modelunit;
}

function describeFlowRule(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "FlowRule",
        id: "-id-FlowRule",
        key: "-key-FlowRule",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: true,
        trigger: "FlowRule",
        constructor: (id?: string) => {
            return new MyLanguage.FlowRule(id);
        },
        creator: (data: Partial<MyLanguage.FlowRule>) => {
            return MyLanguage.FlowRule.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-FlowRule-name",
        key: "-key-FlowRule-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-Education",
        propertyKind: "primitive",
    });
    concept.properties.set("description", {
        name: "description",
        id: "-id-FlowRule-description",
        key: "-key-FlowRule-description",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-Education",
        propertyKind: "primitive",
    });
    concept.properties.set("transitions", {
        name: "transitions",
        id: "-id-FlowRule-transitions",
        key: "-key-FlowRule-transitions",
        type: "PageTransition",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("page", {
        name: "page",
        id: "-id-FlowRule-page",
        key: "-key-FlowRule-page",
        type: "Page",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "reference",
    });
    return concept;
}

function describePageTransition(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "PageTransition",
        id: "-id-PageTransition",
        key: "-key-PageTransition",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "PageTransition",
        constructor: (id?: string) => {
            return new MyLanguage.PageTransition(id);
        },
        creator: (data: Partial<MyLanguage.PageTransition>) => {
            return MyLanguage.PageTransition.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };

    concept.properties.set("condition", {
        name: "condition",
        id: "-id-PageTransition-condition",
        key: "-key-PageTransition-condition",
        type: "Grade",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "reference",
    });
    concept.properties.set("toPage", {
        name: "toPage",
        id: "-id-PageTransition-toPage",
        key: "-key-PageTransition-toPage",
        type: "Page",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "reference",
    });
    return concept;
}

function describeGrade(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "Grade",
        id: "-id-Grade",
        key: "-key-Grade",
        isAbstract: false,
        isPublic: true,
        isLimited: true,
        instanceNames: ["gradeA", "gradeB", "gradeC", "gradeD", "gradeE", "gradeF"],
        language: "-key-Education",
        isNamedElement: true,
        trigger: "Grade",
        constructor: (id?: string) => {
            return new MyLanguage.Grade(id);
        },
        creator: (data: Partial<MyLanguage.Grade>) => {
            return MyLanguage.Grade.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-Grade-name",
        key: "-key-Grade-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-Education",
        propertyKind: "primitive",
    });

    return concept;
}

function describePrimitiveType(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "PrimitiveType",
        id: "-id-PrimitiveType",
        key: "-key-PrimitiveType",
        isAbstract: false,
        isPublic: true,
        isLimited: true,
        instanceNames: ["Integer", "Boolean", "ANY"],
        language: "-key-Education",
        isNamedElement: true,
        trigger: "PrimitiveType",
        constructor: (id?: string) => {
            return new MyLanguage.PrimitiveType(id);
        },
        creator: (data: Partial<MyLanguage.PrimitiveType>) => {
            return MyLanguage.PrimitiveType.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-Type-name",
        key: "-key-Type-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-Education",
        propertyKind: "primitive",
    });

    return concept;
}

function describeGradeScore(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "GradeScore",
        id: "-id-GradeScore",
        key: "-key-GradeScore",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "GradeScore",
        constructor: (id?: string) => {
            return new MyLanguage.GradeScore(id);
        },
        creator: (data: Partial<MyLanguage.GradeScore>) => {
            return MyLanguage.GradeScore.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };

    concept.properties.set("expr", {
        name: "expr",
        id: "-id-GradeScore-expr",
        key: "-key-GradeScore-expr",
        type: "ScoreExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("grade", {
        name: "grade",
        id: "-id-GradeScore-grade",
        key: "-key-GradeScore-grade",
        type: "Grade",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "reference",
    });
    return concept;
}

function describeScoreExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "ScoreExpression",
        id: "-id-ScoreExpression",
        key: "-key-ScoreExpression",
        isAbstract: true,
        isPublic: false,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "ScoreExpression",
        constructor: (id?: string) => {
            return null;
        },
        creator: (data: Partial<MyLanguage.ScoreExpression>) => {
            return null;
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [
            "QuestionReference",
            "NrOfCorrectAnswers",
            "NumberLiteralExpression",
            "BinaryExpression",
            "AndExpression",
            "OrExpression",
            "ComparisonExpression",
            "LessOrEqualsExpression",
            "GreaterOrEqualsExpression",
            "LessThenExpression",
            "GreaterThenExpression",
            "EqualsExpression",
        ],
    };

    return concept;
}

function describeQuestionReference(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "QuestionReference",
        id: "-id-QuestionReference",
        key: "-key-QuestionReference",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "QuestionReference",
        constructor: (id?: string) => {
            return new MyLanguage.QuestionReference(id);
        },
        creator: (data: Partial<MyLanguage.QuestionReference>) => {
            return MyLanguage.QuestionReference.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "ScoreExpression",
        subConceptNames: [],
    };

    concept.properties.set("question", {
        name: "question",
        id: "-id-QuestionReference-question",
        key: "-key-QuestionReference-question",
        type: "Question",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "reference",
    });
    return concept;
}

function describeNrOfCorrectAnswers(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "NrOfCorrectAnswers",
        id: "-id-NrOfCorrectAnswers",
        key: "-key-NrOfCorrectAnswers",
        isAbstract: false,
        isPublic: false,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "NrOfCorrectAnswers",
        constructor: (id?: string) => {
            return new MyLanguage.NrOfCorrectAnswers(id);
        },
        creator: (data: Partial<MyLanguage.NrOfCorrectAnswers>) => {
            return MyLanguage.NrOfCorrectAnswers.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "ScoreExpression",
        subConceptNames: [],
    };

    return concept;
}

function describeNumberLiteralExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "NumberLiteralExpression",
        id: "-id-NumberLiteralExpression",
        key: "-key-NumberLiteralExpression",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "NumberLiteralExpression",
        constructor: (id?: string) => {
            return new MyLanguage.NumberLiteralExpression(id);
        },
        creator: (data: Partial<MyLanguage.NumberLiteralExpression>) => {
            return MyLanguage.NumberLiteralExpression.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "ScoreExpression",
        subConceptNames: [],
    };
    concept.properties.set("value", {
        name: "value",
        id: "-id-NumberLiteralExpression-value",
        key: "-key-NumberLiteralExpression-value",
        type: "number",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-Education",
        propertyKind: "primitive",
    });

    return concept;
}

function describeBinaryExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "BinaryExpression",
        id: "-id-BinaryExpression",
        key: "-key-BinaryExpression",
        isAbstract: true,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "BinaryExpression",
        constructor: (id?: string) => {
            return null;
        },
        creator: (data: Partial<MyLanguage.BinaryExpression>) => {
            return null;
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "ScoreExpression",
        subConceptNames: [
            "AndExpression",
            "OrExpression",
            "ComparisonExpression",
            "LessOrEqualsExpression",
            "GreaterOrEqualsExpression",
            "LessThenExpression",
            "GreaterThenExpression",
            "EqualsExpression",
        ],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-id-BinaryExpression-left",
        key: "-key-BinaryExpression-left",
        type: "ScoreExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-id-BinaryExpression-right",
        key: "-key-BinaryExpression-right",
        type: "ScoreExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });

    return concept;
}

function describeAndExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "AndExpression",
        id: "-id-AndExpression",
        key: "-key-AndExpression",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "AndExpression",
        constructor: (id?: string) => {
            return new MyLanguage.AndExpression(id);
        },
        creator: (data: Partial<MyLanguage.AndExpression>) => {
            return MyLanguage.AndExpression.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "BinaryExpression",
        subConceptNames: [],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-id-BinaryExpression-left",
        key: "-key-BinaryExpression-left",
        type: "ScoreExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-id-BinaryExpression-right",
        key: "-key-BinaryExpression-right",
        type: "ScoreExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });

    return concept;
}

function describeOrExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "OrExpression",
        id: "-id-OrExpression",
        key: "-key-OrExpression",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "OrExpression",
        constructor: (id?: string) => {
            return new MyLanguage.OrExpression(id);
        },
        creator: (data: Partial<MyLanguage.OrExpression>) => {
            return MyLanguage.OrExpression.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "BinaryExpression",
        subConceptNames: [],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-id-BinaryExpression-left",
        key: "-key-BinaryExpression-left",
        type: "ScoreExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-id-BinaryExpression-right",
        key: "-key-BinaryExpression-right",
        type: "ScoreExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });

    return concept;
}

function describeComparisonExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "ComparisonExpression",
        id: "-id-ComparisonExpression",
        key: "-key-ComparisonExpression",
        isAbstract: true,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "ComparisonExpression",
        constructor: (id?: string) => {
            return null;
        },
        creator: (data: Partial<MyLanguage.ComparisonExpression>) => {
            return null;
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "BinaryExpression",
        subConceptNames: [
            "LessOrEqualsExpression",
            "GreaterOrEqualsExpression",
            "LessThenExpression",
            "GreaterThenExpression",
            "EqualsExpression",
        ],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-id-BinaryExpression-left",
        key: "-key-BinaryExpression-left",
        type: "ScoreExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-id-BinaryExpression-right",
        key: "-key-BinaryExpression-right",
        type: "ScoreExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });

    return concept;
}

function describeLessOrEqualsExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "LessOrEqualsExpression",
        id: "-id-LessOrEqualsExpression",
        key: "-key-LessOrEqualsExpression",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "LessOrEqualsExpression",
        constructor: (id?: string) => {
            return new MyLanguage.LessOrEqualsExpression(id);
        },
        creator: (data: Partial<MyLanguage.LessOrEqualsExpression>) => {
            return MyLanguage.LessOrEqualsExpression.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "ComparisonExpression",
        subConceptNames: [],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-id-BinaryExpression-left",
        key: "-key-BinaryExpression-left",
        type: "ScoreExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-id-BinaryExpression-right",
        key: "-key-BinaryExpression-right",
        type: "ScoreExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });

    return concept;
}

function describeGreaterOrEqualsExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "GreaterOrEqualsExpression",
        id: "-id-GreaterOrEqualsExpression",
        key: "-key-GreaterOrEqualsExpression",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "GreaterOrEqualsExpression",
        constructor: (id?: string) => {
            return new MyLanguage.GreaterOrEqualsExpression(id);
        },
        creator: (data: Partial<MyLanguage.GreaterOrEqualsExpression>) => {
            return MyLanguage.GreaterOrEqualsExpression.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "ComparisonExpression",
        subConceptNames: [],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-id-BinaryExpression-left",
        key: "-key-BinaryExpression-left",
        type: "ScoreExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-id-BinaryExpression-right",
        key: "-key-BinaryExpression-right",
        type: "ScoreExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });

    return concept;
}

function describeLessThenExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "LessThenExpression",
        id: "-id-LessThenExpression",
        key: "-key-LessThenExpression",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "LessThenExpression",
        constructor: (id?: string) => {
            return new MyLanguage.LessThenExpression(id);
        },
        creator: (data: Partial<MyLanguage.LessThenExpression>) => {
            return MyLanguage.LessThenExpression.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "ComparisonExpression",
        subConceptNames: [],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-id-BinaryExpression-left",
        key: "-key-BinaryExpression-left",
        type: "ScoreExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-id-BinaryExpression-right",
        key: "-key-BinaryExpression-right",
        type: "ScoreExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });

    return concept;
}

function describeGreaterThenExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "GreaterThenExpression",
        id: "-id-GreaterThenExpression",
        key: "-key-GreaterThenExpression",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "GreaterThenExpression",
        constructor: (id?: string) => {
            return new MyLanguage.GreaterThenExpression(id);
        },
        creator: (data: Partial<MyLanguage.GreaterThenExpression>) => {
            return MyLanguage.GreaterThenExpression.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "ComparisonExpression",
        subConceptNames: [],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-id-BinaryExpression-left",
        key: "-key-BinaryExpression-left",
        type: "ScoreExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-id-BinaryExpression-right",
        key: "-key-BinaryExpression-right",
        type: "ScoreExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });

    return concept;
}

function describeEqualsExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "EqualsExpression",
        id: "-id-EqualsExpression",
        key: "-key-EqualsExpression",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "EqualsExpression",
        constructor: (id?: string) => {
            return new MyLanguage.EqualsExpression(id);
        },
        creator: (data: Partial<MyLanguage.EqualsExpression>) => {
            return MyLanguage.EqualsExpression.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "ComparisonExpression",
        subConceptNames: [],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-id-BinaryExpression-left",
        key: "-key-BinaryExpression-left",
        type: "ScoreExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-id-BinaryExpression-right",
        key: "-key-BinaryExpression-right",
        type: "ScoreExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });

    return concept;
}

function describeScenario(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "Scenario",
        id: "-id-Scenario",
        key: "-key-Scenario",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "Scenario",
        constructor: (id?: string) => {
            return new MyLanguage.Scenario(id);
        },
        creator: (data: Partial<MyLanguage.Scenario>) => {
            return MyLanguage.Scenario.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("description", {
        name: "description",
        id: "-id-Scenario-description",
        key: "-key-Scenario-description",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-Education",
        propertyKind: "primitive",
    });
    concept.properties.set("testFlow", {
        name: "testFlow",
        id: "-id-Scenario-testFlow",
        key: "-key-Scenario-testFlow",
        type: "TestFlow",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("steps", {
        name: "steps",
        id: "-id-Scenario-steps",
        key: "-key-Scenario-steps",
        type: "Step",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });

    return concept;
}

function describeTestFlow(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "TestFlow",
        id: "-id-TestFlow",
        key: "-key-TestFlow",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "TestFlow",
        constructor: (id?: string) => {
            return new MyLanguage.TestFlow(id);
        },
        creator: (data: Partial<MyLanguage.TestFlow>) => {
            return MyLanguage.TestFlow.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };

    concept.properties.set("steps", {
        name: "steps",
        id: "-id-TestFlow-steps",
        key: "-key-TestFlow-steps",
        type: "Step",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });

    return concept;
}

function describeStep(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "Step",
        id: "-id-Step",
        key: "-key-Step",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "Step",
        constructor: (id?: string) => {
            return new MyLanguage.Step(id);
        },
        creator: (data: Partial<MyLanguage.Step>) => {
            return MyLanguage.Step.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: ["LastStep"],
    };

    concept.properties.set("answerSeries", {
        name: "answerSeries",
        id: "-id-Step-answerSeries",
        key: "-key-Step-answerSeries",
        type: "Answer",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("fromPage", {
        name: "fromPage",
        id: "-id-Step-fromPage",
        key: "-key-Step-fromPage",
        type: "Page",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "reference",
    });
    return concept;
}

function describeLastStep(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "LastStep",
        id: "-id-LastStep",
        key: "-key-LastStep",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "LastStep",
        constructor: (id?: string) => {
            return new MyLanguage.LastStep(id);
        },
        creator: (data: Partial<MyLanguage.LastStep>) => {
            return MyLanguage.LastStep.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Step",
        subConceptNames: [],
    };

    concept.properties.set("answerSeries", {
        name: "answerSeries",
        id: "-id-Step-answerSeries",
        key: "-key-Step-answerSeries",
        type: "Answer",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("fromPage", {
        name: "fromPage",
        id: "-id-Step-fromPage",
        key: "-key-Step-fromPage",
        type: "Page",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "reference",
    });
    return concept;
}

function describeAnswer(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "Answer",
        id: "-id-Answer",
        key: "-key-Answer",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "Answer",
        constructor: (id?: string) => {
            return new MyLanguage.Answer(id);
        },
        creator: (data: Partial<MyLanguage.Answer>) => {
            return MyLanguage.Answer.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };

    concept.properties.set("value", {
        name: "value",
        id: "-id-Answer-value",
        key: "-key-Answer-value",
        type: "NumberConcept",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("question", {
        name: "question",
        id: "-id-Answer-question",
        key: "-key-Answer-question",
        type: "Question",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "reference",
    });
    return concept;
}

function describePage(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "Page",
        id: "-id-Page",
        key: "-key-Page",
        isAbstract: true,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: true,
        trigger: "Page",
        constructor: (id?: string) => {
            return null;
        },
        creator: (data: Partial<MyLanguage.Page>) => {
            return null;
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: ["Theory", "Video", "WorkSheet", "ExamplePage", "InDepthMaterial"],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-Page-name",
        key: "-key-Page-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-Education",
        propertyKind: "primitive",
    });
    concept.properties.set("questions", {
        name: "questions",
        id: "-id-Page-questions",
        key: "-key-Page-questions",
        type: "Question",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("grading", {
        name: "grading",
        id: "-id-Page-grading",
        key: "-key-Page-grading",
        type: "GradeScore",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });

    return concept;
}

function describeTheory(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "Theory",
        id: "-id-Theory",
        key: "-key-Theory",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: true,
        trigger: "Theory",
        constructor: (id?: string) => {
            return new MyLanguage.Theory(id);
        },
        creator: (data: Partial<MyLanguage.Theory>) => {
            return MyLanguage.Theory.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Page",
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-Page-name",
        key: "-key-Page-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-Education",
        propertyKind: "primitive",
    });
    concept.properties.set("content", {
        name: "content",
        id: "-id-Theory-content",
        key: "-key-Theory-content",
        type: "Line",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("questions", {
        name: "questions",
        id: "-id-Page-questions",
        key: "-key-Page-questions",
        type: "Question",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("grading", {
        name: "grading",
        id: "-id-Page-grading",
        key: "-key-Page-grading",
        type: "GradeScore",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });

    return concept;
}

function describeLine(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "Line",
        id: "-id-Line",
        key: "-key-Line",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "Line",
        constructor: (id?: string) => {
            return new MyLanguage.Line(id);
        },
        creator: (data: Partial<MyLanguage.Line>) => {
            return MyLanguage.Line.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("content", {
        name: "content",
        id: "-id-Line-content",
        key: "-key-Line-content",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-Education",
        propertyKind: "primitive",
    });

    return concept;
}

function describeVideo(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "Video",
        id: "-id-Video",
        key: "-key-Video",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: true,
        trigger: "Video",
        constructor: (id?: string) => {
            return new MyLanguage.Video(id);
        },
        creator: (data: Partial<MyLanguage.Video>) => {
            return MyLanguage.Video.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Page",
        subConceptNames: [],
    };
    concept.properties.set("url", {
        name: "url",
        id: "-id-Video-url",
        key: "-key-Video-url",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-Education",
        propertyKind: "primitive",
    });
    concept.properties.set("name", {
        name: "name",
        id: "-id-Page-name",
        key: "-key-Page-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-Education",
        propertyKind: "primitive",
    });
    concept.properties.set("questions", {
        name: "questions",
        id: "-id-Page-questions",
        key: "-key-Page-questions",
        type: "Question",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("grading", {
        name: "grading",
        id: "-id-Page-grading",
        key: "-key-Page-grading",
        type: "GradeScore",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });

    return concept;
}

function describeWorkSheet(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "WorkSheet",
        id: "-id-WorkSheet",
        key: "-key-WorkSheet",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: true,
        trigger: "WorkSheet",
        constructor: (id?: string) => {
            return new MyLanguage.WorkSheet(id);
        },
        creator: (data: Partial<MyLanguage.WorkSheet>) => {
            return MyLanguage.WorkSheet.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Page",
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-Page-name",
        key: "-key-Page-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-Education",
        propertyKind: "primitive",
    });
    concept.properties.set("questions", {
        name: "questions",
        id: "-id-Page-questions",
        key: "-key-Page-questions",
        type: "Question",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("grading", {
        name: "grading",
        id: "-id-Page-grading",
        key: "-key-Page-grading",
        type: "GradeScore",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });

    return concept;
}

function describeExamplePage(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "ExamplePage",
        id: "-id-ExamplePage",
        key: "-key-ExamplePage",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: true,
        trigger: "ExamplePage",
        constructor: (id?: string) => {
            return new MyLanguage.ExamplePage(id);
        },
        creator: (data: Partial<MyLanguage.ExamplePage>) => {
            return MyLanguage.ExamplePage.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Page",
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-Page-name",
        key: "-key-Page-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-Education",
        propertyKind: "primitive",
    });
    concept.properties.set("content", {
        name: "content",
        id: "-id-ExamplePage-content",
        key: "-key-ExamplePage-content",
        type: "Line",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("questions", {
        name: "questions",
        id: "-id-Page-questions",
        key: "-key-Page-questions",
        type: "Question",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("grading", {
        name: "grading",
        id: "-id-Page-grading",
        key: "-key-Page-grading",
        type: "GradeScore",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });

    return concept;
}

function describeInDepthMaterial(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "InDepthMaterial",
        id: "-id-InDepthMaterial",
        key: "-key-InDepthMaterial",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: true,
        trigger: "InDepthMaterial",
        constructor: (id?: string) => {
            return new MyLanguage.InDepthMaterial(id);
        },
        creator: (data: Partial<MyLanguage.InDepthMaterial>) => {
            return MyLanguage.InDepthMaterial.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Page",
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-Page-name",
        key: "-key-Page-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-Education",
        propertyKind: "primitive",
    });
    concept.properties.set("content", {
        name: "content",
        id: "-id-InDepthMaterial-content",
        key: "-key-InDepthMaterial-content",
        type: "Line",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("questions", {
        name: "questions",
        id: "-id-Page-questions",
        key: "-key-Page-questions",
        type: "Question",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });
    concept.properties.set("grading", {
        name: "grading",
        id: "-id-Page-grading",
        key: "-key-Page-grading",
        type: "GradeScore",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });

    return concept;
}

function describeQuestion(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "Question",
        id: "-id-Question",
        key: "-key-Question",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: true,
        trigger: "Question",
        constructor: (id?: string) => {
            return new MyLanguage.Question(id);
        },
        creator: (data: Partial<MyLanguage.Question>) => {
            return MyLanguage.Question.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-Question-name",
        key: "-key-Question-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-Education",
        propertyKind: "primitive",
    });
    concept.properties.set("content", {
        name: "content",
        id: "-id-Question-content",
        key: "-key-Question-content",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-Education",
        propertyKind: "primitive",
    });
    concept.properties.set("correctAnswer", {
        name: "correctAnswer",
        id: "-id-Question-correctAnswer",
        key: "-key-Question-correctAnswer",
        type: "NumberConcept",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Education",
        propertyKind: "part",
    });

    return concept;
}

function describeNumberConcept(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "NumberConcept",
        id: "-id-NumberConcept",
        key: "-key-NumberConcept",
        isAbstract: true,
        isPublic: false,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "NumberConcept",
        constructor: (id?: string) => {
            return null;
        },
        creator: (data: Partial<MyLanguage.NumberConcept>) => {
            return null;
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: ["SimpleNumber", "Fraction"],
    };

    return concept;
}

function describeSimpleNumber(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "SimpleNumber",
        id: "-id-SimpleNumber",
        key: "-key-SimpleNumber",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "SimpleNumber",
        constructor: (id?: string) => {
            return new MyLanguage.SimpleNumber(id);
        },
        creator: (data: Partial<MyLanguage.SimpleNumber>) => {
            return MyLanguage.SimpleNumber.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "NumberConcept",
        subConceptNames: [],
    };
    concept.properties.set("value", {
        name: "value",
        id: "-id-SimpleNumber-value",
        key: "-key-SimpleNumber-value",
        type: "number",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-Education",
        propertyKind: "primitive",
    });

    return concept;
}

function describeFraction(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "Fraction",
        id: "-id-Fraction",
        key: "-key-Fraction",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-Education",
        isNamedElement: false,
        trigger: "Fraction",
        constructor: (id?: string) => {
            return new MyLanguage.Fraction(id);
        },
        creator: (data: Partial<MyLanguage.Fraction>) => {
            return MyLanguage.Fraction.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "NumberConcept",
        subConceptNames: [],
    };
    concept.properties.set("numerator", {
        name: "numerator",
        id: "-id-Fraction-numerator",
        key: "-key-Fraction-numerator",
        type: "number",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-Education",
        propertyKind: "primitive",
    });
    concept.properties.set("denominator", {
        name: "denominator",
        id: "-id-Fraction-denominator",
        key: "-key-Fraction-denominator",
        type: "number",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-Education",
        propertyKind: "primitive",
    });

    return concept;
}

function describeType(): FreLanguageInterface {
    const intface: FreLanguageInterface = {
        typeName: "Type",
        id: "-id-Type",
        key: "-key-Type",
        isPublic: true,
        isNamedElement: true,
        properties: new Map<string, FreLanguageProperty>(),
        constructor: undefined,
        creator: undefined,
        language: "Education",
        subConceptNames: ["PrimitiveType"],
    };
    intface.properties.set("name", {
        name: "name",
        id: "-id-Type-name",
        key: "-key-Type-name",
        type: "string",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "Education",
        propertyKind: "primitive",
    });

    return intface;
}
