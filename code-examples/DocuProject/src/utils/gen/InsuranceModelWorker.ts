// Generated by the Freon Language Generator.
import {
    AttributeRef,
    BaseProduct,
    BinaryExpression,
    BooleanLiteral,
    BooleanType,
    CalcFunction,
    Description,
    DivideExpression,
    DocuExpression,
    DocuType,
    Entity,
    EntityAttribute,
    EuroLiteral,
    EuroType,
    FunctionCallExpression,
    GenericKind,
    GenericLiteral,
    GenericTypeDecl,
    InsuranceModel,
    InsurancePart,
    InsurancePartRef,
    InsurancePartType,
    InsuranceProduct,
    InsuranceTheme,
    Literal,
    MinusExpression,
    MultiplyExpression,
    NumberLiteral,
    NumberType,
    Parameter,
    ParameterRef,
    Part,
    PayoutRef,
    PercentageLiteral,
    PercentageType,
    PlusExpression,
    PremiumDays,
    Product,
    RiskAdjustmentRef,
    RiskRef,
    Text,
    Text2,
    Text3,
    Text4,
    TypeRef,
} from "../../language/gen/index.js";

/**
 * Interface InsuranceModelWorker implements the extended visitor pattern of instances of language InsuranceModel.
 * Class InsuranceModelWalker implements the traversal of the model tree, classes that implement this interface
 * are responsible for the actual work being done on the nodes of the tree.
 * Every node is visited twice, once before the visit of its children, and once after this visit.
 */
export interface InsuranceModelWorker {
    execBeforeInsuranceModel(modelelement: InsuranceModel): boolean;
    execAfterInsuranceModel(modelelement: InsuranceModel): boolean;

    execBeforePart(modelelement: Part): boolean;
    execAfterPart(modelelement: Part): boolean;

    execBeforeProduct(modelelement: Product): boolean;
    execAfterProduct(modelelement: Product): boolean;

    execBeforeDocuExpression(modelelement: DocuExpression): boolean;
    execAfterDocuExpression(modelelement: DocuExpression): boolean;

    execBeforeLiteral(modelelement: Literal): boolean;
    execAfterLiteral(modelelement: Literal): boolean;

    execBeforeEuroLiteral(modelelement: EuroLiteral): boolean;
    execAfterEuroLiteral(modelelement: EuroLiteral): boolean;

    execBeforeNumberLiteral(modelelement: NumberLiteral): boolean;
    execAfterNumberLiteral(modelelement: NumberLiteral): boolean;

    execBeforePercentageLiteral(modelelement: PercentageLiteral): boolean;
    execAfterPercentageLiteral(modelelement: PercentageLiteral): boolean;

    execBeforeBooleanLiteral(modelelement: BooleanLiteral): boolean;
    execAfterBooleanLiteral(modelelement: BooleanLiteral): boolean;

    execBeforeBinaryExpression(modelelement: BinaryExpression): boolean;
    execAfterBinaryExpression(modelelement: BinaryExpression): boolean;

    execBeforePlusExpression(modelelement: PlusExpression): boolean;
    execAfterPlusExpression(modelelement: PlusExpression): boolean;

    execBeforeMinusExpression(modelelement: MinusExpression): boolean;
    execAfterMinusExpression(modelelement: MinusExpression): boolean;

    execBeforeMultiplyExpression(modelelement: MultiplyExpression): boolean;
    execAfterMultiplyExpression(modelelement: MultiplyExpression): boolean;

    execBeforeDivideExpression(modelelement: DivideExpression): boolean;
    execAfterDivideExpression(modelelement: DivideExpression): boolean;

    execBeforeFunctionCallExpression(modelelement: FunctionCallExpression): boolean;
    execAfterFunctionCallExpression(modelelement: FunctionCallExpression): boolean;

    execBeforeInsurancePartRef(modelelement: InsurancePartRef): boolean;
    execAfterInsurancePartRef(modelelement: InsurancePartRef): boolean;

    execBeforeRiskAdjustmentRef(modelelement: RiskAdjustmentRef): boolean;
    execAfterRiskAdjustmentRef(modelelement: RiskAdjustmentRef): boolean;

    execBeforeParameterRef(modelelement: ParameterRef): boolean;
    execAfterParameterRef(modelelement: ParameterRef): boolean;

    execBeforeAttributeRef(modelelement: AttributeRef): boolean;
    execAfterAttributeRef(modelelement: AttributeRef): boolean;

    execBeforeRiskRef(modelelement: RiskRef): boolean;
    execAfterRiskRef(modelelement: RiskRef): boolean;

    execBeforePayoutRef(modelelement: PayoutRef): boolean;
    execAfterPayoutRef(modelelement: PayoutRef): boolean;

    execBeforeText(modelelement: Text): boolean;
    execAfterText(modelelement: Text): boolean;

    execBeforeText2(modelelement: Text2): boolean;
    execAfterText2(modelelement: Text2): boolean;

    execBeforeText3(modelelement: Text3): boolean;
    execAfterText3(modelelement: Text3): boolean;

    execBeforeText4(modelelement: Text4): boolean;
    execAfterText4(modelelement: Text4): boolean;

    execBeforeGenericKind(modelelement: GenericKind): boolean;
    execAfterGenericKind(modelelement: GenericKind): boolean;

    execBeforeGenericTypeDecl(modelelement: GenericTypeDecl): boolean;
    execAfterGenericTypeDecl(modelelement: GenericTypeDecl): boolean;

    execBeforeGenericLiteral(modelelement: GenericLiteral): boolean;
    execAfterGenericLiteral(modelelement: GenericLiteral): boolean;

    execBeforeEntity(modelelement: Entity): boolean;
    execAfterEntity(modelelement: Entity): boolean;

    execBeforeEntityAttribute(modelelement: EntityAttribute): boolean;
    execAfterEntityAttribute(modelelement: EntityAttribute): boolean;

    execBeforeBaseProduct(modelelement: BaseProduct): boolean;
    execAfterBaseProduct(modelelement: BaseProduct): boolean;

    execBeforeInsurancePart(modelelement: InsurancePart): boolean;
    execAfterInsurancePart(modelelement: InsurancePart): boolean;

    execBeforeInsuranceProduct(modelelement: InsuranceProduct): boolean;
    execAfterInsuranceProduct(modelelement: InsuranceProduct): boolean;

    execBeforeCalcFunction(modelelement: CalcFunction): boolean;
    execAfterCalcFunction(modelelement: CalcFunction): boolean;

    execBeforeDescription(modelelement: Description): boolean;
    execAfterDescription(modelelement: Description): boolean;

    execBeforeParameter(modelelement: Parameter): boolean;
    execAfterParameter(modelelement: Parameter): boolean;

    execBeforeDocuType(modelelement: DocuType): boolean;
    execAfterDocuType(modelelement: DocuType): boolean;

    execBeforeInsurancePartType(modelelement: InsurancePartType): boolean;
    execAfterInsurancePartType(modelelement: InsurancePartType): boolean;

    execBeforePercentageType(modelelement: PercentageType): boolean;
    execAfterPercentageType(modelelement: PercentageType): boolean;

    execBeforeNumberType(modelelement: NumberType): boolean;
    execAfterNumberType(modelelement: NumberType): boolean;

    execBeforeBooleanType(modelelement: BooleanType): boolean;
    execAfterBooleanType(modelelement: BooleanType): boolean;

    execBeforeEuroType(modelelement: EuroType): boolean;
    execAfterEuroType(modelelement: EuroType): boolean;

    execBeforeTypeRef(modelelement: TypeRef): boolean;
    execAfterTypeRef(modelelement: TypeRef): boolean;

    execBeforeInsuranceTheme(modelelement: InsuranceTheme): boolean;
    execAfterInsuranceTheme(modelelement: InsuranceTheme): boolean;

    execBeforePremiumDays(modelelement: PremiumDays): boolean;
    execAfterPremiumDays(modelelement: PremiumDays): boolean;
}
