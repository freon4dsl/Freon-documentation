// Generated by the Freon Language Generator.
import {
    Box,
    BoxUtil,
    FreBoxProvider,
    FreProjectionHandler,
    FreNodeReference,
    LimitedDisplay,
    BoxFactory,
    BoolDisplay,
    NumberDisplay,
    ExternalSimpleBox,
    FragmentBox,
    TableUtil,
} from "@freon4dsl/core";

import { BaseProduct, InsuranceTheme } from "../../language/gen/index.js";

import { InsuranceModelEnvironment } from "../../config/gen/InsuranceModelEnvironment.js";

/**
 * This class implements the box provider for a single node of type BaseProduct.
 * The box provider is able to create the (tree of) boxes for the node, based
 * on the projections that are currently selected by the user.
 * The top of the tree of boxes is always a box of type ElementBox, which is
 * a box that will never be rendered itself, only its content will. Thus, we
 * have a stable entry in the complete box tree for every FreNode node.
 */
export class BaseProductBoxProvider extends FreBoxProvider {
    constructor(mainHandler: FreProjectionHandler) {
        super(mainHandler);
        this.knownBoxProjections = ["default", "comments", "specials", "tables"];
        this.knownTableProjections = ["default"];
        this.conceptName = "BaseProduct";
    }

    protected getContent(projectionName: string): Box {
        // console.log("GET CONTENT " + this._node?.freId() + ' ' +  this._node?.freLanguageConcept() + ' ' + projectionName);
        // see if we need to use a custom projection
        if (!this.knownBoxProjections.includes(projectionName) && !this.knownTableProjections.includes(projectionName)) {
            const BOX: Box = this.mainHandler.executeCustomProjection(this._node, projectionName);
            if (!!BOX) {
                // found one, so return it
                return BOX;
            }
        } else {
            // select the box to return based on the projectionName
            if (projectionName === "default") {
                return this.getDefault();
            } else if (projectionName === "comments") {
                return this.getComments();
            } else if (projectionName === "specials") {
                return this.getSpecials();
            } else if (projectionName === "tables") {
                return this.getTables();
            }
        }
        // in all other cases, return the default
        return this.getDefault();
    }

    private getDefault(): Box {
        return BoxFactory.verticalLayout(this._node as BaseProduct, "BaseProduct-overall", "", [
            BoxFactory.horizontalLayout(
                this._node as BaseProduct,
                "BaseProduct-hlist-line-0",
                "",
                [
                    BoxUtil.labelBox(this._node as BaseProduct, "Base Products", "top-1-line-0-item-0"),
                    BoxUtil.textBox(this._node as BaseProduct, "name"),
                    BoxUtil.labelBox(this._node as BaseProduct, "for", "top-1-line-0-item-2"),
                    BoxUtil.limitedBox(
                        this._node as BaseProduct,
                        "theme",
                        (selected: string) => {
                            (this._node as BaseProduct).theme = FreNodeReference.create<InsuranceTheme>(selected, "InsuranceTheme");
                        },
                        LimitedDisplay.SELECT,
                        InsuranceModelEnvironment.getInstance().scoper,
                    ),
                ],
                { selectable: false },
            ),
            BoxUtil.indentBox(
                this._node as BaseProduct,
                4,
                "1",
                BoxFactory.horizontalLayout(
                    this._node as BaseProduct,
                    "BaseProduct-hlist-line-1",
                    "",
                    [
                        BoxUtil.labelBox(this._node as BaseProduct, "is still under construction:", "top-1-line-1-item-0"),
                        BoxUtil.booleanBox(this._node as BaseProduct, "isUnderConstruction", { yes: "YES", no: "NO" }, BoolDisplay.SWITCH),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.indentBox(
                this._node as BaseProduct,
                4,
                "2",
                BoxFactory.horizontalLayout(
                    this._node as BaseProduct,
                    "BaseProduct-hlist-line-2",
                    "",
                    [
                        BoxUtil.labelBox(this._node as BaseProduct, "is approved level1:", "top-1-line-2-item-0"),
                        BoxUtil.booleanBox(
                            this._node as BaseProduct,
                            "isApprovedLevel1",
                            { yes: "Sure", no: "NoWay" },
                            BoolDisplay.RADIO_BUTTON,
                        ),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.indentBox(
                this._node as BaseProduct,
                4,
                "3",
                BoxFactory.horizontalLayout(
                    this._node as BaseProduct,
                    "BaseProduct-hlist-line-3",
                    "",
                    [
                        BoxUtil.labelBox(this._node as BaseProduct, "is approved level2:", "top-1-line-3-item-0"),
                        BoxUtil.booleanBox(
                            this._node as BaseProduct,
                            "isApprovedLevel2",
                            { yes: "YES", no: "NO" },
                            BoolDisplay.INNER_SWITCH,
                        ),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.indentBox(
                this._node as BaseProduct,
                4,
                "4",
                BoxFactory.horizontalLayout(
                    this._node as BaseProduct,
                    "BaseProduct-hlist-line-4",
                    "",
                    [
                        BoxUtil.labelBox(this._node as BaseProduct, "is approved level3:", "top-1-line-4-item-0"),
                        BoxUtil.booleanBox(this._node as BaseProduct, "isApprovedLevel3", { yes: "YES", no: "NO" }, BoolDisplay.CHECKBOX),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.indentBox(
                this._node as BaseProduct,
                4,
                "5",
                BoxFactory.horizontalLayout(
                    this._node as BaseProduct,
                    "BaseProduct-hlist-line-5",
                    "",
                    [
                        BoxUtil.labelBox(this._node as BaseProduct, "yields profit:", "top-1-line-5-item-0"),
                        BoxUtil.booleanBox(this._node as BaseProduct, "yieldsProfit", { yes: "Plenty", no: "Little" }, BoolDisplay.SELECT),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.indentBox(
                this._node as BaseProduct,
                4,
                "6",
                BoxFactory.horizontalLayout(
                    this._node as BaseProduct,
                    "BaseProduct-hlist-line-6",
                    "",
                    [
                        BoxUtil.labelBox(this._node as BaseProduct, "expected nr of use:", "top-1-line-6-item-0"),
                        BoxUtil.numberBox(this._node as BaseProduct, "nrOfUse", NumberDisplay.SELECT),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.indentBox(
                this._node as BaseProduct,
                4,
                "7",
                BoxFactory.horizontalLayout(
                    this._node as BaseProduct,
                    "BaseProduct-hlist-line-7",
                    "",
                    [
                        BoxUtil.labelBox(this._node as BaseProduct, "range:", "top-1-line-7-item-0"),
                        BoxUtil.numberBox(this._node as BaseProduct, "range", NumberDisplay.SLIDER),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.emptyLineBox(this._node as BaseProduct, "BaseProduct-empty-line-8"),
            BoxUtil.emptyLineBox(this._node as BaseProduct, "BaseProduct-empty-line-9"),
            BoxUtil.indentBox(
                this._node as BaseProduct,
                4,
                "10",
                BoxUtil.verticalPartListBox(this._node as BaseProduct, (this._node as BaseProduct).parts, "parts", null, this.mainHandler),
            ),
        ]);
    }

    private getComments(): Box {
        return BoxFactory.verticalLayout(this._node as BaseProduct, "BaseProduct-overall", "", [
            BoxFactory.horizontalLayout(
                this._node as BaseProduct,
                "BaseProduct-hlist-line-0",
                "",
                [
                    BoxUtil.labelBox(this._node as BaseProduct, "Base Products", "top-1-line-0-item-0"),
                    BoxUtil.textBox(this._node as BaseProduct, "name"),
                    BoxUtil.labelBox(this._node as BaseProduct, "for", "top-1-line-0-item-2"),
                    BoxUtil.limitedBox(
                        this._node as BaseProduct,
                        "theme",
                        (selected: string) => {
                            (this._node as BaseProduct).theme = FreNodeReference.create<InsuranceTheme>(selected, "InsuranceTheme");
                        },
                        LimitedDisplay.SELECT,
                        InsuranceModelEnvironment.getInstance().scoper,
                    ),
                ],
                { selectable: false },
            ),
            BoxUtil.indentBox(
                this._node as BaseProduct,
                4,
                "1",
                BoxUtil.verticalPartListBox(this._node as BaseProduct, (this._node as BaseProduct).parts, "parts", null, this.mainHandler),
            ),
        ]);
    }

    private getSpecials(): Box {
        return BoxFactory.verticalLayout(this._node as BaseProduct, "BaseProduct-overall", "", [
            BoxUtil.labelBox(
                this._node as BaseProduct,
                "/* In this projection 'self.parts' is always shown according to the projection */",
                "top-1-line-0-item-0",
            ),
            BoxUtil.labelBox(
                this._node as BaseProduct,
                "/* defined for concept InsurancePart in the editor 'comments'.                 */",
                "top-1-line-1-item-0",
            ),
            BoxFactory.horizontalLayout(
                this._node as BaseProduct,
                "BaseProduct-hlist-line-2",
                "",
                [
                    BoxUtil.labelBox(this._node as BaseProduct, "Base Product for", "top-1-line-2-item-0"),
                    BoxUtil.limitedBox(
                        this._node as BaseProduct,
                        "theme",
                        (selected: string) => {
                            (this._node as BaseProduct).theme = FreNodeReference.create<InsuranceTheme>(selected, "InsuranceTheme");
                        },
                        LimitedDisplay.RADIO_BUTTON,
                    ),
                    BoxUtil.externalStringBox(this._node as BaseProduct, "name", "SMUI_Dialog", {
                        params: [{ key: "buttonLabel", value: "Change Product Name" }],
                    }),
                ],
                { selectable: false },
            ),
            BoxUtil.indentBox(
                this._node as BaseProduct,
                4,
                "3",
                BoxFactory.horizontalLayout(
                    this._node as BaseProduct,
                    "BaseProduct-hlist-line-3",
                    "",
                    [this.getFragmentBox_First(), this.getFragmentBox_Second()],
                    { selectable: false },
                ),
            ),
            BoxUtil.indentBox(
                this._node as BaseProduct,
                4,
                "4",
                BoxUtil.externalPartListBox(
                    this._node as BaseProduct,
                    (this._node as BaseProduct).parts,
                    "parts",
                    "SMUI_Accordion",
                    this.mainHandler,
                    { params: [{ key: "multi", value: "multiple" }] },
                ),
            ),
        ]);
    }

    private getTables(): Box {
        return BoxFactory.verticalLayout(this._node as BaseProduct, "BaseProduct-overall", "", [
            BoxFactory.horizontalLayout(
                this._node as BaseProduct,
                "BaseProduct-hlist-line-0",
                "",
                [
                    BoxUtil.labelBox(this._node as BaseProduct, "Base Products", "top-1-line-0-item-0"),
                    BoxUtil.textBox(this._node as BaseProduct, "name"),
                    BoxUtil.labelBox(this._node as BaseProduct, "for", "top-1-line-0-item-2"),
                    BoxUtil.limitedBox(
                        this._node as BaseProduct,
                        "theme",
                        (selected: string) => {
                            (this._node as BaseProduct).theme = FreNodeReference.create<InsuranceTheme>(selected, "InsuranceTheme");
                        },
                        LimitedDisplay.SELECT,
                        InsuranceModelEnvironment.getInstance().scoper,
                    ),
                ],
                { selectable: false },
            ),
            BoxUtil.indentBox(
                this._node as BaseProduct,
                4,
                "1",
                TableUtil.tableBoxRowOriented(this._node as BaseProduct, (this._node as BaseProduct).parts, "parts", this.mainHandler),
            ),
        ]);
    }

    private getFragmentBox_First(): FragmentBox {
        return new FragmentBox(
            this._node as BaseProduct,
            "BaseProduct-fragment-First",
            BoxFactory.verticalLayout(this._node as BaseProduct, "BaseProduct-fragment-First-overall", "", [
                BoxUtil.labelBox(this._node as BaseProduct, "First Card", "top-1-line-0-item-0"),
                BoxUtil.indentBox(
                    this._node as BaseProduct,
                    4,
                    "1",
                    BoxFactory.horizontalLayout(
                        this._node as BaseProduct,
                        "BaseProduct-fragment-First-hlist-line-1",
                        "",
                        [
                            BoxUtil.labelBox(this._node as BaseProduct, "is still under construction:", "top-1-line-1-item-0"),
                            BoxUtil.booleanBox(
                                this._node as BaseProduct,
                                "isUnderConstruction",
                                { yes: "YES", no: "NO" },
                                BoolDisplay.SWITCH,
                            ),
                        ],
                        { selectable: false },
                    ),
                ),
                BoxUtil.indentBox(
                    this._node as BaseProduct,
                    4,
                    "2",
                    BoxFactory.horizontalLayout(
                        this._node as BaseProduct,
                        "BaseProduct-fragment-First-hlist-line-2",
                        "",
                        [
                            BoxUtil.labelBox(this._node as BaseProduct, "is approved level1:", "top-1-line-2-item-0"),
                            BoxUtil.booleanBox(
                                this._node as BaseProduct,
                                "isApprovedLevel1",
                                { yes: "YES", no: "NO" },
                                BoolDisplay.RADIO_BUTTON,
                            ),
                        ],
                        { selectable: false },
                    ),
                ),
                BoxUtil.indentBox(
                    this._node as BaseProduct,
                    4,
                    "3",
                    BoxFactory.horizontalLayout(
                        this._node as BaseProduct,
                        "BaseProduct-fragment-First-hlist-line-3",
                        "",
                        [
                            BoxUtil.labelBox(this._node as BaseProduct, "is approved level2:", "top-1-line-3-item-0"),
                            BoxUtil.booleanBox(
                                this._node as BaseProduct,
                                "isApprovedLevel2",
                                { yes: "YES", no: "NO" },
                                BoolDisplay.INNER_SWITCH,
                            ),
                        ],
                        { selectable: false },
                    ),
                ),
                BoxUtil.indentBox(
                    this._node as BaseProduct,
                    4,
                    "4",
                    BoxFactory.horizontalLayout(
                        this._node as BaseProduct,
                        "BaseProduct-fragment-First-hlist-line-4",
                        "",
                        [
                            BoxUtil.labelBox(this._node as BaseProduct, "is approved level3:", "top-1-line-4-item-0"),
                            BoxUtil.booleanBox(
                                this._node as BaseProduct,
                                "isApprovedLevel3",
                                { yes: "YES", no: "NO" },
                                BoolDisplay.CHECKBOX,
                            ),
                        ],
                        { selectable: false },
                    ),
                ),
                BoxUtil.indentBox(
                    this._node as BaseProduct,
                    4,
                    "5",
                    new ExternalSimpleBox(
                        "AnimatedGif",
                        this._node as BaseProduct,
                        "BaseProduct-fragment-First-simple-external-AnimatedGif",
                        { params: [{ key: "number", value: "1" }] },
                    ),
                ),
            ]),
        );
    }

    private getFragmentBox_Second(): FragmentBox {
        return new FragmentBox(
            this._node as BaseProduct,
            "BaseProduct-fragment-Second",
            BoxFactory.verticalLayout(this._node as BaseProduct, "BaseProduct-fragment-Second-overall", "", [
                BoxUtil.labelBox(this._node as BaseProduct, "Second Card", "top-1-line-0-item-0"),
                BoxUtil.indentBox(
                    this._node as BaseProduct,
                    4,
                    "1",
                    BoxUtil.buttonBox(this._node as BaseProduct, "Don't push me!", "MyButton-role"),
                ),
                BoxUtil.indentBox(
                    this._node as BaseProduct,
                    4,
                    "2",
                    BoxFactory.horizontalLayout(
                        this._node as BaseProduct,
                        "BaseProduct-fragment-Second-hlist-line-2",
                        "",
                        [
                            BoxUtil.labelBox(this._node as BaseProduct, "yields profit:", "top-1-line-2-item-0"),
                            BoxUtil.booleanBox(
                                this._node as BaseProduct,
                                "yieldsProfit",
                                { yes: "YES", no: "NO" },
                                BoolDisplay.INNER_SWITCH,
                            ),
                        ],
                        { selectable: false },
                    ),
                ),
                BoxUtil.indentBox(
                    this._node as BaseProduct,
                    4,
                    "3",
                    BoxFactory.horizontalLayout(
                        this._node as BaseProduct,
                        "BaseProduct-fragment-Second-hlist-line-3",
                        "",
                        [
                            BoxUtil.labelBox(this._node as BaseProduct, "expected nr of use:", "top-1-line-3-item-0"),
                            BoxUtil.numberBox(this._node as BaseProduct, "nrOfUse", NumberDisplay.SLIDER),
                        ],
                        { selectable: false },
                    ),
                ),
                BoxUtil.indentBox(
                    this._node as BaseProduct,
                    4,
                    "4",
                    BoxFactory.horizontalLayout(
                        this._node as BaseProduct,
                        "BaseProduct-fragment-Second-hlist-line-4",
                        "",
                        [
                            BoxUtil.labelBox(this._node as BaseProduct, "range:", "top-1-line-4-item-0"),
                            BoxUtil.numberBox(this._node as BaseProduct, "range", NumberDisplay.SELECT),
                        ],
                        { selectable: false },
                    ),
                ),
                BoxUtil.indentBox(
                    this._node as BaseProduct,
                    4,
                    "5",
                    BoxFactory.horizontalLayout(
                        this._node as BaseProduct,
                        "BaseProduct-fragment-Second-hlist-line-5",
                        "",
                        [
                            BoxUtil.labelBox(this._node as BaseProduct, "date:", "top-1-line-5-item-0"),
                            BoxUtil.externalStringBox(this._node as BaseProduct, "date", "DatePicker", {
                                params: [{ key: "startDate", value: "24/02/2024" }],
                            }),
                        ],
                        { selectable: false },
                    ),
                ),
            ]),
        );
    }
}
