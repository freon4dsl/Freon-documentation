// Generated by the Freon Language Generator.
import { Box, BoxUtil, FreBoxProvider, FreProjectionHandler, BoxFactory, FreNodeReference, LimitedDisplay } from "@freon4dsl/core";

import { InsuranceProduct, InsuranceTheme, PremiumDays } from "../../language/gen/index.js";

import { InsuranceModelEnvironment } from "../../config/gen/InsuranceModelEnvironment.js";

/**
 * This class implements the box provider for a single node of type InsuranceProduct.
 * The box provider is able to create the (tree of) boxes for the node, based
 * on the projections that are currently selected by the user.
 * The top of the tree of boxes is always a box of type ElementBox, which is
 * a box that will never be rendered itself, only its content will. Thus, we
 * have a stable entry in the complete box tree for every FreNode node.
 */
export class InsuranceProductBoxProvider extends FreBoxProvider {
    constructor(mainHandler: FreProjectionHandler) {
        super(mainHandler);
        this.knownBoxProjections = ["default", "comments"];
        this.knownTableProjections = ["default"];
        this.conceptName = "InsuranceProduct";
    }

    protected getContent(projectionName: string): Box {
        // console.log("GET CONTENT " + this._node?.freId() + ' ' +  this._node?.freLanguageConcept() + ' ' + projectionName);
        // see if we need to use a custom projection
        if (!this.knownBoxProjections.includes(projectionName) && !this.knownTableProjections.includes(projectionName)) {
            const BOX: Box = this.mainHandler.executeCustomProjection(this._node, projectionName);
            if (!!BOX) {
                // found one, so return it
                return BOX;
            }
        } else {
            // select the box to return based on the projectionName
            if (projectionName === "default") {
                return this.getDefault();
            } else if (projectionName === "comments") {
                return this.getComments();
            }
        }
        // in all other cases, return the default
        return this.getDefault();
    }

    private getDefault(): Box {
        return BoxFactory.verticalLayout(this._node as InsuranceProduct, "InsuranceProduct-overall", "", [
            BoxFactory.horizontalLayout(
                this._node as InsuranceProduct,
                "InsuranceProduct-hlist-line-0",
                "",
                [
                    BoxUtil.labelBox(this._node as InsuranceProduct, "Insurance Product", "top-1-line-0-item-0"),
                    BoxUtil.textBox(this._node as InsuranceProduct, "name"),
                    BoxUtil.labelBox(this._node as InsuranceProduct, "( public name:", "top-1-line-0-item-2"),
                    BoxUtil.textBox(this._node as InsuranceProduct, "productName"),
                    BoxUtil.labelBox(this._node as InsuranceProduct, ") USES", "top-1-line-0-item-4"),
                    BoxUtil.horizontalReferenceListBox(
                        this._node as InsuranceProduct,
                        "basedOn",
                        InsuranceModelEnvironment.getInstance().scoper,
                        false,
                        { text: ",", type: "Separator" },
                    ),
                ],
                { selectable: false },
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                4,
                "1",
                BoxFactory.horizontalLayout(
                    this._node as InsuranceProduct,
                    "InsuranceProduct-hlist-line-1",
                    "",
                    [
                        BoxUtil.labelBox(this._node as InsuranceProduct, "Themes:", "top-1-line-1-item-0"),
                        BoxUtil.limitedListBox(
                            this._node as InsuranceProduct,
                            "themes",
                            (selected: string[]) => {
                                for (let i: number = 0; i < (this._node as InsuranceProduct).themes.length; i++) {
                                    if (!selected.includes((this._node as InsuranceProduct).themes[i].name)) {
                                        (this._node as InsuranceProduct).themes.splice(i, 1);
                                    }
                                }
                                const existingNames: string[] = (this._node as InsuranceProduct).themes.map((n) => n.name);
                                for (let i: number = 0; i < selected.length; i++) {
                                    if (!existingNames.includes(selected[i])) {
                                        (this._node as InsuranceProduct).themes.push(
                                            FreNodeReference.create<InsuranceTheme>(selected, "InsuranceTheme"),
                                        );
                                    }
                                }
                            },
                            LimitedDisplay.CHECKBOX,
                        ),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                4,
                "2",
                BoxFactory.horizontalLayout(
                    this._node as InsuranceProduct,
                    "InsuranceProduct-hlist-line-2",
                    "",
                    [
                        BoxUtil.labelBox(this._node as InsuranceProduct, "Premium:", "top-1-line-2-item-0"),
                        BoxUtil.getBoxOrAction(this._node as InsuranceProduct, "advertisedPremium", "EuroLiteral", this.mainHandler),
                        BoxUtil.labelBox(this._node as InsuranceProduct, "per", "top-1-line-2-item-2"),
                        BoxUtil.limitedBox(
                            this._node as InsuranceProduct,
                            "nrPremiumDays",
                            (selected: string) => {
                                (this._node as InsuranceProduct).nrPremiumDays = FreNodeReference.create<PremiumDays>(
                                    selected,
                                    "PremiumDays",
                                );
                            },
                            LimitedDisplay.SELECT,
                            InsuranceModelEnvironment.getInstance().scoper,
                        ),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                4,
                "3",
                BoxUtil.labelBox(this._node as InsuranceProduct, "Insured risks:", "top-1-line-3-item-0"),
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                8,
                "4",
                BoxUtil.verticalReferenceListBox(
                    this._node as InsuranceProduct,
                    "parts",
                    InsuranceModelEnvironment.getInstance().scoper,
                    false,
                    { text: ";", type: "Terminator" },
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                4,
                "5",
                BoxUtil.labelBox(this._node as InsuranceProduct, "Calculation", "top-1-line-5-item-0"),
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                8,
                "6",
                BoxFactory.optional2(
                    this._node as InsuranceProduct,
                    "optional-riskAdjustment",
                    () => !!(this._node as InsuranceProduct).riskAdjustment,
                    BoxFactory.horizontalLayout(
                        this._node as InsuranceProduct,
                        "InsuranceProduct-optional-riskAdjustment-hlist-line-0",
                        "",
                        [
                            BoxUtil.labelBox(this._node as InsuranceProduct, "Risk adjusted by =", "top-2-line-0-item-0"),
                            BoxUtil.getBoxOrAction(this._node as InsuranceProduct, "riskAdjustment", "PercentageLiteral", this.mainHandler),
                        ],
                        { selectable: false },
                    ),
                    false,
                    BoxFactory.action(this._node, "optional-riskAdjustment", "Risk adjusted by ="),
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                8,
                "7",
                BoxFactory.horizontalLayout(
                    this._node as InsuranceProduct,
                    "InsuranceProduct-hlist-line-7",
                    "",
                    [
                        BoxUtil.labelBox(this._node as InsuranceProduct, "calculated premium:", "top-1-line-7-item-0"),
                        BoxUtil.getBoxOrAction(this._node as InsuranceProduct, "calculation", "DocuExpression", this.mainHandler),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                4,
                "8",
                BoxFactory.optional2(
                    this._node as InsuranceProduct,
                    "optional-helpers",
                    () => !!(this._node as InsuranceProduct).helpers && (this._node as InsuranceProduct).helpers.length !== 0,
                    BoxFactory.horizontalLayout(
                        this._node as InsuranceProduct,
                        "InsuranceProduct-optional-helpers-hlist-line-0",
                        "",
                        [
                            BoxUtil.labelBox(this._node as InsuranceProduct, "Helper functions:", "top-2-line-0-item-0"),
                            ,
                            BoxUtil.verticalPartListBox(
                                this._node as InsuranceProduct,
                                (this._node as InsuranceProduct).helpers,
                                "helpers",
                                null,
                                this.mainHandler,
                            ),
                        ],
                        { selectable: false },
                    ),
                    false,
                    BoxFactory.action(this._node, "optional-helpers", "Helper functions:"),
                ),
            ),
        ]);
    }

    private getComments(): Box {
        return BoxFactory.verticalLayout(this._node as InsuranceProduct, "InsuranceProduct-overall", "", [
            BoxFactory.horizontalLayout(
                this._node as InsuranceProduct,
                "InsuranceProduct-hlist-line-0",
                "",
                [
                    BoxUtil.labelBox(this._node as InsuranceProduct, "Insurance Product", "top-1-line-0-item-0"),
                    BoxUtil.textBox(this._node as InsuranceProduct, "name"),
                    BoxUtil.labelBox(this._node as InsuranceProduct, "( public name:", "top-1-line-0-item-2"),
                    BoxUtil.textBox(this._node as InsuranceProduct, "productName"),
                    BoxUtil.labelBox(this._node as InsuranceProduct, ") USES", "top-1-line-0-item-4"),
                    BoxUtil.horizontalReferenceListBox(
                        this._node as InsuranceProduct,
                        "basedOn",
                        InsuranceModelEnvironment.getInstance().scoper,
                        false,
                        { text: ",", type: "Separator" },
                    ),
                ],
                { selectable: false },
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                8,
                "1",
                BoxUtil.labelBox(
                    this._node as InsuranceProduct,
                    "/* An insurance product defines a combination of to be insured events that are packaged as a sellable product. */",
                    "top-1-line-1-item-0",
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                4,
                "2",
                BoxFactory.horizontalLayout(
                    this._node as InsuranceProduct,
                    "InsuranceProduct-hlist-line-2",
                    "",
                    [
                        BoxUtil.labelBox(this._node as InsuranceProduct, "Themes:", "top-1-line-2-item-0"),
                        BoxUtil.limitedListBox(
                            this._node as InsuranceProduct,
                            "themes",
                            (selected: string[]) => {
                                for (let i: number = 0; i < (this._node as InsuranceProduct).themes.length; i++) {
                                    if (!selected.includes((this._node as InsuranceProduct).themes[i].name)) {
                                        (this._node as InsuranceProduct).themes.splice(i, 1);
                                    }
                                }
                                const existingNames: string[] = (this._node as InsuranceProduct).themes.map((n) => n.name);
                                for (let i: number = 0; i < selected.length; i++) {
                                    if (!existingNames.includes(selected[i])) {
                                        (this._node as InsuranceProduct).themes.push(
                                            FreNodeReference.create<InsuranceTheme>(selected, "InsuranceTheme"),
                                        );
                                    }
                                }
                            },
                            LimitedDisplay.CHECKBOX,
                        ),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                8,
                "3",
                BoxUtil.labelBox(
                    this._node as InsuranceProduct,
                    "/* Themes gives a list of types of insurance parts that are packaged in this product. */",
                    "top-1-line-3-item-0",
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                4,
                "4",
                BoxFactory.horizontalLayout(
                    this._node as InsuranceProduct,
                    "InsuranceProduct-hlist-line-4",
                    "",
                    [
                        BoxUtil.labelBox(this._node as InsuranceProduct, "Premium:", "top-1-line-4-item-0"),
                        BoxUtil.getBoxOrAction(this._node as InsuranceProduct, "advertisedPremium", "EuroLiteral", this.mainHandler),
                        BoxUtil.labelBox(this._node as InsuranceProduct, "per", "top-1-line-4-item-2"),
                        BoxUtil.limitedBox(
                            this._node as InsuranceProduct,
                            "nrPremiumDays",
                            (selected: string) => {
                                (this._node as InsuranceProduct).nrPremiumDays = FreNodeReference.create<PremiumDays>(
                                    selected,
                                    "PremiumDays",
                                );
                            },
                            LimitedDisplay.SELECT,
                            InsuranceModelEnvironment.getInstance().scoper,
                        ),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                8,
                "5",
                BoxUtil.labelBox(
                    this._node as InsuranceProduct,
                    "/* Premium is the income by selling this product per part of the year. */",
                    "top-1-line-5-item-0",
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                4,
                "6",
                BoxUtil.labelBox(
                    this._node as InsuranceProduct,
                    "Insured risks: /* The packaged insured events. */",
                    "top-1-line-6-item-0",
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                8,
                "7",
                BoxUtil.verticalReferenceListBox(
                    this._node as InsuranceProduct,
                    "parts",
                    InsuranceModelEnvironment.getInstance().scoper,
                    false,
                    { text: ";", type: "Terminator" },
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                4,
                "8",
                BoxUtil.labelBox(this._node as InsuranceProduct, "Calculation", "top-1-line-8-item-0"),
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                8,
                "9",
                BoxFactory.optional2(
                    this._node as InsuranceProduct,
                    "optional-riskAdjustment",
                    () => !!(this._node as InsuranceProduct).riskAdjustment,
                    BoxFactory.horizontalLayout(
                        this._node as InsuranceProduct,
                        "InsuranceProduct-optional-riskAdjustment-hlist-line-0",
                        "",
                        [
                            BoxUtil.labelBox(this._node as InsuranceProduct, "Risk adjusted by =", "top-2-line-0-item-0"),
                            BoxUtil.getBoxOrAction(this._node as InsuranceProduct, "riskAdjustment", "PercentageLiteral", this.mainHandler),
                            ,
                            BoxUtil.labelBox(
                                this._node as InsuranceProduct,
                                "/* Risk adjustment is used to change the calculation, because the",
                                "top-2-line-0-item-3",
                            ),
                            ,
                            BoxUtil.labelBox(
                                this._node as InsuranceProduct,
                                "packaging changes the individual risks of the insurance parts. */",
                                "top-2-line-0-item-5",
                            ),
                        ],
                        { selectable: false },
                    ),
                    false,
                    BoxFactory.action(this._node, "optional-riskAdjustment", "Risk adjusted by ="),
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                8,
                "10",
                BoxFactory.horizontalLayout(
                    this._node as InsuranceProduct,
                    "InsuranceProduct-hlist-line-10",
                    "",
                    [
                        BoxUtil.labelBox(this._node as InsuranceProduct, "calculated premium:", "top-1-line-10-item-0"),
                        BoxUtil.getBoxOrAction(this._node as InsuranceProduct, "calculation", "DocuExpression", this.mainHandler),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                12,
                "11",
                BoxUtil.labelBox(
                    this._node as InsuranceProduct,
                    "/* Calculation is an estimate of the cost of this product per year. */",
                    "top-1-line-11-item-0",
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsuranceProduct,
                4,
                "12",
                BoxFactory.optional2(
                    this._node as InsuranceProduct,
                    "optional-helpers",
                    () => !!(this._node as InsuranceProduct).helpers && (this._node as InsuranceProduct).helpers.length !== 0,
                    BoxFactory.horizontalLayout(
                        this._node as InsuranceProduct,
                        "InsuranceProduct-optional-helpers-hlist-line-0",
                        "",
                        [
                            BoxUtil.labelBox(
                                this._node as InsuranceProduct,
                                "Helper functions: /* Functions that can be used within the premium calculation. */",
                                "top-2-line-0-item-0",
                            ),
                            ,
                            BoxUtil.verticalPartListBox(
                                this._node as InsuranceProduct,
                                (this._node as InsuranceProduct).helpers,
                                "helpers",
                                null,
                                this.mainHandler,
                            ),
                        ],
                        { selectable: false },
                    ),
                    false,
                    BoxFactory.action(
                        this._node,
                        "optional-helpers",
                        "Helper functions: /* Functions that can be used within the premium calculation. */",
                    ),
                ),
            ),
        ]);
    }
}
