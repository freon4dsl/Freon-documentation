// Generated by the Freon Language Generator.
import { Box, BoxUtil, FreBoxProvider, FreProjectionHandler, BoolDisplay, TableRowBox, TableUtil, BoxFactory } from "@freon4dsl/core";

import { InsurancePart } from "../../language/gen/index.js";

/**
 * This class implements the box provider for a single node of type InsurancePart.
 * The box provider is able to create the (tree of) boxes for the node, based
 * on the projections that are currently selected by the user.
 * The top of the tree of boxes is always a box of type ElementBox, which is
 * a box that will never be rendered itself, only its content will. Thus, we
 * have a stable entry in the complete box tree for every FreNode node.
 */
export class InsurancePartBoxProvider extends FreBoxProvider {
    constructor(mainHandler: FreProjectionHandler) {
        super(mainHandler);
        this.knownBoxProjections = ["default", "comments"];
        this.knownTableProjections = ["tableRowFor_tables"];
        this.conceptName = "InsurancePart";
    }

    protected getContent(projectionName: string): Box {
        // console.log("GET CONTENT " + this._node?.freId() + ' ' +  this._node?.freLanguageConcept() + ' ' + projectionName);
        // see if we need to use a custom projection
        if (!this.knownBoxProjections.includes(projectionName) && !this.knownTableProjections.includes(projectionName)) {
            const BOX: Box = this.mainHandler.executeCustomProjection(this._node, projectionName);
            if (!!BOX) {
                // found one, so return it
                return BOX;
            }
        } else {
            // select the box to return based on the projectionName
            if (projectionName === "default") {
                return this.getDefault();
            } else if (projectionName === "comments") {
                return this.getComments();
            } else if (projectionName === "tableRowFor_tables") {
                return this.getTableRowFor_tables();
            }
        }
        // in all other cases, return the default
        return this.getDefault();
    }

    private getTableRowFor_tables(): TableRowBox {
        const cells: Box[] = [];
        cells.push(BoxUtil.textBox(this._node as InsurancePart, "name"));
        cells.push(BoxUtil.getBoxOrAction(this._node as InsurancePart, "statisticalRisk", "PercentageLiteral", this.mainHandler));
        cells.push(BoxUtil.getBoxOrAction(this._node as InsurancePart, "maximumPayOut", "EuroLiteral", this.mainHandler));
        cells.push(BoxUtil.booleanBox(this._node as InsurancePart, "isApproved", { yes: "YES", no: "NO" }, BoolDisplay.INNER_SWITCH));
        cells.push(BoxUtil.buttonBox(this._node as InsurancePart, "", "MyTableButton-role"));
        return TableUtil.rowBox(
            this._node,
            this._node.freOwnerDescriptor().propertyName,
            "InsurancePart",
            cells,
            this._node.freOwnerDescriptor().propertyIndex,
            true,
        );
    }

    private getDefault(): Box {
        return BoxFactory.verticalLayout(this._node as InsurancePart, "InsurancePart-overall", "", [
            BoxFactory.horizontalLayout(
                this._node as InsurancePart,
                "InsurancePart-hlist-line-0",
                "",
                [
                    BoxUtil.labelBox(this._node as InsurancePart, "Insurance Part", "top-1-line-0-item-0"),
                    BoxUtil.textBox(this._node as InsurancePart, "name"),
                ],
                { selectable: false },
            ),
            BoxUtil.indentBox(
                this._node as InsurancePart,
                4,
                "1",
                BoxFactory.horizontalLayout(
                    this._node as InsurancePart,
                    "InsurancePart-hlist-line-1",
                    "",
                    [
                        BoxUtil.labelBox(this._node as InsurancePart, "risk assessment:", "top-1-line-1-item-0"),
                        BoxUtil.getBoxOrAction(this._node as InsurancePart, "statisticalRisk", "PercentageLiteral", this.mainHandler),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsurancePart,
                4,
                "2",
                BoxFactory.horizontalLayout(
                    this._node as InsurancePart,
                    "InsurancePart-hlist-line-2",
                    "",
                    [
                        BoxUtil.labelBox(this._node as InsurancePart, "maximum payout:", "top-1-line-2-item-0"),
                        BoxUtil.getBoxOrAction(this._node as InsurancePart, "maximumPayOut", "EuroLiteral", this.mainHandler),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsurancePart,
                4,
                "3",
                BoxFactory.horizontalLayout(
                    this._node as InsurancePart,
                    "InsurancePart-hlist-line-3",
                    "",
                    [
                        BoxUtil.labelBox(this._node as InsurancePart, "is approved:", "top-1-line-3-item-0"),
                        BoxUtil.booleanBox(this._node as InsurancePart, "isApproved", { yes: "JA", no: "NEE" }, BoolDisplay.INNER_SWITCH),
                    ],
                    { selectable: false },
                ),
            ),
        ]);
    }

    private getComments(): Box {
        return BoxFactory.verticalLayout(this._node as InsurancePart, "InsurancePart-overall", "", [
            BoxFactory.horizontalLayout(
                this._node as InsurancePart,
                "InsurancePart-hlist-line-0",
                "",
                [
                    BoxUtil.labelBox(this._node as InsurancePart, "Insurance Part", "top-1-line-0-item-0"),
                    BoxUtil.textBox(this._node as InsurancePart, "name"),
                ],
                { selectable: false },
            ),
            BoxUtil.indentBox(
                this._node as InsurancePart,
                8,
                "1",
                BoxUtil.labelBox(
                    this._node as InsurancePart,
                    "/* An insurance part holds details about a to be insured event. */",
                    "top-1-line-1-item-0",
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsurancePart,
                4,
                "2",
                BoxFactory.horizontalLayout(
                    this._node as InsurancePart,
                    "InsurancePart-hlist-line-2",
                    "",
                    [
                        BoxUtil.labelBox(this._node as InsurancePart, "risk assessment:", "top-1-line-2-item-0"),
                        BoxUtil.getBoxOrAction(this._node as InsurancePart, "statisticalRisk", "PercentageLiteral", this.mainHandler),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsurancePart,
                8,
                "3",
                BoxUtil.labelBox(
                    this._node as InsurancePart,
                    "/* The risk assessment is the statistical risk that the event will happen. */",
                    "top-1-line-3-item-0",
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsurancePart,
                4,
                "4",
                BoxFactory.horizontalLayout(
                    this._node as InsurancePart,
                    "InsurancePart-hlist-line-4",
                    "",
                    [
                        BoxUtil.labelBox(this._node as InsurancePart, "maximum payout:", "top-1-line-4-item-0"),
                        BoxUtil.getBoxOrAction(this._node as InsurancePart, "maximumPayOut", "EuroLiteral", this.mainHandler),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsurancePart,
                8,
                "5",
                BoxUtil.labelBox(
                    this._node as InsurancePart,
                    "/* The maximum payout is the maximum amount to be paid in case the insured event happens. */",
                    "top-1-line-5-item-0",
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsurancePart,
                4,
                "6",
                BoxFactory.horizontalLayout(
                    this._node as InsurancePart,
                    "InsurancePart-hlist-line-6",
                    "",
                    [
                        BoxUtil.labelBox(this._node as InsurancePart, "is approved:", "top-1-line-6-item-0"),
                        BoxUtil.booleanBox(this._node as InsurancePart, "isApproved", { yes: "YES", no: "NO" }, BoolDisplay.INNER_SWITCH),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.indentBox(
                this._node as InsurancePart,
                8,
                "7",
                BoxUtil.labelBox(
                    this._node as InsurancePart,
                    "/* 'is approved' indicates whether this insurance part is in development, or in use. */",
                    "top-1-line-7-item-0",
                ),
            ),
        ]);
    }
}
