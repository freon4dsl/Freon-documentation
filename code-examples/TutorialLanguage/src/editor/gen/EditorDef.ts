// Generated by the Freon Language Generator.
import { FreLanguage, FreProjectionHandler, FreBoxProvider, BoxUtil, FreTableHeaderInfo } from "@freon4dsl/core";
import { freonConfiguration } from "../../config/FreonConfiguration.js";
import {
    Entity,
    AbsExpression,
    MultiplyExpression,
    EntityFunction,
    AttributeWithLimitedType,
    Text,
    Text2,
    Text3,
    Text4,
    AttributeWithEntityType,
    Variable,
    AttributeRef,
    VariableRef,
    StringLiteralExpression,
    NumberLiteralExpression,
    BooleanLiteralExpression,
    PlusExpression,
    DivideExpression,
    AndExpression,
    OrExpression,
    LessThenExpression,
    GreaterThenExpression,
    EqualsExpression,
    FunctionCallExpression,
    IfExpression,
} from "../../language/gen/index.js";
import {
    EntityBoxProvider,
    AbsExpressionBoxProvider,
    MultiplyExpressionBoxProvider,
    EntityFunctionBoxProvider,
    AttributeWithLimitedTypeBoxProvider,
    TextBoxProvider,
    Text2BoxProvider,
    Text3BoxProvider,
    Text4BoxProvider,
    AttributeWithEntityTypeBoxProvider,
    VariableBoxProvider,
    AttributeRefBoxProvider,
    VariableRefBoxProvider,
    StringLiteralExpressionBoxProvider,
    NumberLiteralExpressionBoxProvider,
    BooleanLiteralExpressionBoxProvider,
    PlusExpressionBoxProvider,
    DivideExpressionBoxProvider,
    AndExpressionBoxProvider,
    OrExpressionBoxProvider,
    LessThenExpressionBoxProvider,
    GreaterThenExpressionBoxProvider,
    EqualsExpressionBoxProvider,
    FunctionCallExpressionBoxProvider,
    IfExpressionBoxProvider,
    SomeOtherModelUnitBoxProvider,
    EntityModelUnitBoxProvider,
} from "../../editor/gen/index.js";

const map = new Map([
    // the main map
    [
        // Concept has special projection for (one of) its parts
        "Entity",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "StartEditor",
                new Map([
                    ["isCompany", ""], // special projection
                    ["name", ""], // special projection
                    ["baseEntity", ""], // special projection
                    ["attributes", ""], // special projection
                    ["functions", "__TABLE__"], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["isCompany", ""], // special projection
                    ["baseInterface_attr", ""], // special projection
                    ["simpleprop", ""], // special projection
                    ["attributes", ""], // special projection
                    ["entAttributes", ""], // special projection
                    ["functions", ""], // special projection
                    ["int_attrs", ""], // special projection
                    ["int_functions", ""], // special projection
                    ["baseEntity", ""], // special projection
                    ["baseInterface", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "AbsExpression",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["expr", ""], // special projection
                    ["appliedfeature", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "EntityFunction",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["aliases", ""], // special projection
                    ["expression", ""], // special projection
                    ["parameters", ""], // special projection
                    ["declaredType", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "tableRowFor_StartEditor",
                new Map([
                    ["name", ""], // special projection
                    ["parameters", "__TABLE__"], // special projection
                    ["declaredType", ""], // special projection
                    ["expression", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "AttributeWithLimitedType",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "StartEditor",
                new Map([
                    ["name", ""], // special projection
                    ["declaredType", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["declaredType", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "AttributeWithEntityType",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["declaredType", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Variable",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["declaredType", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "AttributeRef",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["appliedfeature", ""], // special projection
                    ["attribute", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "VariableRef",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["appliedfeature", ""], // special projection
                    ["variable", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "StringLiteralExpression",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "StartEditor",
                new Map([
                    ["value", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["value", ""], // special projection
                    ["appliedfeature", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "NumberLiteralExpression",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "StartEditor",
                new Map([
                    ["value", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["value", ""], // special projection
                    ["appliedfeature", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "BooleanLiteralExpression",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["value", ""], // special projection
                    ["appliedfeature", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "FunctionCallExpression",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "StartEditor",
                new Map([
                    ["functionDefinition", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["appliedfeature", ""], // special projection
                    ["functionDefinition", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "IfExpression",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "StartEditor",
                new Map([
                    ["condition", ""], // special projection
                    ["whenTrue", ""], // special projection
                    ["whenFalse", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "specials",
                new Map([
                    ["condition", ""], // special projection
                    ["whenTrue", ""], // special projection
                    ["whenFalse", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["condition", ""], // special projection
                    ["whenTrue", ""], // special projection
                    ["whenFalse", ""], // special projection
                    ["appliedfeature", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Type",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["simpleprop", ""], // special projection
                    ["baseInterface_attr", ""], // special projection
                    ["int_attrs", ""], // special projection
                    ["int_functions", ""], // special projection
                    ["baseInterface", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "SomeOtherModelUnit",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["somePart", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "EntityModelUnit",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "StartEditor",
                new Map([
                    ["name", ""], // special projection
                    ["entities", ""], // special projection
                    ["functions", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["functions", ""], // special projection
                    ["entities", ""], // special projection
                ]),
            ],
        ]),
    ],
]);

/**
 * Adds all known projection groups to the root projection.
 * @param handler
 */
export function initializeProjections(handler: FreProjectionHandler) {
    handler.addProjection("Brackets");
    handler.addProjection("StartEditor");
    handler.addProjection("specials");
    for (const p of freonConfiguration.customProjection) {
        handler.addCustomProjection(p);
    }
    handler.initConceptToPropertyProjection(map);
    handler.initProviderConstructors(
        new Map<string, () => FreBoxProvider>([
            [
                "Entity",
                () => {
                    return new EntityBoxProvider(handler);
                },
            ],
            [
                "AbsExpression",
                () => {
                    return new AbsExpressionBoxProvider(handler);
                },
            ],
            [
                "MultiplyExpression",
                () => {
                    return new MultiplyExpressionBoxProvider(handler);
                },
            ],
            [
                "EntityFunction",
                () => {
                    return new EntityFunctionBoxProvider(handler);
                },
            ],
            [
                "AttributeWithLimitedType",
                () => {
                    return new AttributeWithLimitedTypeBoxProvider(handler);
                },
            ],
            [
                "Text",
                () => {
                    return new TextBoxProvider(handler);
                },
            ],
            [
                "Text2",
                () => {
                    return new Text2BoxProvider(handler);
                },
            ],
            [
                "Text3",
                () => {
                    return new Text3BoxProvider(handler);
                },
            ],
            [
                "Text4",
                () => {
                    return new Text4BoxProvider(handler);
                },
            ],
            [
                "AttributeWithEntityType",
                () => {
                    return new AttributeWithEntityTypeBoxProvider(handler);
                },
            ],
            [
                "Variable",
                () => {
                    return new VariableBoxProvider(handler);
                },
            ],
            [
                "AttributeRef",
                () => {
                    return new AttributeRefBoxProvider(handler);
                },
            ],
            [
                "VariableRef",
                () => {
                    return new VariableRefBoxProvider(handler);
                },
            ],
            [
                "StringLiteralExpression",
                () => {
                    return new StringLiteralExpressionBoxProvider(handler);
                },
            ],
            [
                "NumberLiteralExpression",
                () => {
                    return new NumberLiteralExpressionBoxProvider(handler);
                },
            ],
            [
                "BooleanLiteralExpression",
                () => {
                    return new BooleanLiteralExpressionBoxProvider(handler);
                },
            ],
            [
                "PlusExpression",
                () => {
                    return new PlusExpressionBoxProvider(handler);
                },
            ],
            [
                "DivideExpression",
                () => {
                    return new DivideExpressionBoxProvider(handler);
                },
            ],
            [
                "AndExpression",
                () => {
                    return new AndExpressionBoxProvider(handler);
                },
            ],
            [
                "OrExpression",
                () => {
                    return new OrExpressionBoxProvider(handler);
                },
            ],
            [
                "LessThenExpression",
                () => {
                    return new LessThenExpressionBoxProvider(handler);
                },
            ],
            [
                "GreaterThenExpression",
                () => {
                    return new GreaterThenExpressionBoxProvider(handler);
                },
            ],
            [
                "EqualsExpression",
                () => {
                    return new EqualsExpressionBoxProvider(handler);
                },
            ],
            [
                "FunctionCallExpression",
                () => {
                    return new FunctionCallExpressionBoxProvider(handler);
                },
            ],
            [
                "IfExpression",
                () => {
                    return new IfExpressionBoxProvider(handler);
                },
            ],
            [
                "SomeOtherModelUnit",
                () => {
                    return new SomeOtherModelUnitBoxProvider(handler);
                },
            ],
            [
                "EntityModelUnit",
                () => {
                    return new EntityModelUnitBoxProvider(handler);
                },
            ],
        ]),
    );
    handler.initTableHeaders([new FreTableHeaderInfo("EntityFunction", "tableRowFor_StartEditor", ["Name", "parameters", "type", "body"])]);
}

/**
 * Adds trigger and reference shortcut info to the in-memory representation of structure of the language metamodel.
 */
export function initializeEditorDef() {
    FreLanguage.getInstance().concept("Entity").trigger = "Entity";
    FreLanguage.getInstance().concept("AbsExpression").trigger = "AbsExpression";
    FreLanguage.getInstance().concept("MultiplyExpression").trigger = "*";
    FreLanguage.getInstance().concept("EntityFunction").trigger = "EntityFunction";
    FreLanguage.getInstance().concept("AttributeWithLimitedType").trigger = "AttributeWithLimitedType";
    FreLanguage.getInstance().concept("Text").trigger = "Text";
    FreLanguage.getInstance().concept("Text2").trigger = "Text2";
    FreLanguage.getInstance().concept("Text3").trigger = "Text3";
    FreLanguage.getInstance().concept("Text4").trigger = "Text4";
    FreLanguage.getInstance().concept("AttributeWithEntityType").trigger = "AttributeWithEntityType";
    FreLanguage.getInstance().concept("Variable").trigger = "Variable";
    FreLanguage.getInstance().concept("AttributeRef").trigger = "AttributeRef";
    FreLanguage.getInstance().concept("VariableRef").trigger = "VariableRef";
    FreLanguage.getInstance().concept("StringLiteralExpression").trigger = "StringLiteralExpression";
    FreLanguage.getInstance().concept("NumberLiteralExpression").trigger = "NumberLiteralExpression";
    FreLanguage.getInstance().concept("BooleanLiteralExpression").trigger = "BooleanLiteralExpression";
    FreLanguage.getInstance().concept("PlusExpression").trigger = "+";
    FreLanguage.getInstance().concept("DivideExpression").trigger = "/";
    FreLanguage.getInstance().concept("AndExpression").trigger = "AndExpression";
    FreLanguage.getInstance().concept("OrExpression").trigger = "or";
    FreLanguage.getInstance().concept("LessThenExpression").trigger = "<";
    FreLanguage.getInstance().concept("GreaterThenExpression").trigger = "GreaterThenExpression";
    FreLanguage.getInstance().concept("EqualsExpression").trigger = "EqualsExpression";
    FreLanguage.getInstance().concept("FunctionCallExpression").trigger = "function";
    FreLanguage.getInstance().concept("IfExpression").trigger = "if";

    const conceptProjectionToPropertyProjection = new Map();
}
