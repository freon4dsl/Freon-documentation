// Generated by the Freon Language Generator.
import { net } from "net.akehurst.language-agl-processor";
import SPPTBranch = net.akehurst.language.api.sppt.SPPTBranch;
import { PercentageLiteral, EuroLiteral, InsuranceTheme } from "../../language/gen/index.js";
import { InsuranceModelSyntaxAnalyser } from "./InsuranceModelSyntaxAnalyser.js";
import { FreNodeReference } from "@freon4dsl/core";

export class InsuranceModelCommonSyntaxAnalyserPart {
    mainAnalyser: InsuranceModelSyntaxAnalyser;

    constructor(mainAnalyser: InsuranceModelSyntaxAnalyser) {
        this.mainAnalyser = mainAnalyser;
    }

    /**
     * Method to transform branches that match the following rule:
     * PercentageLiteral = numberLiteral '%' ;
     * @param branch
     * @private
     */
    public transformPercentageLiteral(branch: SPPTBranch): PercentageLiteral {
        // console.log('transformPercentageLiteral called: ' + branch.name);
        let __value: number;
        const children = this.mainAnalyser.getChildren(branch);
        __value = this.mainAnalyser.transformSharedPackedParseTreeNode(children[0]); // RHSPrimEntry

        return PercentageLiteral.create({
            value: __value,
            parseLocation: this.mainAnalyser.location(branch),
        });
    }

    /**
     * Method to transform branches that match the following rule:
     * EuroLiteral = 'EUR' numberLiteral ',' numberLiteral ;
     * @param branch
     * @private
     */
    public transformEuroLiteral(branch: SPPTBranch): EuroLiteral {
        // console.log('transformEuroLiteral called: ' + branch.name);
        let __euros: number;
        let __cents: number;
        const children = this.mainAnalyser.getChildren(branch);
        __euros = this.mainAnalyser.transformSharedPackedParseTreeNode(children[1]); // RHSPrimEntry
        __cents = this.mainAnalyser.transformSharedPackedParseTreeNode(children[3]); // RHSPrimEntry

        return EuroLiteral.create({
            euros: __euros,
            cents: __cents,
            parseLocation: this.mainAnalyser.location(branch),
        });
    }

    /**
     * Method to transform branches that match the following rule:
     * InsuranceTheme = 'HomeTheme'
     *	| 'HealthTheme'
     *	| 'LegalTheme' ;
     * @param branch
     * @private
     */
    public transformInsuranceTheme(branch: SPPTBranch): InsuranceTheme {
        const choice = branch.nonSkipMatchedText;
        if (choice === "HomeTheme") {
            return InsuranceTheme.HomeTheme;
        } else if (choice === "HealthTheme") {
            return InsuranceTheme.HealthTheme;
        } else if (choice === "LegalTheme") {
            return InsuranceTheme.LegalTheme;
        } else {
            return null;
        }
    }
}
