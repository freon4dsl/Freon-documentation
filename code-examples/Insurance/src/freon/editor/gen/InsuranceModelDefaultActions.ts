// Generated by the Freon Language Generator.
import * as Keys from "@freon4dsl/core";
import {
    AFTER_BINARY_OPERATOR,
    BEFORE_BINARY_OPERATOR,
    Box,
    MetaKey,
    FreCombinedActions,
    FreCreateBinaryExpressionAction,
    FreCaret,
    FreCustomAction,
    FreEditor,
    FreNode,
    FreBinaryExpression,
    FreKey,
    FreLogger,
    FreTriggerType,
    ActionBox,
    OptionalBox,
    FreNodeReference,
    LEFT_MOST,
    RIGHT_MOST,
} from "@freon4dsl/core";

import {
    DocuExpression,
    Literal,
    EuroLiteral,
    NumberLiteral,
    PercentageLiteral,
    BooleanLiteral,
    BinaryExpression,
    PlusExpression,
    MinusExpression,
    MultiplyExpression,
    DivideExpression,
    FunctionCallExpression,
    InsurancePartRef,
    RiskAdjustmentRef,
    ParameterRef,
    AttributeRef,
    RiskRef,
    PayoutRef,
    Text,
    Text2,
    Text3,
    Text4,
    GenericKind,
    GenericTypeDecl,
    GenericLiteral,
    Entity,
    EntityAttribute,
    BaseProduct,
    InsurancePart,
    InsuranceProduct,
    CalcFunction,
    Description,
    Parameter,
    DocuType,
    InsurancePartType,
    PercentageType,
    NumberType,
    BooleanType,
    EuroType,
    TypeRef,
    InsuranceTheme,
    PremiumDays,
    NamedType,
    Part,
    Product,
} from "../../language/gen/index.js";

/**
 * This module implements the actions available to the user in the editor.
 * These are the default actions. They are merged with the default and
 * custom editor parts in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */
export const BINARY_EXPRESSION_CREATORS: FreCreateBinaryExpressionAction[] = [
    FreCreateBinaryExpressionAction.create({
        trigger: "+",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: FreTriggerType, editor: FreEditor) => {
            const parent = box.node;
            const newExpression = new PlusExpression();
            parent[(box as ActionBox).propertyName] = newExpression;
            return newExpression;
        },
    }),
    FreCreateBinaryExpressionAction.create({
        trigger: "-",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: FreTriggerType, editor: FreEditor) => {
            const parent = box.node;
            const newExpression = new MinusExpression();
            parent[(box as ActionBox).propertyName] = newExpression;
            return newExpression;
        },
    }),
    FreCreateBinaryExpressionAction.create({
        trigger: "*",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: FreTriggerType, editor: FreEditor) => {
            const parent = box.node;
            const newExpression = new MultiplyExpression();
            parent[(box as ActionBox).propertyName] = newExpression;
            return newExpression;
        },
    }),
    FreCreateBinaryExpressionAction.create({
        trigger: "/",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: FreTriggerType, editor: FreEditor) => {
            const parent = box.node;
            const newExpression = new DivideExpression();
            parent[(box as ActionBox).propertyName] = newExpression;
            return newExpression;
        },
    }),
];

export const CUSTOM_ACTIONS: FreCustomAction[] = [
    FreCustomAction.create({
        trigger: ".",
        activeInBoxRoles: ["optional-attribute"],
        action: (box: Box, trigger: FreTriggerType, ed: FreEditor): FreNode | null => {
            (box.parent as OptionalBox).mustShow = true;
            return box.node;
        },
        boxRoleToSelect: "ParameterRef-attribute",
    }),
    FreCustomAction.create({
        trigger: "Risk adjusted by =",
        activeInBoxRoles: ["optional-riskAdjustment"],
        action: (box: Box, trigger: FreTriggerType, ed: FreEditor): FreNode | null => {
            (box.parent as OptionalBox).mustShow = true;
            return box.node;
        },
        boxRoleToSelect: "InsuranceProduct-riskAdjustment",
    }),
    FreCustomAction.create({
        trigger: "Helper functions:",
        activeInBoxRoles: ["optional-helpers"],
        action: (box: Box, trigger: FreTriggerType, ed: FreEditor): FreNode | null => {
            (box.parent as OptionalBox).mustShow = true;
            return box.node;
        },
        boxRoleToSelect: "InsuranceProduct-helpers",
    }),

    FreCustomAction.create({
        // Action to insert new reference to a concept
        activeInBoxRoles: ["themes"],
        trigger: "themes",
        action: (box: Box, trigger: FreTriggerType, ed: FreEditor): FreNode | null => {
            const parent: InsuranceProduct = box.node as InsuranceProduct;
            const newBase: FreNodeReference<InsuranceTheme> = FreNodeReference.create<InsuranceTheme>("", null);
            parent.themes.push(newBase);
            return newBase.referred;
        },
    }),
    FreCustomAction.create({
        // Action to insert new reference to a concept
        activeInBoxRoles: ["parts"],
        trigger: "InsurancePart",
        action: (box: Box, trigger: FreTriggerType, ed: FreEditor): FreNode | null => {
            const parent: InsuranceProduct = box.node as InsuranceProduct;
            const newBase: FreNodeReference<InsurancePart> = FreNodeReference.create<InsurancePart>("", null);
            parent.parts.push(newBase);
            return newBase.referred;
        },
    }),
    FreCustomAction.create({
        // Action to insert new reference to a concept
        activeInBoxRoles: ["basedOn"],
        trigger: "BaseProduct",
        action: (box: Box, trigger: FreTriggerType, ed: FreEditor): FreNode | null => {
            const parent: InsuranceProduct = box.node as InsuranceProduct;
            const newBase: FreNodeReference<BaseProduct> = FreNodeReference.create<BaseProduct>("", null);
            parent.basedOn.push(newBase);
            return newBase.referred;
        },
    }),
];
