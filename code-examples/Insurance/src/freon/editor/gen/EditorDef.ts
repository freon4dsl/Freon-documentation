// Generated by the Freon Language Generator.
import { FreLanguage, FreProjectionHandler, FreBoxProvider, BoxUtil, FreTableHeaderInfo } from "@freon4dsl/core";
import { freonConfiguration } from "../../config/FreonConfiguration.js";
import {
    EuroLiteral,
    NumberLiteral,
    PercentageLiteral,
    BooleanLiteral,
    PlusExpression,
    MinusExpression,
    MultiplyExpression,
    DivideExpression,
    FunctionCallExpression,
    InsurancePartRef,
    RiskAdjustmentRef,
    ParameterRef,
    RiskRef,
    PayoutRef,
    Text,
    Text2,
    Text3,
    Text4,
    GenericTypeDecl,
    GenericLiteral,
    Entity,
    EntityAttribute,
    BaseProduct,
    InsurancePart,
    InsuranceProduct,
    CalcFunction,
    Description,
    Parameter,
    TypeRef,
} from "../../language/gen/index.js";
import {
    EuroLiteralBoxProvider,
    NumberLiteralBoxProvider,
    PercentageLiteralBoxProvider,
    BooleanLiteralBoxProvider,
    PlusExpressionBoxProvider,
    MinusExpressionBoxProvider,
    MultiplyExpressionBoxProvider,
    DivideExpressionBoxProvider,
    FunctionCallExpressionBoxProvider,
    InsurancePartRefBoxProvider,
    RiskAdjustmentRefBoxProvider,
    ParameterRefBoxProvider,
    RiskRefBoxProvider,
    PayoutRefBoxProvider,
    TextBoxProvider,
    Text2BoxProvider,
    Text3BoxProvider,
    Text4BoxProvider,
    GenericTypeDeclBoxProvider,
    GenericLiteralBoxProvider,
    EntityBoxProvider,
    EntityAttributeBoxProvider,
    BaseProductBoxProvider,
    InsurancePartBoxProvider,
    InsuranceProductBoxProvider,
    CalcFunctionBoxProvider,
    DescriptionBoxProvider,
    ParameterBoxProvider,
    TypeRefBoxProvider,
    PartBoxProvider,
    ProductBoxProvider,
} from "../../editor/gen/index.js";

const map = new Map([
    // the main map
    [
        // Concept has special projection for (one of) its parts
        "EuroLiteral",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["euros", ""], // special projection
                    ["cents", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "NumberLiteral",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["value", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "PercentageLiteral",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["value", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "BooleanLiteral",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["value", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "FunctionCallExpression",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["funcDefinition", ""], // special projection
                    ["args", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "InsurancePartRef",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["part", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "ParameterRef",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["parameter", ""], // special projection
                    ["attribute", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "GenericTypeDecl",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["kind", ""], // special projection
                    ["baseType", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "GenericLiteral",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["kind", ""], // special projection
                    ["content", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Entity",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["isCompany", ""], // special projection
                    ["name", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "externals",
                new Map([
                    ["isCompany", ""], // special projection
                    ["name", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "fragments",
                new Map([
                    ["isCompany", ""], // special projection
                    ["name", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "UsingComments",
                new Map([
                    ["isCompany", ""], // special projection
                    ["name", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "EntityAttribute",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["numVal", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "BaseProduct",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["theme", ""], // special projection
                    ["parts", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "externals",
                new Map([
                    ["theme", ""], // special projection
                    ["name", ""], // special projection
                    ["parts", ""], // special projection
                    ["isUnderConstruction", ""], // special projection
                    ["isApprovedLevel1", ""], // special projection
                    ["isApprovedLevel2", ""], // special projection
                    ["isApprovedLevel3", ""], // special projection
                    ["yieldsProfit", ""], // special projection
                    ["nrOfUse", ""], // special projection
                    ["range", ""], // special projection
                    ["date", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "fragments",
                new Map([
                    ["theme", ""], // special projection
                    ["name", ""], // special projection
                    ["parts", ""], // special projection
                    ["isUnderConstruction", ""], // special projection
                    ["isApprovedLevel1", ""], // special projection
                    ["isApprovedLevel2", ""], // special projection
                    ["isApprovedLevel3", ""], // special projection
                    ["yieldsProfit", ""], // special projection
                    ["nrOfUse", ""], // special projection
                    ["range", ""], // special projection
                    ["date", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "comments",
                new Map([
                    ["name", ""], // special projection
                    ["theme", ""], // special projection
                    ["parts", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "controls",
                new Map([
                    ["name", ""], // special projection
                    ["theme", ""], // special projection
                    ["isUnderConstruction", ""], // special projection
                    ["isApprovedLevel1", ""], // special projection
                    ["isApprovedLevel2", ""], // special projection
                    ["isApprovedLevel3", ""], // special projection
                    ["yieldsProfit", ""], // special projection
                    ["nrOfUse", ""], // special projection
                    ["range", ""], // special projection
                    ["parts", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "UsingComments",
                new Map([
                    ["name", ""], // special projection
                    ["theme", ""], // special projection
                    ["parts", "comments"], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "buttonedTables",
                new Map([
                    ["name", ""], // special projection
                    ["theme", ""], // special projection
                    ["parts", "__TABLE__"], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "tables",
                new Map([
                    ["name", ""], // special projection
                    ["theme", ""], // special projection
                    ["parts", "__TABLE__"], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "InsurancePart",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["statisticalRisk", ""], // special projection
                    ["maximumPayOut", ""], // special projection
                    ["isApproved", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "comments",
                new Map([
                    ["name", ""], // special projection
                    ["statisticalRisk", ""], // special projection
                    ["maximumPayOut", ""], // special projection
                    ["isApproved", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "tableRowFor_buttonedTables",
                new Map([
                    ["name", ""], // special projection
                    ["statisticalRisk", ""], // special projection
                    ["maximumPayOut", ""], // special projection
                    ["isApproved", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "tableRowFor_tables",
                new Map([
                    ["name", ""], // special projection
                    ["statisticalRisk", ""], // special projection
                    ["maximumPayOut", ""], // special projection
                    ["isApproved", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "InsuranceProduct",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["productName", ""], // special projection
                    ["basedOn", ""], // special projection
                    ["themes", ""], // special projection
                    ["advertisedPremium", ""], // special projection
                    ["nrPremiumDays", ""], // special projection
                    ["parts", ""], // special projection
                    ["riskAdjustment", ""], // special projection
                    ["calculation", ""], // special projection
                    ["helpers", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "comments",
                new Map([
                    ["name", ""], // special projection
                    ["productName", ""], // special projection
                    ["basedOn", ""], // special projection
                    ["themes", ""], // special projection
                    ["advertisedPremium", ""], // special projection
                    ["nrPremiumDays", ""], // special projection
                    ["parts", ""], // special projection
                    ["riskAdjustment", ""], // special projection
                    ["calculation", ""], // special projection
                    ["helpers", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "controls",
                new Map([
                    ["name", ""], // special projection
                    ["productName", ""], // special projection
                    ["basedOn", ""], // special projection
                    ["themes", ""], // special projection
                    ["advertisedPremium", ""], // special projection
                    ["nrPremiumDays", ""], // special projection
                    ["parts", ""], // special projection
                    ["riskAdjustment", ""], // special projection
                    ["calculation", ""], // special projection
                    ["helpers", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "CalcFunction",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["parameters", ""], // special projection
                    ["declaredType", ""], // special projection
                    ["body", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "comments",
                new Map([
                    ["name", ""], // special projection
                    ["parameters", ""], // special projection
                    ["declaredType", ""], // special projection
                    ["description", ""], // special projection
                    ["body", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Description",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["content", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Parameter",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["declaredType", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "comments",
                new Map([
                    ["name", ""], // special projection
                    ["declaredType", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "TypeRef",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["type", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Part",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["part", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "comments",
                new Map([
                    ["part", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Product",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["product", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "comments",
                new Map([
                    ["product", ""], // special projection
                ]),
            ],
        ]),
    ],
]);

/**
 * Adds all known projection groups to the root projection.
 * @param handler
 */
export function initializeProjections(handler: FreProjectionHandler) {
    handler.addProjection("Brackets");
    handler.addProjection("tables");
    handler.addProjection("buttonedTables");
    handler.addProjection("comments");
    handler.addProjection("UsingComments");
    handler.addProjection("controls");
    handler.addProjection("fragments");
    handler.addProjection("externals");
    for (const p of freonConfiguration.customProjection) {
        handler.addCustomProjection(p);
    }
    handler.initConceptToPropertyProjection(map);
    handler.initProviderConstructors(
        new Map<string, () => FreBoxProvider>([
            [
                "EuroLiteral",
                () => {
                    return new EuroLiteralBoxProvider(handler);
                },
            ],
            [
                "NumberLiteral",
                () => {
                    return new NumberLiteralBoxProvider(handler);
                },
            ],
            [
                "PercentageLiteral",
                () => {
                    return new PercentageLiteralBoxProvider(handler);
                },
            ],
            [
                "BooleanLiteral",
                () => {
                    return new BooleanLiteralBoxProvider(handler);
                },
            ],
            [
                "PlusExpression",
                () => {
                    return new PlusExpressionBoxProvider(handler);
                },
            ],
            [
                "MinusExpression",
                () => {
                    return new MinusExpressionBoxProvider(handler);
                },
            ],
            [
                "MultiplyExpression",
                () => {
                    return new MultiplyExpressionBoxProvider(handler);
                },
            ],
            [
                "DivideExpression",
                () => {
                    return new DivideExpressionBoxProvider(handler);
                },
            ],
            [
                "FunctionCallExpression",
                () => {
                    return new FunctionCallExpressionBoxProvider(handler);
                },
            ],
            [
                "InsurancePartRef",
                () => {
                    return new InsurancePartRefBoxProvider(handler);
                },
            ],
            [
                "RiskAdjustmentRef",
                () => {
                    return new RiskAdjustmentRefBoxProvider(handler);
                },
            ],
            [
                "ParameterRef",
                () => {
                    return new ParameterRefBoxProvider(handler);
                },
            ],
            [
                "RiskRef",
                () => {
                    return new RiskRefBoxProvider(handler);
                },
            ],
            [
                "PayoutRef",
                () => {
                    return new PayoutRefBoxProvider(handler);
                },
            ],
            [
                "Text",
                () => {
                    return new TextBoxProvider(handler);
                },
            ],
            [
                "Text2",
                () => {
                    return new Text2BoxProvider(handler);
                },
            ],
            [
                "Text3",
                () => {
                    return new Text3BoxProvider(handler);
                },
            ],
            [
                "Text4",
                () => {
                    return new Text4BoxProvider(handler);
                },
            ],
            [
                "GenericTypeDecl",
                () => {
                    return new GenericTypeDeclBoxProvider(handler);
                },
            ],
            [
                "GenericLiteral",
                () => {
                    return new GenericLiteralBoxProvider(handler);
                },
            ],
            [
                "Entity",
                () => {
                    return new EntityBoxProvider(handler);
                },
            ],
            [
                "EntityAttribute",
                () => {
                    return new EntityAttributeBoxProvider(handler);
                },
            ],
            [
                "BaseProduct",
                () => {
                    return new BaseProductBoxProvider(handler);
                },
            ],
            [
                "InsurancePart",
                () => {
                    return new InsurancePartBoxProvider(handler);
                },
            ],
            [
                "InsuranceProduct",
                () => {
                    return new InsuranceProductBoxProvider(handler);
                },
            ],
            [
                "CalcFunction",
                () => {
                    return new CalcFunctionBoxProvider(handler);
                },
            ],
            [
                "Description",
                () => {
                    return new DescriptionBoxProvider(handler);
                },
            ],
            [
                "Parameter",
                () => {
                    return new ParameterBoxProvider(handler);
                },
            ],
            [
                "TypeRef",
                () => {
                    return new TypeRefBoxProvider(handler);
                },
            ],
            [
                "Part",
                () => {
                    return new PartBoxProvider(handler);
                },
            ],
            [
                "Product",
                () => {
                    return new ProductBoxProvider(handler);
                },
            ],
        ]),
    );
    handler.initTableHeaders([
        new FreTableHeaderInfo("InsurancePart", "tableRowFor_buttonedTables", ["Name", "risk", "pay out", "is approved", "action"]),
        new FreTableHeaderInfo("InsurancePart", "tableRowFor_tables", ["Name", "risk", "pay out", "is approved"]),
    ]);
}

/**
 * Adds trigger and reference shortcut info to the in-memory representation of structure of the language metamodel.
 */
export function initializeEditorDef() {
    FreLanguage.getInstance().concept("EuroLiteral").trigger = "EuroLiteral";
    FreLanguage.getInstance().concept("NumberLiteral").trigger = "NumberLiteral";
    FreLanguage.getInstance().concept("PercentageLiteral").trigger = "PercentageLiteral";
    FreLanguage.getInstance().concept("BooleanLiteral").trigger = "BooleanLiteral";
    FreLanguage.getInstance().concept("PlusExpression").trigger = "+";
    FreLanguage.getInstance().concept("MinusExpression").trigger = "-";
    FreLanguage.getInstance().concept("MultiplyExpression").trigger = "*";
    FreLanguage.getInstance().concept("DivideExpression").trigger = "/";
    FreLanguage.getInstance().concept("FunctionCallExpression").trigger = "calc";
    FreLanguage.getInstance().concept("InsurancePartRef").trigger = "InsurancePartRef";
    FreLanguage.getInstance().concept("RiskAdjustmentRef").trigger = "RiskAdjustmentRef";
    FreLanguage.getInstance().concept("ParameterRef").trigger = "ParameterRef";
    FreLanguage.getInstance().concept("RiskRef").trigger = "RiskRef";
    FreLanguage.getInstance().concept("PayoutRef").trigger = "PayoutRef";
    FreLanguage.getInstance().concept("Text").trigger = "Text";
    FreLanguage.getInstance().concept("Text2").trigger = "Text2";
    FreLanguage.getInstance().concept("Text3").trigger = "Text3";
    FreLanguage.getInstance().concept("Text4").trigger = "Text4";
    FreLanguage.getInstance().concept("GenericTypeDecl").trigger = "GenericTypeDecl";
    FreLanguage.getInstance().concept("GenericLiteral").trigger = "GenericLiteral";
    FreLanguage.getInstance().concept("Entity").trigger = "Entity";
    FreLanguage.getInstance().concept("EntityAttribute").trigger = "EntityAttribute";
    FreLanguage.getInstance().concept("BaseProduct").trigger = "BaseProduct";
    FreLanguage.getInstance().concept("InsurancePart").trigger = "InsurancePart";
    FreLanguage.getInstance().concept("InsuranceProduct").trigger = "InsuranceProduct";
    FreLanguage.getInstance().concept("CalcFunction").trigger = "CalcFunction";
    FreLanguage.getInstance().concept("Description").trigger = "Description";
    FreLanguage.getInstance().concept("Parameter").trigger = "Parameter";
    FreLanguage.getInstance().concept("TypeRef").trigger = "TypeRef";
    FreLanguage.getInstance().concept("FunctionCallExpression").referenceShortcut = {
        propertyName: "funcDefinition",
        conceptName: "CalcFunction",
    };
    FreLanguage.getInstance().concept("InsurancePartRef").referenceShortcut = {
        propertyName: "part",
        conceptName: "InsurancePart",
    };
    FreLanguage.getInstance().concept("ParameterRef").referenceShortcut = {
        propertyName: "parameter",
        conceptName: "Parameter",
    };
    FreLanguage.getInstance().concept("GenericTypeDecl").referenceShortcut = {
        propertyName: "kind",
        conceptName: "GenericKind",
    };
    FreLanguage.getInstance().concept("GenericLiteral").referenceShortcut = {
        propertyName: "kind",
        conceptName: "GenericKind",
    };
    FreLanguage.getInstance().concept("TypeRef").referenceShortcut = {
        propertyName: "type",
        conceptName: "NamedType",
    };

    const conceptProjectionToPropertyProjection = new Map();
}
