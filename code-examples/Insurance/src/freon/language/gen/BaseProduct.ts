// Generated by the Freon Language Generator.
import {
    MobxModelElementImpl,
    observableprim,
    observablepart,
    observablepartlist,
    FreNamedNode,
    FreParseLocation,
    FreNodeReference,
    FreUtils,
    matchElementList,
} from "@freon4dsl/core";
import { InsurancePart, InsuranceTheme } from "./internal.js";

import { makeObservable, action } from "mobx";

/**
 * Class BaseProduct is the implementation of the concept with the same name in the language definition file.
 * It uses mobx decorators to enable parts of the language environment, e.g. the editor, to react
 * to the changes in the state of its properties.
 */
export class BaseProduct extends MobxModelElementImpl implements FreNamedNode {
    /**
     * A convenience method that creates an instance of this class
     * based on the properties defined in 'data'.
     * @param data partial object
     */
    static create(data: Partial<BaseProduct>): BaseProduct {
        const result = new BaseProduct(data.$id);
        if (!!data.name) {
            result.name = data.name;
        }
        if (!!data.isUnderConstruction) {
            result.isUnderConstruction = data.isUnderConstruction;
        }
        if (!!data.isApprovedLevel1) {
            result.isApprovedLevel1 = data.isApprovedLevel1;
        }
        if (!!data.isApprovedLevel2) {
            result.isApprovedLevel2 = data.isApprovedLevel2;
        }
        if (!!data.isApprovedLevel3) {
            result.isApprovedLevel3 = data.isApprovedLevel3;
        }
        if (!!data.yieldsProfit) {
            result.yieldsProfit = data.yieldsProfit;
        }
        if (!!data.range) {
            result.range = data.range;
        }
        if (!!data.nrOfUse) {
            result.nrOfUse = data.nrOfUse;
        }
        if (!!data.date) {
            result.date = data.date;
        }
        if (!!data.parts) {
            data.parts.forEach((x) => result.parts.push(x));
        }
        if (!!data.theme) {
            result.theme = data.theme;
        }
        if (!!data.parseLocation) {
            result.parseLocation = data.parseLocation;
        }
        return result;
    }

    readonly $typename: string = "BaseProduct"; // holds the metatype in the form of a string
    $id: string = ""; // a unique identifier
    parseLocation: FreParseLocation; // if relevant, the location of this element within the source from which it is parsed
    name: string; // implementation of name
    isUnderConstruction: boolean; // implementation of isUnderConstruction
    isApprovedLevel1: boolean; // implementation of isApprovedLevel1
    isApprovedLevel2: boolean; // implementation of isApprovedLevel2
    isApprovedLevel3: boolean; // implementation of isApprovedLevel3
    yieldsProfit: boolean; // implementation of yieldsProfit
    range: number; // implementation of range
    nrOfUse: number; // implementation of nrOfUse
    date: string; // implementation of date
    parts: InsurancePart[]; // implementation of part 'parts'
    theme: FreNodeReference<InsuranceTheme>; // implementation of reference 'theme'

    constructor(id?: string) {
        super();
        if (!!id) {
            this.$id = id;
        } else {
            this.$id = FreUtils.ID(); // uuid.v4();
        }
        // Both 'observableprim' and 'observableprimlist' change the get and set of the attribute
        // such that the part is observable. In lists no 'null' or 'undefined' values are allowed.
        observableprim(this, "name");
        this.name = "";
        observableprim(this, "isUnderConstruction");
        this.isUnderConstruction = false;
        observableprim(this, "isApprovedLevel1");
        this.isApprovedLevel1 = false;
        observableprim(this, "isApprovedLevel2");
        this.isApprovedLevel2 = false;
        observableprim(this, "isApprovedLevel3");
        this.isApprovedLevel3 = false;
        observableprim(this, "yieldsProfit");
        this.yieldsProfit = false;
        observableprim(this, "range");
        this.range = 0;
        observableprim(this, "nrOfUse");
        this.nrOfUse = 0;
        observableprim(this, "date");
        this.date = "";

        // Both 'observablepart' and 'observablepartlist' change the get and set of the attribute
        // such that the parent-part relationship is consistently maintained,
        // and make sure the part is observable. In lists no 'null' or 'undefined' values are allowed.
        observablepartlist(this, "parts");
        observablepart(this, "theme");

        // Make copy method a mobx action
        makeObservable(this, {
            copy: action,
        });
    }

    /**
     * Returns the metatype of this instance in the form of a string.
     */
    freLanguageConcept(): string {
        return this.$typename;
    }

    /**
     * Returns the unique identifier of this instance.
     */
    freId(): string {
        return this.$id;
    }

    /**
     * Returns true if this instance is a model concept.
     */
    freIsModel(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a model unit.
     */
    freIsUnit(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is an expression concept.
     */
    freIsExpression(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a binary expression concept.
     */
    freIsBinaryExpression(): boolean {
        return false;
    }
    /**
     * A convenience method that copies this instance into a new object.
     */
    copy(): BaseProduct {
        const result = new BaseProduct();
        if (!!this.name) {
            result.name = this.name;
        }
        if (!!this.isUnderConstruction) {
            result.isUnderConstruction = this.isUnderConstruction;
        }
        if (!!this.isApprovedLevel1) {
            result.isApprovedLevel1 = this.isApprovedLevel1;
        }
        if (!!this.isApprovedLevel2) {
            result.isApprovedLevel2 = this.isApprovedLevel2;
        }
        if (!!this.isApprovedLevel3) {
            result.isApprovedLevel3 = this.isApprovedLevel3;
        }
        if (!!this.yieldsProfit) {
            result.yieldsProfit = this.yieldsProfit;
        }
        if (!!this.range) {
            result.range = this.range;
        }
        if (!!this.nrOfUse) {
            result.nrOfUse = this.nrOfUse;
        }
        if (!!this.date) {
            result.date = this.date;
        }
        if (!!this.parts) {
            this.parts.forEach((x) => result.parts.push(x.copy()));
        }
        if (!!this.theme) {
            result.theme = this.theme.copy();
        }
        return result;
    }
    /**
     * Matches a partial instance of this class to this object
     * based on the properties defined in the partial.
     * @param toBeMatched
     */
    public match(toBeMatched: Partial<BaseProduct>): boolean {
        let result: boolean = true;
        if (result && toBeMatched.name !== null && toBeMatched.name !== undefined && toBeMatched.name.length > 0) {
            result = result && this.name === toBeMatched.name;
        }
        if (result && toBeMatched.isUnderConstruction !== null && toBeMatched.isUnderConstruction !== undefined) {
            result = result && this.isUnderConstruction === toBeMatched.isUnderConstruction;
        }
        if (result && toBeMatched.isApprovedLevel1 !== null && toBeMatched.isApprovedLevel1 !== undefined) {
            result = result && this.isApprovedLevel1 === toBeMatched.isApprovedLevel1;
        }
        if (result && toBeMatched.isApprovedLevel2 !== null && toBeMatched.isApprovedLevel2 !== undefined) {
            result = result && this.isApprovedLevel2 === toBeMatched.isApprovedLevel2;
        }
        if (result && toBeMatched.isApprovedLevel3 !== null && toBeMatched.isApprovedLevel3 !== undefined) {
            result = result && this.isApprovedLevel3 === toBeMatched.isApprovedLevel3;
        }
        if (result && toBeMatched.yieldsProfit !== null && toBeMatched.yieldsProfit !== undefined) {
            result = result && this.yieldsProfit === toBeMatched.yieldsProfit;
        }
        if (result && toBeMatched.range !== null && toBeMatched.range !== undefined) {
            result = result && this.range === toBeMatched.range;
        }
        if (result && toBeMatched.nrOfUse !== null && toBeMatched.nrOfUse !== undefined) {
            result = result && this.nrOfUse === toBeMatched.nrOfUse;
        }
        if (result && toBeMatched.date !== null && toBeMatched.date !== undefined && toBeMatched.date.length > 0) {
            result = result && this.date === toBeMatched.date;
        }
        if (result && !!toBeMatched.parts) {
            result = result && matchElementList(this.parts, toBeMatched.parts);
        }
        if (result && !!toBeMatched.theme) {
            result = result && this.theme.match(toBeMatched.theme);
        }
        return result;
    }

    /**
     * Convenience method for reference 'theme'.
     * Instead of returning a 'FreNodeReference<InsuranceTheme>' object,
     * it returns the referred 'InsuranceTheme' object, if it can be found.
     */
    get $theme(): InsuranceTheme {
        if (!!this.theme) {
            return this.theme.referred;
        }
        return null;
    }
}
