// Generated by the Freon Language Generator.
// Generated by Freon LanguageTemplate
import {
    FreLanguage,
    FreLanguageModel,
    FreLanguageModelUnit,
    FreLanguageProperty,
    FreLanguageConcept,
    FreLanguageInterface,
    FreNodeReference,
} from "@freon4dsl/core";

// Import as MyLanguage to avoid naming conflicts in generated constructors
import * as MyLanguage from "./internal.js";
import { InsuranceModelStdlib } from "../../stdlib/gen/InsuranceModelStdlib.js";

/**
 * Creates an in-memory representation of structure of the language metamodel, used in e.g. the (de)serializer.
 */
export function initializeLanguage() {
    FreLanguage.getInstance().name = "InsuranceModel";
    FreLanguage.getInstance().id = "";
    FreLanguage.getInstance().addModel(describeInsuranceModel());
    FreLanguage.getInstance().addUnit(describePart());
    FreLanguage.getInstance().addUnit(describeProduct());
    FreLanguage.getInstance().addConcept(describeDocuExpression());
    FreLanguage.getInstance().addConcept(describeLiteral());
    FreLanguage.getInstance().addConcept(describeEuroLiteral());
    FreLanguage.getInstance().addConcept(describeNumberLiteral());
    FreLanguage.getInstance().addConcept(describePercentageLiteral());
    FreLanguage.getInstance().addConcept(describeBooleanLiteral());
    FreLanguage.getInstance().addConcept(describeBinaryExpression());
    FreLanguage.getInstance().addConcept(describePlusExpression());
    FreLanguage.getInstance().addConcept(describeMinusExpression());
    FreLanguage.getInstance().addConcept(describeMultiplyExpression());
    FreLanguage.getInstance().addConcept(describeDivideExpression());
    FreLanguage.getInstance().addConcept(describeFunctionCallExpression());
    FreLanguage.getInstance().addConcept(describeInsurancePartRef());
    FreLanguage.getInstance().addConcept(describeRiskAdjustmentRef());
    FreLanguage.getInstance().addConcept(describeParameterRef());
    FreLanguage.getInstance().addConcept(describeAttributeRef());
    FreLanguage.getInstance().addConcept(describeRiskRef());
    FreLanguage.getInstance().addConcept(describePayoutRef());
    FreLanguage.getInstance().addConcept(describeText());
    FreLanguage.getInstance().addConcept(describeText2());
    FreLanguage.getInstance().addConcept(describeText3());
    FreLanguage.getInstance().addConcept(describeText4());
    FreLanguage.getInstance().addConcept(describeGenericKind());
    FreLanguage.getInstance().addConcept(describeGenericTypeDecl());
    FreLanguage.getInstance().addConcept(describeGenericLiteral());
    FreLanguage.getInstance().addConcept(describeEntity());
    FreLanguage.getInstance().addConcept(describeEntityAttribute());
    FreLanguage.getInstance().addConcept(describeBaseProduct());
    FreLanguage.getInstance().addConcept(describeInsurancePart());
    FreLanguage.getInstance().addConcept(describeInsuranceProduct());
    FreLanguage.getInstance().addConcept(describeCalcFunction());
    FreLanguage.getInstance().addConcept(describeDescription());
    FreLanguage.getInstance().addConcept(describeParameter());
    FreLanguage.getInstance().addConcept(describeDocuType());
    FreLanguage.getInstance().addConcept(describeInsurancePartType());
    FreLanguage.getInstance().addConcept(describePercentageType());
    FreLanguage.getInstance().addConcept(describeNumberType());
    FreLanguage.getInstance().addConcept(describeBooleanType());
    FreLanguage.getInstance().addConcept(describeEuroType());
    FreLanguage.getInstance().addConcept(describeTypeRef());
    FreLanguage.getInstance().addConcept(describeInsuranceTheme());
    FreLanguage.getInstance().addConcept(describePremiumDays());
    FreLanguage.getInstance().addInterface(describeNamedType());
    FreLanguage.getInstance().addReferenceCreator((name: string, type: string) => {
        return !!name ? FreNodeReference.create(name, type) : null;
    });
    FreLanguage.getInstance().stdLib = InsuranceModelStdlib.getInstance();
}

function describeInsuranceModel(): FreLanguageModel {
    const model: FreLanguageModel = {
        typeName: "InsuranceModel",
        id: "-id-InsuranceModel",
        key: "-key-InsuranceModel",
        isNamespace: true,
        language: "-key-InsuranceModel",
        constructor: (id?: string) => {
            return new MyLanguage.InsuranceModel(id);
        },
        creator: (data: Partial<MyLanguage.InsuranceModel>) => {
            return MyLanguage.InsuranceModel.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
    };
    model.properties.set("name", {
        name: "name",
        id: "-id-InsuranceModel-name",
        key: "-key-InsuranceModel-name",
        type: "string",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    model.properties.set("parts", {
        name: "parts",
        id: "-id-InsuranceModel-parts",
        key: "-key-InsuranceModel-parts",
        type: "Part",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });
    model.properties.set("products", {
        name: "products",
        id: "-id-InsuranceModel-products",
        key: "-key-InsuranceModel-products",
        type: "Product",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });

    return model;
}

function describePart(): FreLanguageModelUnit {
    const modelunit: FreLanguageModelUnit = {
        typeName: "Part",
        id: "-id-Part",
        key: "-key-Part",
        isNamedElement: true,
        language: "-key-InsuranceModel",
        fileExtension: "base",
        subConceptNames: [], // Nothing yet, but may change in the future
        constructor: (id?: string) => {
            return new MyLanguage.Part(id);
        },
        creator: (data: Partial<MyLanguage.Part>) => {
            return MyLanguage.Part.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        trigger: "Part",
    };
    modelunit.properties.set("name", {
        name: "name",
        id: "-id-Part-name",
        key: "-key-Part-name",
        type: "string",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    modelunit.properties.set("part", {
        name: "part",
        id: "-id-Part-part",
        key: "-key-Part-part",
        type: "BaseProduct",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });

    return modelunit;
}

function describeProduct(): FreLanguageModelUnit {
    const modelunit: FreLanguageModelUnit = {
        typeName: "Product",
        id: "-id-Product",
        key: "-key-Product",
        isNamedElement: true,
        language: "-key-InsuranceModel",
        fileExtension: "prod",
        subConceptNames: [], // Nothing yet, but may change in the future
        constructor: (id?: string) => {
            return new MyLanguage.Product(id);
        },
        creator: (data: Partial<MyLanguage.Product>) => {
            return MyLanguage.Product.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        trigger: "Product",
    };
    modelunit.properties.set("name", {
        name: "name",
        id: "-id-Product-name",
        key: "-key-Product-name",
        type: "string",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    modelunit.properties.set("product", {
        name: "product",
        id: "-id-Product-product",
        key: "-key-Product-product",
        type: "InsuranceProduct",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });

    return modelunit;
}

function describeDocuExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "DocuExpression",
        id: "-id-DocuExpression",
        key: "-key-DocuExpression",
        isAbstract: true,
        isPublic: false,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "DocuExpression",
        constructor: (id?: string) => {
            return null;
        },
        creator: (data: Partial<MyLanguage.DocuExpression>) => {
            return null;
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [
            "Literal",
            "EuroLiteral",
            "NumberLiteral",
            "PercentageLiteral",
            "BooleanLiteral",
            "BinaryExpression",
            "PlusExpression",
            "MinusExpression",
            "MultiplyExpression",
            "DivideExpression",
            "FunctionCallExpression",
            "InsurancePartRef",
            "RiskAdjustmentRef",
            "ParameterRef",
            "GenericLiteral",
        ],
    };

    return concept;
}

function describeLiteral(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "Literal",
        id: "-id-Literal",
        key: "-key-Literal",
        isAbstract: true,
        isPublic: false,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "Literal",
        constructor: (id?: string) => {
            return null;
        },
        creator: (data: Partial<MyLanguage.Literal>) => {
            return null;
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "DocuExpression",
        subConceptNames: ["EuroLiteral", "NumberLiteral", "PercentageLiteral", "BooleanLiteral"],
    };

    return concept;
}

function describeEuroLiteral(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "EuroLiteral",
        id: "-id-EuroLiteral",
        key: "-key-EuroLiteral",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "EuroLiteral",
        constructor: (id?: string) => {
            return new MyLanguage.EuroLiteral(id);
        },
        creator: (data: Partial<MyLanguage.EuroLiteral>) => {
            return MyLanguage.EuroLiteral.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Literal",
        subConceptNames: [],
    };
    concept.properties.set("euros", {
        name: "euros",
        id: "-id-EuroLiteral-euros",
        key: "-key-EuroLiteral-euros",
        type: "number",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    concept.properties.set("cents", {
        name: "cents",
        id: "-id-EuroLiteral-cents",
        key: "-key-EuroLiteral-cents",
        type: "number",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });

    return concept;
}

function describeNumberLiteral(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "NumberLiteral",
        id: "-id-NumberLiteral",
        key: "-key-NumberLiteral",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "NumberLiteral",
        constructor: (id?: string) => {
            return new MyLanguage.NumberLiteral(id);
        },
        creator: (data: Partial<MyLanguage.NumberLiteral>) => {
            return MyLanguage.NumberLiteral.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Literal",
        subConceptNames: [],
    };
    concept.properties.set("value", {
        name: "value",
        id: "-id-NumberLiteral-value",
        key: "-key-NumberLiteral-value",
        type: "number",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });

    return concept;
}

function describePercentageLiteral(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "PercentageLiteral",
        id: "-id-PercentageLiteral",
        key: "-key-PercentageLiteral",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "PercentageLiteral",
        constructor: (id?: string) => {
            return new MyLanguage.PercentageLiteral(id);
        },
        creator: (data: Partial<MyLanguage.PercentageLiteral>) => {
            return MyLanguage.PercentageLiteral.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Literal",
        subConceptNames: [],
    };
    concept.properties.set("value", {
        name: "value",
        id: "-id-PercentageLiteral-value",
        key: "-key-PercentageLiteral-value",
        type: "number",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });

    return concept;
}

function describeBooleanLiteral(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "BooleanLiteral",
        id: "-id-BooleanLiteral",
        key: "-key-BooleanLiteral",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "BooleanLiteral",
        constructor: (id?: string) => {
            return new MyLanguage.BooleanLiteral(id);
        },
        creator: (data: Partial<MyLanguage.BooleanLiteral>) => {
            return MyLanguage.BooleanLiteral.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Literal",
        subConceptNames: [],
    };
    concept.properties.set("value", {
        name: "value",
        id: "-id-BooleanLiteral-value",
        key: "-key-BooleanLiteral-value",
        type: "boolean",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });

    return concept;
}

function describeBinaryExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "BinaryExpression",
        id: "-id-BinaryExpression",
        key: "-key-BinaryExpression",
        isAbstract: true,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "BinaryExpression",
        constructor: (id?: string) => {
            return null;
        },
        creator: (data: Partial<MyLanguage.BinaryExpression>) => {
            return null;
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "DocuExpression",
        subConceptNames: ["PlusExpression", "MinusExpression", "MultiplyExpression", "DivideExpression"],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-id-BinaryExpression-left",
        key: "-key-BinaryExpression-left",
        type: "DocuExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-id-BinaryExpression-right",
        key: "-key-BinaryExpression-right",
        type: "DocuExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });

    return concept;
}

function describePlusExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "PlusExpression",
        id: "-id-PlusExpression",
        key: "-key-PlusExpression",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "PlusExpression",
        constructor: (id?: string) => {
            return new MyLanguage.PlusExpression(id);
        },
        creator: (data: Partial<MyLanguage.PlusExpression>) => {
            return MyLanguage.PlusExpression.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "BinaryExpression",
        subConceptNames: [],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-id-BinaryExpression-left",
        key: "-key-BinaryExpression-left",
        type: "DocuExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-id-BinaryExpression-right",
        key: "-key-BinaryExpression-right",
        type: "DocuExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });

    return concept;
}

function describeMinusExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "MinusExpression",
        id: "-id-MinusExpression",
        key: "-key-MinusExpression",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "MinusExpression",
        constructor: (id?: string) => {
            return new MyLanguage.MinusExpression(id);
        },
        creator: (data: Partial<MyLanguage.MinusExpression>) => {
            return MyLanguage.MinusExpression.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "BinaryExpression",
        subConceptNames: [],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-id-BinaryExpression-left",
        key: "-key-BinaryExpression-left",
        type: "DocuExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-id-BinaryExpression-right",
        key: "-key-BinaryExpression-right",
        type: "DocuExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });

    return concept;
}

function describeMultiplyExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "MultiplyExpression",
        id: "-id-MultiplyExpression",
        key: "-key-MultiplyExpression",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "MultiplyExpression",
        constructor: (id?: string) => {
            return new MyLanguage.MultiplyExpression(id);
        },
        creator: (data: Partial<MyLanguage.MultiplyExpression>) => {
            return MyLanguage.MultiplyExpression.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "BinaryExpression",
        subConceptNames: [],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-id-BinaryExpression-left",
        key: "-key-BinaryExpression-left",
        type: "DocuExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-id-BinaryExpression-right",
        key: "-key-BinaryExpression-right",
        type: "DocuExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });

    return concept;
}

function describeDivideExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "DivideExpression",
        id: "-id-DivideExpression",
        key: "-key-DivideExpression",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "DivideExpression",
        constructor: (id?: string) => {
            return new MyLanguage.DivideExpression(id);
        },
        creator: (data: Partial<MyLanguage.DivideExpression>) => {
            return MyLanguage.DivideExpression.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "BinaryExpression",
        subConceptNames: [],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-id-BinaryExpression-left",
        key: "-key-BinaryExpression-left",
        type: "DocuExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-id-BinaryExpression-right",
        key: "-key-BinaryExpression-right",
        type: "DocuExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });

    return concept;
}

function describeFunctionCallExpression(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "FunctionCallExpression",
        id: "-id-FunctionCallExpression",
        key: "-key-FunctionCallExpression",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "FunctionCallExpression",
        constructor: (id?: string) => {
            return new MyLanguage.FunctionCallExpression(id);
        },
        creator: (data: Partial<MyLanguage.FunctionCallExpression>) => {
            return MyLanguage.FunctionCallExpression.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "DocuExpression",
        subConceptNames: [],
    };

    concept.properties.set("args", {
        name: "args",
        id: "-id-FunctionCallExpression-args",
        key: "-key-FunctionCallExpression-args",
        type: "DocuExpression",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });
    concept.properties.set("funcDefinition", {
        name: "funcDefinition",
        id: "-id-FunctionCallExpression-funcDefinition",
        key: "-key-FunctionCallExpression-funcDefinition",
        type: "CalcFunction",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "reference",
    });
    return concept;
}

function describeInsurancePartRef(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "InsurancePartRef",
        id: "-id-InsurancePartRef",
        key: "-key-InsurancePartRef",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "InsurancePartRef",
        constructor: (id?: string) => {
            return new MyLanguage.InsurancePartRef(id);
        },
        creator: (data: Partial<MyLanguage.InsurancePartRef>) => {
            return MyLanguage.InsurancePartRef.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "DocuExpression",
        subConceptNames: [],
    };

    concept.properties.set("part", {
        name: "part",
        id: "-id-InsurancePartRef-part",
        key: "-key-InsurancePartRef-part",
        type: "InsurancePart",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "reference",
    });
    return concept;
}

function describeRiskAdjustmentRef(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "RiskAdjustmentRef",
        id: "-id-RiskAdjustmentRef",
        key: "-key-RiskAdjustmentRef",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: true,
        trigger: "RiskAdjustmentRef",
        constructor: (id?: string) => {
            return new MyLanguage.RiskAdjustmentRef(id);
        },
        creator: (data: Partial<MyLanguage.RiskAdjustmentRef>) => {
            return MyLanguage.RiskAdjustmentRef.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "DocuExpression",
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-RiskAdjustmentRef-name",
        key: "-key-RiskAdjustmentRef-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });

    return concept;
}

function describeParameterRef(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "ParameterRef",
        id: "-id-ParameterRef",
        key: "-key-ParameterRef",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "ParameterRef",
        constructor: (id?: string) => {
            return new MyLanguage.ParameterRef(id);
        },
        creator: (data: Partial<MyLanguage.ParameterRef>) => {
            return MyLanguage.ParameterRef.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "DocuExpression",
        subConceptNames: [],
    };

    concept.properties.set("attribute", {
        name: "attribute",
        id: "-id-ParameterRef-attribute",
        key: "-key-ParameterRef-attribute",
        type: "AttributeRef",
        isList: false,
        isPublic: true,
        isOptional: true,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });
    concept.properties.set("parameter", {
        name: "parameter",
        id: "-id-ParameterRef-parameter",
        key: "-key-ParameterRef-parameter",
        type: "Parameter",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "reference",
    });
    return concept;
}

function describeAttributeRef(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "AttributeRef",
        id: "-id-AttributeRef",
        key: "-key-AttributeRef",
        isAbstract: true,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: true,
        trigger: "AttributeRef",
        constructor: (id?: string) => {
            return null;
        },
        creator: (data: Partial<MyLanguage.AttributeRef>) => {
            return null;
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: ["RiskRef", "PayoutRef"],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-AttributeRef-name",
        key: "-key-AttributeRef-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });

    return concept;
}

function describeRiskRef(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "RiskRef",
        id: "-id-RiskRef",
        key: "-key-RiskRef",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: true,
        trigger: "RiskRef",
        constructor: (id?: string) => {
            return new MyLanguage.RiskRef(id);
        },
        creator: (data: Partial<MyLanguage.RiskRef>) => {
            return MyLanguage.RiskRef.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "AttributeRef",
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-RiskRef-name",
        key: "-key-RiskRef-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });

    return concept;
}

function describePayoutRef(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "PayoutRef",
        id: "-id-PayoutRef",
        key: "-key-PayoutRef",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: true,
        trigger: "PayoutRef",
        constructor: (id?: string) => {
            return new MyLanguage.PayoutRef(id);
        },
        creator: (data: Partial<MyLanguage.PayoutRef>) => {
            return MyLanguage.PayoutRef.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "AttributeRef",
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-PayoutRef-name",
        key: "-key-PayoutRef-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });

    return concept;
}

function describeText(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "Text",
        id: "-id-Text",
        key: "-key-Text",
        isAbstract: false,
        isPublic: false,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "Text",
        constructor: (id?: string) => {
            return new MyLanguage.Text(id);
        },
        creator: (data: Partial<MyLanguage.Text>) => {
            return MyLanguage.Text.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };

    return concept;
}

function describeText2(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "Text2",
        id: "-id-Text2",
        key: "-key-Text2",
        isAbstract: false,
        isPublic: false,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "Text2",
        constructor: (id?: string) => {
            return new MyLanguage.Text2(id);
        },
        creator: (data: Partial<MyLanguage.Text2>) => {
            return MyLanguage.Text2.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };

    return concept;
}

function describeText3(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "Text3",
        id: "-id-Text3",
        key: "-key-Text3",
        isAbstract: false,
        isPublic: false,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "Text3",
        constructor: (id?: string) => {
            return new MyLanguage.Text3(id);
        },
        creator: (data: Partial<MyLanguage.Text3>) => {
            return MyLanguage.Text3.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };

    return concept;
}

function describeText4(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "Text4",
        id: "-id-Text4",
        key: "-key-Text4",
        isAbstract: false,
        isPublic: false,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "Text4",
        constructor: (id?: string) => {
            return new MyLanguage.Text4(id);
        },
        creator: (data: Partial<MyLanguage.Text4>) => {
            return MyLanguage.Text4.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };

    return concept;
}

function describeGenericKind(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "GenericKind",
        id: "-id-GenericKind",
        key: "-key-GenericKind",
        isAbstract: false,
        isPublic: true,
        isLimited: true,
        instanceNames: ["Set", "Sequence", "Bag", "Collection"],
        language: "-key-InsuranceModel",
        isNamedElement: true,
        trigger: "GenericKind",
        constructor: (id?: string) => {
            return new MyLanguage.GenericKind(id);
        },
        creator: (data: Partial<MyLanguage.GenericKind>) => {
            return MyLanguage.GenericKind.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-GenericKind-name",
        key: "-key-GenericKind-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });

    return concept;
}

function describeGenericTypeDecl(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "GenericTypeDecl",
        id: "-id-GenericTypeDecl",
        key: "-key-GenericTypeDecl",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "GenericTypeDecl",
        constructor: (id?: string) => {
            return new MyLanguage.GenericTypeDecl(id);
        },
        creator: (data: Partial<MyLanguage.GenericTypeDecl>) => {
            return MyLanguage.GenericTypeDecl.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "DocuType",
        subConceptNames: [],
    };

    concept.properties.set("baseType", {
        name: "baseType",
        id: "-id-GenericTypeDecl-baseType",
        key: "-key-GenericTypeDecl-baseType",
        type: "DocuType",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });
    concept.properties.set("kind", {
        name: "kind",
        id: "-id-GenericTypeDecl-kind",
        key: "-key-GenericTypeDecl-kind",
        type: "GenericKind",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "reference",
    });
    return concept;
}

function describeGenericLiteral(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "GenericLiteral",
        id: "-id-GenericLiteral",
        key: "-key-GenericLiteral",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "GenericLiteral",
        constructor: (id?: string) => {
            return new MyLanguage.GenericLiteral(id);
        },
        creator: (data: Partial<MyLanguage.GenericLiteral>) => {
            return MyLanguage.GenericLiteral.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "DocuExpression",
        subConceptNames: [],
    };

    concept.properties.set("content", {
        name: "content",
        id: "-id-GenericLiteral-content",
        key: "-key-GenericLiteral-content",
        type: "DocuExpression",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });
    concept.properties.set("kind", {
        name: "kind",
        id: "-id-GenericLiteral-kind",
        key: "-key-GenericLiteral-kind",
        type: "GenericKind",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "reference",
    });
    return concept;
}

function describeEntity(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "Entity",
        id: "-id-Entity",
        key: "-key-Entity",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: true,
        trigger: "Entity",
        constructor: (id?: string) => {
            return new MyLanguage.Entity(id);
        },
        creator: (data: Partial<MyLanguage.Entity>) => {
            return MyLanguage.Entity.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("isCompany", {
        name: "isCompany",
        id: "-id-Entity-isCompany",
        key: "-key-Entity-isCompany",
        type: "boolean",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    concept.properties.set("name", {
        name: "name",
        id: "-id-Entity-name",
        key: "-key-Entity-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });

    concept.properties.set("baseEntity", {
        name: "baseEntity",
        id: "-id-Entity-baseEntity",
        key: "-key-Entity-baseEntity",
        type: "Entity",
        isList: false,
        isPublic: true,
        isOptional: true,
        language: "-key-InsuranceModel",
        propertyKind: "reference",
    });
    return concept;
}

function describeEntityAttribute(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "EntityAttribute",
        id: "-id-EntityAttribute",
        key: "-key-EntityAttribute",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "EntityAttribute",
        constructor: (id?: string) => {
            return new MyLanguage.EntityAttribute(id);
        },
        creator: (data: Partial<MyLanguage.EntityAttribute>) => {
            return MyLanguage.EntityAttribute.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("numVal", {
        name: "numVal",
        id: "-id-EntityAttribute-numVal",
        key: "-key-EntityAttribute-numVal",
        type: "number",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });

    return concept;
}

function describeBaseProduct(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "BaseProduct",
        id: "-id-BaseProduct",
        key: "-key-BaseProduct",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: true,
        trigger: "BaseProduct",
        constructor: (id?: string) => {
            return new MyLanguage.BaseProduct(id);
        },
        creator: (data: Partial<MyLanguage.BaseProduct>) => {
            return MyLanguage.BaseProduct.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-BaseProduct-name",
        key: "-key-BaseProduct-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    concept.properties.set("isUnderConstruction", {
        name: "isUnderConstruction",
        id: "-id-BaseProduct-isUnderConstruction",
        key: "-key-BaseProduct-isUnderConstruction",
        type: "boolean",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    concept.properties.set("isApprovedLevel1", {
        name: "isApprovedLevel1",
        id: "-id-BaseProduct-isApprovedLevel1",
        key: "-key-BaseProduct-isApprovedLevel1",
        type: "boolean",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    concept.properties.set("isApprovedLevel2", {
        name: "isApprovedLevel2",
        id: "-id-BaseProduct-isApprovedLevel2",
        key: "-key-BaseProduct-isApprovedLevel2",
        type: "boolean",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    concept.properties.set("isApprovedLevel3", {
        name: "isApprovedLevel3",
        id: "-id-BaseProduct-isApprovedLevel3",
        key: "-key-BaseProduct-isApprovedLevel3",
        type: "boolean",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    concept.properties.set("yieldsProfit", {
        name: "yieldsProfit",
        id: "-id-BaseProduct-yieldsProfit",
        key: "-key-BaseProduct-yieldsProfit",
        type: "boolean",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    concept.properties.set("range", {
        name: "range",
        id: "-id-BaseProduct-range",
        key: "-key-BaseProduct-range",
        type: "number",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    concept.properties.set("nrOfUse", {
        name: "nrOfUse",
        id: "-id-BaseProduct-nrOfUse",
        key: "-key-BaseProduct-nrOfUse",
        type: "number",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    concept.properties.set("date", {
        name: "date",
        id: "-id-BaseProduct-date",
        key: "-key-BaseProduct-date",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    concept.properties.set("parts", {
        name: "parts",
        id: "-id-BaseProduct-parts",
        key: "-key-BaseProduct-parts",
        type: "InsurancePart",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });
    concept.properties.set("theme", {
        name: "theme",
        id: "-id-BaseProduct-theme",
        key: "-key-BaseProduct-theme",
        type: "InsuranceTheme",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "reference",
    });
    return concept;
}

function describeInsurancePart(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "InsurancePart",
        id: "-id-InsurancePart",
        key: "-key-InsurancePart",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: true,
        trigger: "InsurancePart",
        constructor: (id?: string) => {
            return new MyLanguage.InsurancePart(id);
        },
        creator: (data: Partial<MyLanguage.InsurancePart>) => {
            return MyLanguage.InsurancePart.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-InsurancePart-name",
        key: "-key-InsurancePart-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    concept.properties.set("isApproved", {
        name: "isApproved",
        id: "-id-InsurancePart-isApproved",
        key: "-key-InsurancePart-isApproved",
        type: "boolean",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    concept.properties.set("statisticalRisk", {
        name: "statisticalRisk",
        id: "-id-InsurancePart-statisticalRisk",
        key: "-key-InsurancePart-statisticalRisk",
        type: "PercentageLiteral",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });
    concept.properties.set("maximumPayOut", {
        name: "maximumPayOut",
        id: "-id-InsurancePart-maximumPayOut",
        key: "-key-InsurancePart-maximumPayOut",
        type: "EuroLiteral",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });

    return concept;
}

function describeInsuranceProduct(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "InsuranceProduct",
        id: "-id-InsuranceProduct",
        key: "-key-InsuranceProduct",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: true,
        trigger: "InsuranceProduct",
        constructor: (id?: string) => {
            return new MyLanguage.InsuranceProduct(id);
        },
        creator: (data: Partial<MyLanguage.InsuranceProduct>) => {
            return MyLanguage.InsuranceProduct.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-InsuranceProduct-name",
        key: "-key-InsuranceProduct-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    concept.properties.set("productName", {
        name: "productName",
        id: "-id-InsuranceProduct-productName",
        key: "-key-InsuranceProduct-productName",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    concept.properties.set("advertisedPremium", {
        name: "advertisedPremium",
        id: "-id-InsuranceProduct-advertisedPremium",
        key: "-key-InsuranceProduct-advertisedPremium",
        type: "EuroLiteral",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });
    concept.properties.set("riskAdjustment", {
        name: "riskAdjustment",
        id: "-id-InsuranceProduct-riskAdjustment",
        key: "-key-InsuranceProduct-riskAdjustment",
        type: "PercentageLiteral",
        isList: false,
        isPublic: true,
        isOptional: true,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });
    concept.properties.set("calculation", {
        name: "calculation",
        id: "-id-InsuranceProduct-calculation",
        key: "-key-InsuranceProduct-calculation",
        type: "DocuExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });
    concept.properties.set("helpers", {
        name: "helpers",
        id: "-id-InsuranceProduct-helpers",
        key: "-key-InsuranceProduct-helpers",
        type: "CalcFunction",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });
    concept.properties.set("themes", {
        name: "themes",
        id: "-id-InsuranceProduct-themes",
        key: "-key-InsuranceProduct-themes",
        type: "InsuranceTheme",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "reference",
    });
    concept.properties.set("nrPremiumDays", {
        name: "nrPremiumDays",
        id: "-id-InsuranceProduct-nrPremiumDays",
        key: "-key-InsuranceProduct-nrPremiumDays",
        type: "PremiumDays",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "reference",
    });
    concept.properties.set("parts", {
        name: "parts",
        id: "-id-InsuranceProduct-parts",
        key: "-key-InsuranceProduct-parts",
        type: "InsurancePart",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "reference",
    });
    concept.properties.set("basedOn", {
        name: "basedOn",
        id: "-id-InsuranceProduct-basedOn",
        key: "-key-InsuranceProduct-basedOn",
        type: "BaseProduct",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "reference",
    });
    return concept;
}

function describeCalcFunction(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "CalcFunction",
        id: "-id-CalcFunction",
        key: "-key-CalcFunction",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: true,
        trigger: "CalcFunction",
        constructor: (id?: string) => {
            return new MyLanguage.CalcFunction(id);
        },
        creator: (data: Partial<MyLanguage.CalcFunction>) => {
            return MyLanguage.CalcFunction.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-CalcFunction-name",
        key: "-key-CalcFunction-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    concept.properties.set("description", {
        name: "description",
        id: "-id-CalcFunction-description",
        key: "-key-CalcFunction-description",
        type: "Description",
        isList: false,
        isPublic: true,
        isOptional: true,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });
    concept.properties.set("declaredType", {
        name: "declaredType",
        id: "-id-CalcFunction-declaredType",
        key: "-key-CalcFunction-declaredType",
        type: "DocuType",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });
    concept.properties.set("body", {
        name: "body",
        id: "-id-CalcFunction-body",
        key: "-key-CalcFunction-body",
        type: "DocuExpression",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });
    concept.properties.set("parameters", {
        name: "parameters",
        id: "-id-CalcFunction-parameters",
        key: "-key-CalcFunction-parameters",
        type: "Parameter",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });

    return concept;
}

function describeDescription(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "Description",
        id: "-id-Description",
        key: "-key-Description",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "Description",
        constructor: (id?: string) => {
            return new MyLanguage.Description(id);
        },
        creator: (data: Partial<MyLanguage.Description>) => {
            return MyLanguage.Description.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("content", {
        name: "content",
        id: "-id-Description-content",
        key: "-key-Description-content",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });

    return concept;
}

function describeParameter(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "Parameter",
        id: "-id-Parameter",
        key: "-key-Parameter",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: true,
        trigger: "Parameter",
        constructor: (id?: string) => {
            return new MyLanguage.Parameter(id);
        },
        creator: (data: Partial<MyLanguage.Parameter>) => {
            return MyLanguage.Parameter.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-Parameter-name",
        key: "-key-Parameter-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    concept.properties.set("declaredType", {
        name: "declaredType",
        id: "-id-Parameter-declaredType",
        key: "-key-Parameter-declaredType",
        type: "DocuType",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "part",
    });

    return concept;
}

function describeDocuType(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "DocuType",
        id: "-id-DocuType",
        key: "-key-DocuType",
        isAbstract: true,
        isPublic: false,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "DocuType",
        constructor: (id?: string) => {
            return null;
        },
        creator: (data: Partial<MyLanguage.DocuType>) => {
            return null;
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: ["GenericTypeDecl", "TypeRef"],
    };

    return concept;
}

function describeInsurancePartType(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "InsurancePartType",
        id: "-id-InsurancePartType",
        key: "-key-InsurancePartType",
        isAbstract: false,
        isPublic: true,
        isLimited: true,
        instanceNames: ["InsurancePart"],
        language: "-key-InsuranceModel",
        isNamedElement: true,
        trigger: "InsurancePartType",
        constructor: (id?: string) => {
            return new MyLanguage.InsurancePartType(id);
        },
        creator: (data: Partial<MyLanguage.InsurancePartType>) => {
            return MyLanguage.InsurancePartType.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-NamedType-name",
        key: "-key-NamedType-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });

    return concept;
}

function describePercentageType(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "PercentageType",
        id: "-id-PercentageType",
        key: "-key-PercentageType",
        isAbstract: false,
        isPublic: true,
        isLimited: true,
        instanceNames: ["Percentage"],
        language: "-key-InsuranceModel",
        isNamedElement: true,
        trigger: "PercentageType",
        constructor: (id?: string) => {
            return new MyLanguage.PercentageType(id);
        },
        creator: (data: Partial<MyLanguage.PercentageType>) => {
            return MyLanguage.PercentageType.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-NamedType-name",
        key: "-key-NamedType-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });

    return concept;
}

function describeNumberType(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "NumberType",
        id: "-id-NumberType",
        key: "-key-NumberType",
        isAbstract: false,
        isPublic: true,
        isLimited: true,
        instanceNames: ["Number"],
        language: "-key-InsuranceModel",
        isNamedElement: true,
        trigger: "NumberType",
        constructor: (id?: string) => {
            return new MyLanguage.NumberType(id);
        },
        creator: (data: Partial<MyLanguage.NumberType>) => {
            return MyLanguage.NumberType.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-NamedType-name",
        key: "-key-NamedType-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });

    return concept;
}

function describeBooleanType(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "BooleanType",
        id: "-id-BooleanType",
        key: "-key-BooleanType",
        isAbstract: false,
        isPublic: true,
        isLimited: true,
        instanceNames: ["Boolean"],
        language: "-key-InsuranceModel",
        isNamedElement: true,
        trigger: "BooleanType",
        constructor: (id?: string) => {
            return new MyLanguage.BooleanType(id);
        },
        creator: (data: Partial<MyLanguage.BooleanType>) => {
            return MyLanguage.BooleanType.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-NamedType-name",
        key: "-key-NamedType-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });

    return concept;
}

function describeEuroType(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "EuroType",
        id: "-id-EuroType",
        key: "-key-EuroType",
        isAbstract: false,
        isPublic: true,
        isLimited: true,
        instanceNames: ["EUR"],
        language: "-key-InsuranceModel",
        isNamedElement: true,
        trigger: "EuroType",
        constructor: (id?: string) => {
            return new MyLanguage.EuroType(id);
        },
        creator: (data: Partial<MyLanguage.EuroType>) => {
            return MyLanguage.EuroType.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-NamedType-name",
        key: "-key-NamedType-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });

    return concept;
}

function describeTypeRef(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "TypeRef",
        id: "-id-TypeRef",
        key: "-key-TypeRef",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-InsuranceModel",
        isNamedElement: false,
        trigger: "TypeRef",
        constructor: (id?: string) => {
            return new MyLanguage.TypeRef(id);
        },
        creator: (data: Partial<MyLanguage.TypeRef>) => {
            return MyLanguage.TypeRef.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "DocuType",
        subConceptNames: [],
    };

    concept.properties.set("type", {
        name: "type",
        id: "-id-TypeRef-type",
        key: "-key-TypeRef-type",
        type: "NamedType",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-InsuranceModel",
        propertyKind: "reference",
    });
    return concept;
}

function describeInsuranceTheme(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "InsuranceTheme",
        id: "-id-InsuranceTheme",
        key: "-key-InsuranceTheme",
        isAbstract: false,
        isPublic: true,
        isLimited: true,
        instanceNames: ["HomeTheme", "HealthTheme", "LegalTheme"],
        language: "-key-InsuranceModel",
        isNamedElement: true,
        trigger: "InsuranceTheme",
        constructor: (id?: string) => {
            return new MyLanguage.InsuranceTheme(id);
        },
        creator: (data: Partial<MyLanguage.InsuranceTheme>) => {
            return MyLanguage.InsuranceTheme.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-InsuranceTheme-name",
        key: "-key-InsuranceTheme-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });

    return concept;
}

function describePremiumDays(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "PremiumDays",
        id: "-id-PremiumDays",
        key: "-key-PremiumDays",
        isAbstract: false,
        isPublic: true,
        isLimited: true,
        instanceNames: ["Week", "Month", "Quarter", "Semester", "Year"],
        language: "-key-InsuranceModel",
        isNamedElement: true,
        trigger: "PremiumDays",
        constructor: (id?: string) => {
            return new MyLanguage.PremiumDays(id);
        },
        creator: (data: Partial<MyLanguage.PremiumDays>) => {
            return MyLanguage.PremiumDays.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-PremiumDays-name",
        key: "-key-PremiumDays-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });
    concept.properties.set("nrOfDays", {
        name: "nrOfDays",
        id: "-id-PremiumDays-nrOfDays",
        key: "-key-PremiumDays-nrOfDays",
        type: "number",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-InsuranceModel",
        propertyKind: "primitive",
    });

    return concept;
}

function describeNamedType(): FreLanguageInterface {
    const intface: FreLanguageInterface = {
        typeName: "NamedType",
        id: "-id-NamedType",
        key: "-key-NamedType",
        isPublic: true,
        isNamedElement: true,
        properties: new Map<string, FreLanguageProperty>(),
        constructor: undefined,
        creator: undefined,
        language: "InsuranceModel",
        subConceptNames: ["InsurancePartType", "PercentageType", "NumberType", "BooleanType", "EuroType"],
    };
    intface.properties.set("name", {
        name: "name",
        id: "-id-NamedType-name",
        key: "-key-NamedType-name",
        type: "string",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "InsuranceModel",
        propertyKind: "primitive",
    });

    return intface;
}
