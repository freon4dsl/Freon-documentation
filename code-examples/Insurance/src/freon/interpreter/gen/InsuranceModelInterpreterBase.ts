// Generated by the Freon Language Generator.
// Generated my Freon, will be overwritten with every generation.
import { InterpreterContext, RtObject, RtError } from "@freon4dsl/core";
import {
    DocuExpression,
    Literal,
    EuroLiteral,
    NumberLiteral,
    PercentageLiteral,
    BooleanLiteral,
    BinaryExpression,
    PlusExpression,
    MinusExpression,
    MultiplyExpression,
    DivideExpression,
    FunctionCallExpression,
    InsurancePartRef,
    RiskAdjustmentRef,
    ParameterRef,
    AttributeRef,
    RiskRef,
    PayoutRef,
    Text,
    Text2,
    Text3,
    Text4,
    GenericKind,
    GenericTypeDecl,
    GenericLiteral,
    Entity,
    EntityAttribute,
    BaseProduct,
    InsurancePart,
    InsuranceProduct,
    CalcFunction,
    Description,
    Parameter,
    DocuType,
    InsurancePartType,
    PercentageType,
    NumberType,
    BooleanType,
    EuroType,
    TypeRef,
    InsuranceTheme,
    PremiumDays,
    Part,
    Product,
} from "../../language/gen/index.js";

/**
 * The base class containing all interpreter functions that should be defined.
 * All functions throw an error when called.
 */
export class InsuranceModelInterpreterBase {
    constructor() {}

    evalDocuExpression(node: DocuExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalDocuExpression is not defined");
    }

    evalLiteral(node: Literal, ctx: InterpreterContext): RtObject {
        throw new RtError("evalLiteral is not defined");
    }

    evalEuroLiteral(node: EuroLiteral, ctx: InterpreterContext): RtObject {
        throw new RtError("evalEuroLiteral is not defined");
    }

    evalNumberLiteral(node: NumberLiteral, ctx: InterpreterContext): RtObject {
        throw new RtError("evalNumberLiteral is not defined");
    }

    evalPercentageLiteral(node: PercentageLiteral, ctx: InterpreterContext): RtObject {
        throw new RtError("evalPercentageLiteral is not defined");
    }

    evalBooleanLiteral(node: BooleanLiteral, ctx: InterpreterContext): RtObject {
        throw new RtError("evalBooleanLiteral is not defined");
    }

    evalBinaryExpression(node: BinaryExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalBinaryExpression is not defined");
    }

    evalPlusExpression(node: PlusExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalPlusExpression is not defined");
    }

    evalMinusExpression(node: MinusExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalMinusExpression is not defined");
    }

    evalMultiplyExpression(node: MultiplyExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalMultiplyExpression is not defined");
    }

    evalDivideExpression(node: DivideExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalDivideExpression is not defined");
    }

    evalFunctionCallExpression(node: FunctionCallExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalFunctionCallExpression is not defined");
    }

    evalInsurancePartRef(node: InsurancePartRef, ctx: InterpreterContext): RtObject {
        throw new RtError("evalInsurancePartRef is not defined");
    }

    evalRiskAdjustmentRef(node: RiskAdjustmentRef, ctx: InterpreterContext): RtObject {
        throw new RtError("evalRiskAdjustmentRef is not defined");
    }

    evalParameterRef(node: ParameterRef, ctx: InterpreterContext): RtObject {
        throw new RtError("evalParameterRef is not defined");
    }

    evalAttributeRef(node: AttributeRef, ctx: InterpreterContext): RtObject {
        throw new RtError("evalAttributeRef is not defined");
    }

    evalRiskRef(node: RiskRef, ctx: InterpreterContext): RtObject {
        throw new RtError("evalRiskRef is not defined");
    }

    evalPayoutRef(node: PayoutRef, ctx: InterpreterContext): RtObject {
        throw new RtError("evalPayoutRef is not defined");
    }

    evalText(node: Text, ctx: InterpreterContext): RtObject {
        throw new RtError("evalText is not defined");
    }

    evalText2(node: Text2, ctx: InterpreterContext): RtObject {
        throw new RtError("evalText2 is not defined");
    }

    evalText3(node: Text3, ctx: InterpreterContext): RtObject {
        throw new RtError("evalText3 is not defined");
    }

    evalText4(node: Text4, ctx: InterpreterContext): RtObject {
        throw new RtError("evalText4 is not defined");
    }

    evalGenericKind(node: GenericKind, ctx: InterpreterContext): RtObject {
        throw new RtError("evalGenericKind is not defined");
    }

    evalGenericTypeDecl(node: GenericTypeDecl, ctx: InterpreterContext): RtObject {
        throw new RtError("evalGenericTypeDecl is not defined");
    }

    evalGenericLiteral(node: GenericLiteral, ctx: InterpreterContext): RtObject {
        throw new RtError("evalGenericLiteral is not defined");
    }

    evalEntity(node: Entity, ctx: InterpreterContext): RtObject {
        throw new RtError("evalEntity is not defined");
    }

    evalEntityAttribute(node: EntityAttribute, ctx: InterpreterContext): RtObject {
        throw new RtError("evalEntityAttribute is not defined");
    }

    evalBaseProduct(node: BaseProduct, ctx: InterpreterContext): RtObject {
        throw new RtError("evalBaseProduct is not defined");
    }

    evalInsurancePart(node: InsurancePart, ctx: InterpreterContext): RtObject {
        throw new RtError("evalInsurancePart is not defined");
    }

    evalInsuranceProduct(node: InsuranceProduct, ctx: InterpreterContext): RtObject {
        throw new RtError("evalInsuranceProduct is not defined");
    }

    evalCalcFunction(node: CalcFunction, ctx: InterpreterContext): RtObject {
        throw new RtError("evalCalcFunction is not defined");
    }

    evalDescription(node: Description, ctx: InterpreterContext): RtObject {
        throw new RtError("evalDescription is not defined");
    }

    evalParameter(node: Parameter, ctx: InterpreterContext): RtObject {
        throw new RtError("evalParameter is not defined");
    }

    evalDocuType(node: DocuType, ctx: InterpreterContext): RtObject {
        throw new RtError("evalDocuType is not defined");
    }

    evalInsurancePartType(node: InsurancePartType, ctx: InterpreterContext): RtObject {
        throw new RtError("evalInsurancePartType is not defined");
    }

    evalPercentageType(node: PercentageType, ctx: InterpreterContext): RtObject {
        throw new RtError("evalPercentageType is not defined");
    }

    evalNumberType(node: NumberType, ctx: InterpreterContext): RtObject {
        throw new RtError("evalNumberType is not defined");
    }

    evalBooleanType(node: BooleanType, ctx: InterpreterContext): RtObject {
        throw new RtError("evalBooleanType is not defined");
    }

    evalEuroType(node: EuroType, ctx: InterpreterContext): RtObject {
        throw new RtError("evalEuroType is not defined");
    }

    evalTypeRef(node: TypeRef, ctx: InterpreterContext): RtObject {
        throw new RtError("evalTypeRef is not defined");
    }

    evalInsuranceTheme(node: InsuranceTheme, ctx: InterpreterContext): RtObject {
        throw new RtError("evalInsuranceTheme is not defined");
    }

    evalPremiumDays(node: PremiumDays, ctx: InterpreterContext): RtObject {
        throw new RtError("evalPremiumDays is not defined");
    }

    evalPart(node: Part, ctx: InterpreterContext): RtObject {
        throw new RtError("evalPart is not defined");
    }

    evalProduct(node: Product, ctx: InterpreterContext): RtObject {
        throw new RtError("evalProduct is not defined");
    }
}
