// Generated by the Freon Language Generator.
import { Box, BoxUtil, FreBoxProvider, FreProjectionHandler, FreNodeReference, BoxFactory } from "@freon4dsl/core";

import { Flow, Topic } from "../../language/gen/index.js";

import { EducationEnvironment } from "../../config/gen/EducationEnvironment.js";

/**
 * This class implements the box provider for a single node of type Flow.
 * The box provider is able to create the (tree of) boxes for the node, based
 * on the projections that are currently selected by the user.
 * The top of the tree of boxes is always a box of type ElementBox, which is
 * a box that will never be rendered itself, only its content will. Thus, we
 * have a stable entry in the complete box tree for every FreNode node.
 */
export class FlowBoxProvider extends FreBoxProvider {
    constructor(mainHandler: FreProjectionHandler) {
        super(mainHandler);
        this.knownBoxProjections = ["default"];
        this.knownTableProjections = ["default"];
        this.conceptName = "Flow";
    }

    protected getContent(projectionName: string): Box {
        // console.log("GET CONTENT " + this._node?.freId() + ' ' +  this._node?.freLanguageConcept() + ' ' + projectionName);
        // see if we need to use a custom projection
        if (!this.knownBoxProjections.includes(projectionName) && !this.knownTableProjections.includes(projectionName)) {
            const BOX: Box = this.mainHandler.executeCustomProjection(this._node, projectionName);
            if (!!BOX) {
                // found one, so return it
                return BOX;
            }
        } else {
            // select the box to return based on the projectionName
            if (projectionName === "default") {
                return this.getDefault();
            }
        }
        // in all other cases, return the default
        return this.getDefault();
    }

    private getDefault(): Box {
        return BoxFactory.verticalLayout(this._node as Flow, "Flow-overall", "", [
            BoxFactory.horizontalLayout(
                this._node as Flow,
                "Flow-hlist-line-0",
                "",
                [
                    BoxUtil.textBox(this._node as Flow, "name"),
                    BoxUtil.labelBox(this._node as Flow, "for topic", "top-1-line-0-item-1"),
                    BoxUtil.referenceBox(
                        this._node as Flow,
                        "topic",
                        (selected: string) => {
                            (this._node as Flow).topic = FreNodeReference.create<Topic>(selected, "Topic");
                        },
                        EducationEnvironment.getInstance().scoper,
                    ),
                ],
                { selectable: false },
            ),
            BoxUtil.emptyLineBox(this._node as Flow, "Flow-empty-line-1"),
            BoxUtil.verticalPartListBox(this._node as Flow, (this._node as Flow).rules, "rules", null, this.mainHandler),
        ]);
    }
}
