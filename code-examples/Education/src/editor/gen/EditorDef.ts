// Generated by the Freon Language Generator.
import { FreLanguage, FreProjectionHandler, FreBoxProvider, BoxUtil, FreTableHeaderInfo } from "@freon4dsl/core";
import { freonConfiguration } from "../../config/FreonConfiguration.js";
import {
    FlowRule,
    PageTransition,
    GradeList,
    GradeScore,
    QuestionReference,
    NrOfCorrectAnswers,
    NumberLiteralExpression,
    AndExpression,
    OrExpression,
    LessOrEqualsExpression,
    GreaterOrEqualsExpression,
    LessThenExpression,
    GreaterThenExpression,
    EqualsExpression,
    Theory,
    Line,
    Video,
    WorkSheet,
    ExamplePage,
    InDepthMaterial,
    Question,
    SimpleNumber,
    Fraction,
    Scenario,
    Step,
} from "../../language/gen/index.js";
import {
    FlowRuleBoxProvider,
    PageTransitionBoxProvider,
    GradeListBoxProvider,
    GradeScoreBoxProvider,
    QuestionReferenceBoxProvider,
    NrOfCorrectAnswersBoxProvider,
    NumberLiteralExpressionBoxProvider,
    AndExpressionBoxProvider,
    OrExpressionBoxProvider,
    LessOrEqualsExpressionBoxProvider,
    GreaterOrEqualsExpressionBoxProvider,
    LessThenExpressionBoxProvider,
    GreaterThenExpressionBoxProvider,
    EqualsExpressionBoxProvider,
    TheoryBoxProvider,
    LineBoxProvider,
    VideoBoxProvider,
    WorkSheetBoxProvider,
    ExamplePageBoxProvider,
    InDepthMaterialBoxProvider,
    QuestionBoxProvider,
    SimpleNumberBoxProvider,
    FractionBoxProvider,
    ScenarioBoxProvider,
    StepBoxProvider,
    FlowBoxProvider,
    TopicBoxProvider,
    TestBoxProvider,
} from "../../editor/gen/index.js";

const map = new Map([
    // the main map
    [
        // Concept has special projection for (one of) its parts
        "FlowRule",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "rules_as_table",
                new Map([
                    ["name", ""], // special projection
                    ["description", ""], // special projection
                    ["page", ""], // special projection
                    ["transitions", "__TABLE__"], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["description", ""], // special projection
                    ["page", ""], // special projection
                    ["transitions", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "PageTransition",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["condition", ""], // special projection
                    ["toPage", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "tableRowFor_rules_as_table",
                new Map([
                    ["condition", ""], // special projection
                    ["toPage", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "GradeList",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["list", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "GradeScore",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["expr", ""], // special projection
                    ["grade", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "QuestionReference",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["question", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "NumberLiteralExpression",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["value", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Page",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                ]),
            ],
            [
                // Projection has special projection for some part
                "footing",
                new Map([
                    ["questions", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Theory",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["content", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Line",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["content", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Video",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["url", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "ExamplePage",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["content", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "InDepthMaterial",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["content", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Question",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["content", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "SimpleNumber",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["value", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Fraction",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["numerator", ""], // special projection
                    ["denominator", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Scenario",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["description", ""], // special projection
                    ["steps", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Step",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["fromPage", ""], // special projection
                    ["expectedPage", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Flow",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["topic", ""], // special projection
                    ["rules", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Topic",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["description", ""], // special projection
                    ["pages", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Test",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["scenarios", ""], // special projection
                    ["topic", ""], // special projection
                    ["flow", ""], // special projection
                ]),
            ],
        ]),
    ],
]);

/**
 * Adds all known projection groups to the root projection.
 * @param handler
 */
export function initializeProjections(handler: FreProjectionHandler) {
    handler.addProjection("Brackets");
    handler.addProjection("rules_as_table");
    handler.addProjection("footing");
    for (const p of freonConfiguration.customProjection) {
        handler.addCustomProjection(p);
    }
    handler.initConceptToPropertyProjection(map);
    handler.initProviderConstructors(
        new Map<string, () => FreBoxProvider>([
            [
                "FlowRule",
                () => {
                    return new FlowRuleBoxProvider(handler);
                },
            ],
            [
                "PageTransition",
                () => {
                    return new PageTransitionBoxProvider(handler);
                },
            ],
            [
                "GradeList",
                () => {
                    return new GradeListBoxProvider(handler);
                },
            ],
            [
                "GradeScore",
                () => {
                    return new GradeScoreBoxProvider(handler);
                },
            ],
            [
                "QuestionReference",
                () => {
                    return new QuestionReferenceBoxProvider(handler);
                },
            ],
            [
                "NrOfCorrectAnswers",
                () => {
                    return new NrOfCorrectAnswersBoxProvider(handler);
                },
            ],
            [
                "NumberLiteralExpression",
                () => {
                    return new NumberLiteralExpressionBoxProvider(handler);
                },
            ],
            [
                "AndExpression",
                () => {
                    return new AndExpressionBoxProvider(handler);
                },
            ],
            [
                "OrExpression",
                () => {
                    return new OrExpressionBoxProvider(handler);
                },
            ],
            [
                "LessOrEqualsExpression",
                () => {
                    return new LessOrEqualsExpressionBoxProvider(handler);
                },
            ],
            [
                "GreaterOrEqualsExpression",
                () => {
                    return new GreaterOrEqualsExpressionBoxProvider(handler);
                },
            ],
            [
                "LessThenExpression",
                () => {
                    return new LessThenExpressionBoxProvider(handler);
                },
            ],
            [
                "GreaterThenExpression",
                () => {
                    return new GreaterThenExpressionBoxProvider(handler);
                },
            ],
            [
                "EqualsExpression",
                () => {
                    return new EqualsExpressionBoxProvider(handler);
                },
            ],
            [
                "Theory",
                () => {
                    return new TheoryBoxProvider(handler);
                },
            ],
            [
                "Line",
                () => {
                    return new LineBoxProvider(handler);
                },
            ],
            [
                "Video",
                () => {
                    return new VideoBoxProvider(handler);
                },
            ],
            [
                "WorkSheet",
                () => {
                    return new WorkSheetBoxProvider(handler);
                },
            ],
            [
                "ExamplePage",
                () => {
                    return new ExamplePageBoxProvider(handler);
                },
            ],
            [
                "InDepthMaterial",
                () => {
                    return new InDepthMaterialBoxProvider(handler);
                },
            ],
            [
                "Question",
                () => {
                    return new QuestionBoxProvider(handler);
                },
            ],
            [
                "SimpleNumber",
                () => {
                    return new SimpleNumberBoxProvider(handler);
                },
            ],
            [
                "Fraction",
                () => {
                    return new FractionBoxProvider(handler);
                },
            ],
            [
                "Scenario",
                () => {
                    return new ScenarioBoxProvider(handler);
                },
            ],
            [
                "Step",
                () => {
                    return new StepBoxProvider(handler);
                },
            ],
            [
                "Flow",
                () => {
                    return new FlowBoxProvider(handler);
                },
            ],
            [
                "Topic",
                () => {
                    return new TopicBoxProvider(handler);
                },
            ],
            [
                "Test",
                () => {
                    return new TestBoxProvider(handler);
                },
            ],
        ]),
    );
    handler.initTableHeaders([new FreTableHeaderInfo("PageTransition", "tableRowFor_rules_as_table", ["Condition", "Goto Page"])]);
}

/**
 * Adds trigger and reference shortcut info to the in-memory representation of structure of the language metamodel.
 */
export function initializeEditorDef() {
    FreLanguage.getInstance().concept("FlowRule").trigger = "FlowRule";
    FreLanguage.getInstance().concept("PageTransition").trigger = "PageTransition";
    FreLanguage.getInstance().concept("GradeList").trigger = "GradeList";
    FreLanguage.getInstance().concept("GradeScore").trigger = "GradeScore";
    FreLanguage.getInstance().concept("QuestionReference").trigger = "QuestionReference";
    FreLanguage.getInstance().concept("NrOfCorrectAnswers").trigger = "NrOfCorrectAnswers";
    FreLanguage.getInstance().concept("NumberLiteralExpression").trigger = "NumberLiteralExpression";
    FreLanguage.getInstance().concept("AndExpression").trigger = "AndExpression";
    FreLanguage.getInstance().concept("OrExpression").trigger = "OrExpression";
    FreLanguage.getInstance().concept("LessOrEqualsExpression").trigger = "LessOrEqualsExpression";
    FreLanguage.getInstance().concept("GreaterOrEqualsExpression").trigger = "GreaterOrEqualsExpression";
    FreLanguage.getInstance().concept("LessThenExpression").trigger = "LessThenExpression";
    FreLanguage.getInstance().concept("GreaterThenExpression").trigger = "GreaterThenExpression";
    FreLanguage.getInstance().concept("EqualsExpression").trigger = "EqualsExpression";
    FreLanguage.getInstance().concept("Theory").trigger = "Theory";
    FreLanguage.getInstance().concept("Line").trigger = "Line";
    FreLanguage.getInstance().concept("Video").trigger = "Video";
    FreLanguage.getInstance().concept("WorkSheet").trigger = "WorkSheet";
    FreLanguage.getInstance().concept("ExamplePage").trigger = "ExamplePage";
    FreLanguage.getInstance().concept("InDepthMaterial").trigger = "InDepthMaterial";
    FreLanguage.getInstance().concept("Question").trigger = "Question";
    FreLanguage.getInstance().concept("SimpleNumber").trigger = "SimpleNumber";
    FreLanguage.getInstance().concept("Fraction").trigger = "Fraction";
    FreLanguage.getInstance().concept("Scenario").trigger = "Scenario";
    FreLanguage.getInstance().concept("Step").trigger = "Step";

    const conceptProjectionToPropertyProjection = new Map();
}
