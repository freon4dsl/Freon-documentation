// Generated by the Freon Language Generator.
import * as Keys from "@freon4dsl/core";
import {
    AFTER_BINARY_OPERATOR,
    BEFORE_BINARY_OPERATOR,
    Box,
    MetaKey,
    FreCombinedActions,
    FreCreateBinaryExpressionAction,
    FreCaret,
    FreCustomAction,
    FreEditor,
    FreNode,
    FreBinaryExpression,
    FreKey,
    FreLogger,
    FreTriggerType,
    ActionBox,
    OptionalBox,
    FreNodeReference,
    LEFT_MOST,
    RIGHT_MOST,
} from "@freon4dsl/core";

import {
    Entity,
    AttributeType,
    MockEnumeration,
    AbsExpression,
    MultiplyExpression,
    EntityFunction,
    AttributeWithLimitedType,
    Text,
    Text2,
    Text3,
    Text4,
    AttributeWithEntityType,
    Variable,
    EntityExpression,
    AppliedFeature,
    AttributeRef,
    VariableRef,
    LiteralExpression,
    StringLiteralExpression,
    NumberLiteralExpression,
    BooleanLiteralExpression,
    BinaryExpression,
    PlusExpression,
    DivideExpression,
    AndExpression,
    OrExpression,
    ComparisonExpression,
    LessThenExpression,
    GreaterThenExpression,
    EqualsExpression,
    FunctionCallExpression,
    IfExpression,
    BaseType,
    Type,
    SomeOtherModelUnit,
    EntityModelUnit,
} from "../../language/gen/index.js";

/**
 * This module implements the actions available to the user in the editor.
 * These are the default actions. They are merged with the default and
 * custom editor parts in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */
export const BINARY_EXPRESSION_CREATORS: FreCreateBinaryExpressionAction[] = [
    FreCreateBinaryExpressionAction.create({
        trigger: "*",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: FreTriggerType, editor: FreEditor) => {
            const parent = box.node;
            const newExpression = new MultiplyExpression();
            parent[(box as ActionBox).propertyName] = newExpression;
            return newExpression;
        },
    }),
    FreCreateBinaryExpressionAction.create({
        trigger: "+",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: FreTriggerType, editor: FreEditor) => {
            const parent = box.node;
            const newExpression = new PlusExpression();
            parent[(box as ActionBox).propertyName] = newExpression;
            return newExpression;
        },
    }),
    FreCreateBinaryExpressionAction.create({
        trigger: "/",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: FreTriggerType, editor: FreEditor) => {
            const parent = box.node;
            const newExpression = new DivideExpression();
            parent[(box as ActionBox).propertyName] = newExpression;
            return newExpression;
        },
    }),
    FreCreateBinaryExpressionAction.create({
        trigger: "AndExpression",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: FreTriggerType, editor: FreEditor) => {
            const parent = box.node;
            const newExpression = new AndExpression();
            parent[(box as ActionBox).propertyName] = newExpression;
            return newExpression;
        },
    }),
    FreCreateBinaryExpressionAction.create({
        trigger: "or",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: FreTriggerType, editor: FreEditor) => {
            const parent = box.node;
            const newExpression = new OrExpression();
            parent[(box as ActionBox).propertyName] = newExpression;
            return newExpression;
        },
    }),
    FreCreateBinaryExpressionAction.create({
        trigger: "<",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: FreTriggerType, editor: FreEditor) => {
            const parent = box.node;
            const newExpression = new LessThenExpression();
            parent[(box as ActionBox).propertyName] = newExpression;
            return newExpression;
        },
    }),
    FreCreateBinaryExpressionAction.create({
        trigger: "GreaterThenExpression",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: FreTriggerType, editor: FreEditor) => {
            const parent = box.node;
            const newExpression = new GreaterThenExpression();
            parent[(box as ActionBox).propertyName] = newExpression;
            return newExpression;
        },
    }),
    FreCreateBinaryExpressionAction.create({
        trigger: "EqualsExpression",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: FreTriggerType, editor: FreEditor) => {
            const parent = box.node;
            const newExpression = new EqualsExpression();
            parent[(box as ActionBox).propertyName] = newExpression;
            return newExpression;
        },
    }),
];

export const CUSTOM_ACTIONS: FreCustomAction[] = [
    FreCustomAction.create({
        trigger: "baseEntity",
        activeInBoxRoles: ["optional-baseEntity"],
        action: (box: Box, trigger: FreTriggerType, ed: FreEditor): FreNode | null => {
            (box.parent as OptionalBox).mustShow = true;
            return box.node;
        },
        boxRoleToSelect: "Entity-baseEntity-referencebox",
    }),
    FreCustomAction.create({
        trigger: "appliedfeature",
        activeInBoxRoles: ["optional-appliedfeature"],
        action: (box: Box, trigger: FreTriggerType, ed: FreEditor): FreNode | null => {
            (box.parent as OptionalBox).mustShow = true;
            return box.node;
        },
        boxRoleToSelect: "AbsExpression-appliedfeature",
    }),
    FreCustomAction.create({
        trigger: "appliedfeature",
        activeInBoxRoles: ["optional-appliedfeature"],
        action: (box: Box, trigger: FreTriggerType, ed: FreEditor): FreNode | null => {
            (box.parent as OptionalBox).mustShow = true;
            return box.node;
        },
        boxRoleToSelect: "AttributeRef-appliedfeature",
    }),
    FreCustomAction.create({
        trigger: "appliedfeature",
        activeInBoxRoles: ["optional-appliedfeature"],
        action: (box: Box, trigger: FreTriggerType, ed: FreEditor): FreNode | null => {
            (box.parent as OptionalBox).mustShow = true;
            return box.node;
        },
        boxRoleToSelect: "VariableRef-appliedfeature",
    }),
    FreCustomAction.create({
        trigger: "appliedfeature",
        activeInBoxRoles: ["optional-appliedfeature"],
        action: (box: Box, trigger: FreTriggerType, ed: FreEditor): FreNode | null => {
            (box.parent as OptionalBox).mustShow = true;
            return box.node;
        },
        boxRoleToSelect: "StringLiteralExpression-appliedfeature",
    }),
    FreCustomAction.create({
        trigger: "appliedfeature",
        activeInBoxRoles: ["optional-appliedfeature"],
        action: (box: Box, trigger: FreTriggerType, ed: FreEditor): FreNode | null => {
            (box.parent as OptionalBox).mustShow = true;
            return box.node;
        },
        boxRoleToSelect: "NumberLiteralExpression-appliedfeature",
    }),
    FreCustomAction.create({
        trigger: "appliedfeature",
        activeInBoxRoles: ["optional-appliedfeature"],
        action: (box: Box, trigger: FreTriggerType, ed: FreEditor): FreNode | null => {
            (box.parent as OptionalBox).mustShow = true;
            return box.node;
        },
        boxRoleToSelect: "BooleanLiteralExpression-appliedfeature",
    }),
    FreCustomAction.create({
        trigger: "appliedfeature",
        activeInBoxRoles: ["optional-appliedfeature"],
        action: (box: Box, trigger: FreTriggerType, ed: FreEditor): FreNode | null => {
            (box.parent as OptionalBox).mustShow = true;
            return box.node;
        },
        boxRoleToSelect: "FunctionCallExpression-appliedfeature",
    }),
    FreCustomAction.create({
        trigger: "appliedfeature",
        activeInBoxRoles: ["optional-appliedfeature"],
        action: (box: Box, trigger: FreTriggerType, ed: FreEditor): FreNode | null => {
            (box.parent as OptionalBox).mustShow = true;
            return box.node;
        },
        boxRoleToSelect: "IfExpression-appliedfeature",
    }),
];
