// Generated by the Freon Language Generator.
import { net } from "net.akehurst.language-agl-processor";
import SPPTBranch = net.akehurst.language.api.sppt.SPPTBranch;
import { SomeOtherModelUnit, Entity } from "../../language/gen/index.js";
import { EntityModelSyntaxAnalyser } from "./EntityModelSyntaxAnalyser.js";
import { FreNodeReference } from "@freon4dsl/core";

export class SomeOtherModelUnitSyntaxAnalyserPart {
    mainAnalyser: EntityModelSyntaxAnalyser;

    constructor(mainAnalyser: EntityModelSyntaxAnalyser) {
        this.mainAnalyser = mainAnalyser;
    }

    /**
     * Method to transform branches that match the following rule:
     * SomeOtherModelUnit = 'SomeOtherModelUnit' identifier '\{'
     *	 'somePart' Entity
     *	 '}' ;
     * @param branch
     * @private
     */
    public transformSomeOtherModelUnit(branch: SPPTBranch): SomeOtherModelUnit {
        // console.log('transformSomeOtherModelUnit called: ' + branch.name);
        let __name: string;
        let __somePart: Entity;
        const children = this.mainAnalyser.getChildren(branch);
        __name = this.mainAnalyser.transformSharedPackedParseTreeNode(children[1]); // RHSPrimEntry
        __somePart = this.mainAnalyser.transformSharedPackedParseTreeNode(children[4]); // RHSPartEntry

        return SomeOtherModelUnit.create({
            name: __name,
            somePart: __somePart,
            parseLocation: this.mainAnalyser.location(branch),
        });
    }
}
