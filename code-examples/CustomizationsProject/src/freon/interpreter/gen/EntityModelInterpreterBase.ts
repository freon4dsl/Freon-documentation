// Generated by the Freon Language Generator.
// Generated my Freon, will be overwritten with every generation.
import { InterpreterContext, RtObject, RtError } from "@freon4dsl/core";
import {
    Entity,
    AttributeType,
    MockEnumeration,
    AbsExpression,
    MultiplyExpression,
    EntityFunction,
    AttributeWithLimitedType,
    Text,
    Text2,
    Text3,
    Text4,
    AttributeWithEntityType,
    Variable,
    EntityExpression,
    AppliedFeature,
    AttributeRef,
    VariableRef,
    LiteralExpression,
    StringLiteralExpression,
    NumberLiteralExpression,
    BooleanLiteralExpression,
    BinaryExpression,
    PlusExpression,
    DivideExpression,
    AndExpression,
    OrExpression,
    ComparisonExpression,
    LessThenExpression,
    GreaterThenExpression,
    EqualsExpression,
    FunctionCallExpression,
    IfExpression,
    SomeOtherModelUnit,
    EntityModelUnit,
} from "../../language/gen/index.js";

/**
 * The base class containing all interpreter functions that should be defined.
 * All functions throw an error when called.
 */
export class EntityModelInterpreterBase {
    constructor() {}

    evalEntity(node: Entity, ctx: InterpreterContext): RtObject {
        throw new RtError("evalEntity is not defined");
    }

    evalAttributeType(node: AttributeType, ctx: InterpreterContext): RtObject {
        throw new RtError("evalAttributeType is not defined");
    }

    evalMockEnumeration(node: MockEnumeration, ctx: InterpreterContext): RtObject {
        throw new RtError("evalMockEnumeration is not defined");
    }

    evalAbsExpression(node: AbsExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalAbsExpression is not defined");
    }

    evalMultiplyExpression(node: MultiplyExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalMultiplyExpression is not defined");
    }

    evalEntityFunction(node: EntityFunction, ctx: InterpreterContext): RtObject {
        throw new RtError("evalEntityFunction is not defined");
    }

    evalAttributeWithLimitedType(node: AttributeWithLimitedType, ctx: InterpreterContext): RtObject {
        throw new RtError("evalAttributeWithLimitedType is not defined");
    }

    evalText(node: Text, ctx: InterpreterContext): RtObject {
        throw new RtError("evalText is not defined");
    }

    evalText2(node: Text2, ctx: InterpreterContext): RtObject {
        throw new RtError("evalText2 is not defined");
    }

    evalText3(node: Text3, ctx: InterpreterContext): RtObject {
        throw new RtError("evalText3 is not defined");
    }

    evalText4(node: Text4, ctx: InterpreterContext): RtObject {
        throw new RtError("evalText4 is not defined");
    }

    evalAttributeWithEntityType(node: AttributeWithEntityType, ctx: InterpreterContext): RtObject {
        throw new RtError("evalAttributeWithEntityType is not defined");
    }

    evalVariable(node: Variable, ctx: InterpreterContext): RtObject {
        throw new RtError("evalVariable is not defined");
    }

    evalEntityExpression(node: EntityExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalEntityExpression is not defined");
    }

    evalAppliedFeature(node: AppliedFeature, ctx: InterpreterContext): RtObject {
        throw new RtError("evalAppliedFeature is not defined");
    }

    evalAttributeRef(node: AttributeRef, ctx: InterpreterContext): RtObject {
        throw new RtError("evalAttributeRef is not defined");
    }

    evalVariableRef(node: VariableRef, ctx: InterpreterContext): RtObject {
        throw new RtError("evalVariableRef is not defined");
    }

    evalLiteralExpression(node: LiteralExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalLiteralExpression is not defined");
    }

    evalStringLiteralExpression(node: StringLiteralExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalStringLiteralExpression is not defined");
    }

    evalNumberLiteralExpression(node: NumberLiteralExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalNumberLiteralExpression is not defined");
    }

    evalBooleanLiteralExpression(node: BooleanLiteralExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalBooleanLiteralExpression is not defined");
    }

    evalBinaryExpression(node: BinaryExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalBinaryExpression is not defined");
    }

    evalPlusExpression(node: PlusExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalPlusExpression is not defined");
    }

    evalDivideExpression(node: DivideExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalDivideExpression is not defined");
    }

    evalAndExpression(node: AndExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalAndExpression is not defined");
    }

    evalOrExpression(node: OrExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalOrExpression is not defined");
    }

    evalComparisonExpression(node: ComparisonExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalComparisonExpression is not defined");
    }

    evalLessThenExpression(node: LessThenExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalLessThenExpression is not defined");
    }

    evalGreaterThenExpression(node: GreaterThenExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalGreaterThenExpression is not defined");
    }

    evalEqualsExpression(node: EqualsExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalEqualsExpression is not defined");
    }

    evalFunctionCallExpression(node: FunctionCallExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalFunctionCallExpression is not defined");
    }

    evalIfExpression(node: IfExpression, ctx: InterpreterContext): RtObject {
        throw new RtError("evalIfExpression is not defined");
    }

    evalSomeOtherModelUnit(node: SomeOtherModelUnit, ctx: InterpreterContext): RtObject {
        throw new RtError("evalSomeOtherModelUnit is not defined");
    }

    evalEntityModelUnit(node: EntityModelUnit, ctx: InterpreterContext): RtObject {
        throw new RtError("evalEntityModelUnit is not defined");
    }
}
