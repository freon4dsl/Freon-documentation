// Generated by the Freon Language Generator.
import { FreNamedNode, FreParseLocation } from "@freon4dsl/core";
import { NamedType } from "./internal.js";

import { runInAction } from "mobx";
/**
 * Class PredefinedType is the implementation of the limited concept with the same name in the language definition file.
 * It uses mobx decorators to enable parts of the language environment, e.g. the editor, to react
 * to any changes in the state of its properties.
 */
export class PredefinedType extends NamedType implements FreNamedNode {
    /**
     * A convenience method that creates an instance of this class
     * based on the properties defined in 'data'.
     * @param data partial object
     */
    static create(data: Partial<PredefinedType>): PredefinedType {
        const result = new PredefinedType(data.$id);
        if (!!data.name) {
            result.name = data.name;
        }
        if (!!data.parseLocation) {
            result.parseLocation = data.parseLocation;
        }
        return result;
    }

    static NUMBER: PredefinedType; // implementation of instance NUMBER
    static BOOLEAN: PredefinedType; // implementation of instance BOOLEAN
    static STRING: PredefinedType; // implementation of instance STRING
    static ANY: PredefinedType; // implementation of instance ANY
    static NULL: PredefinedType; // implementation of instance NULL
    static $freANY: PredefinedType; // default predefined instance

    readonly $typename: string = "PredefinedType"; // holds the metatype in the form of a string

    parseLocation: FreParseLocation; // if relevant, the location of this element within the source from which it is parsed

    constructor(id?: string) {
        super(id);
    }

    /**
     * Returns the metatype of this instance in the form of a string.
     */
    freLanguageConcept(): string {
        return this.$typename;
    }

    /**
     * Returns true if this instance is a model concept.
     */
    freIsModel(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a model unit.
     */
    freIsUnit(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is an expression concept.
     */
    freIsExpression(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a binary expression concept.
     */
    freIsBinaryExpression(): boolean {
        return false;
    }
    /**
     * A convenience method that copies this instance into a new object.
     */
    copy(): PredefinedType {
        const result = new PredefinedType();
        if (!!this.name) {
            result.name = this.name;
        }
        return result;
    }
    /**
     * Matches a partial instance of this class to this object
     * based on the properties defined in the partial.
     * @param toBeMatched
     */
    public match(toBeMatched: Partial<PredefinedType>): boolean {
        let result: boolean = super.match(toBeMatched);

        return result;
    }
}

// Because of mobx we need to generate the initialisations outside of the class,
// otherwise the state of properties with primitive type will not be kept correctly.
runInAction(() => {
    PredefinedType.NUMBER = PredefinedType.create({
        name: "NUMBER",
    });
    PredefinedType.BOOLEAN = PredefinedType.create({
        name: "BOOLEAN",
    });
    PredefinedType.STRING = PredefinedType.create({
        name: "STRING",
    });
    PredefinedType.ANY = PredefinedType.create({
        name: "ANY",
    });
    PredefinedType.NULL = PredefinedType.create({
        name: "NULL",
    });
});
