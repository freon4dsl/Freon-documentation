// Generated by the Freon Language Generator.
// Generated by Freon LanguageTemplate
import {
    FreLanguage,
    FreLanguageModel,
    FreLanguageModelUnit,
    FreLanguageProperty,
    FreLanguageConcept,
    FreLanguageInterface,
    FreNodeReference,
} from "@freon4dsl/core";

// Import as MyLanguage to avoid naming conflicts in generated constructors
import * as MyLanguage from "./internal.js";
import { XXStdlib } from "../../stdlib/gen/XXStdlib.js";

/**
 * Creates an in-memory representation of structure of the language metamodel, used in e.g. the (de)serializer.
 */
export function initializeLanguage() {
    FreLanguage.getInstance().name = "XX";
    FreLanguage.getInstance().id = "";
    FreLanguage.getInstance().addModel(describeXX());
    FreLanguage.getInstance().addUnit(describeXXunit());
    FreLanguage.getInstance().addConcept(describeExpWithType());
    FreLanguage.getInstance().addConcept(describeTypeUsage());
    FreLanguage.getInstance().addConcept(describeTypeRef());
    FreLanguage.getInstance().addConcept(describeTypeDecl());
    FreLanguage.getInstance().addConcept(describeNamedType());
    FreLanguage.getInstance().addConcept(describePredefinedType());
    FreLanguage.getInstance().addConcept(describeGenericType());
    FreLanguage.getInstance().addConcept(describeGenericKind());
    FreLanguage.getInstance().addConcept(describeUnitOfMeasurement());
    FreLanguage.getInstance().addConcept(describeUnitKind());
    FreLanguage.getInstance().addConcept(describeExp());
    FreLanguage.getInstance().addConcept(describeNumberLiteral());
    FreLanguage.getInstance().addConcept(describeStringLiteral());
    FreLanguage.getInstance().addConcept(describeBooleanLiteral());
    FreLanguage.getInstance().addConcept(describeUnitLiteral());
    FreLanguage.getInstance().addConcept(describeGenericLiteral());
    FreLanguage.getInstance().addConcept(describeNamedExp());
    FreLanguage.getInstance().addConcept(describePlusExp());
    FreLanguage.getInstance().addInterface(describeTopType());
    FreLanguage.getInstance().addReferenceCreator((name: string, type: string) => {
        return !!name ? FreNodeReference.create(name, type) : null;
    });
    FreLanguage.getInstance().stdLib = XXStdlib.getInstance();
}

function describeXX(): FreLanguageModel {
    const model: FreLanguageModel = {
        typeName: "XX",
        id: "-default-id-XX",
        key: "-default-key-XX",
        isNamespace: true,
        language: "-default-key-projectY",
        constructor: (id?: string) => {
            return new MyLanguage.XX(id);
        },
        creator: (data: Partial<MyLanguage.XX>) => {
            return MyLanguage.XX.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
    };
    model.properties.set("name", {
        name: "name",
        id: "TODO_set-correct-id",
        key: "TODO_set-correct-key",
        type: "string",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "primitive",
    });
    model.properties.set("units", {
        name: "units",
        id: "-default-id-XX-units",
        key: "-default-key-XX-units",
        type: "XXunit",
        isList: true,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "part",
    });

    return model;
}

function describeXXunit(): FreLanguageModelUnit {
    const modelunit: FreLanguageModelUnit = {
        typeName: "XXunit",
        id: "-default-id-XXunit",
        key: "-default-key-XXunit",
        isNamedElement: true,
        language: "-default-key-projectY",
        fileExtension: "expr",
        subConceptNames: [], // Nothing yet, but may change in the future
        constructor: (id?: string) => {
            return new MyLanguage.XXunit(id);
        },
        creator: (data: Partial<MyLanguage.XXunit>) => {
            return MyLanguage.XXunit.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        trigger: "XXunit",
    };
    modelunit.properties.set("name", {
        name: "name",
        id: "TODO_set-correct-id",
        key: "TODO_set-correct-key",
        type: "string",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "primitive",
    });
    modelunit.properties.set("lines", {
        name: "lines",
        id: "-default-id-XXunit-lines",
        key: "-default-key-XXunit-lines",
        type: "ExpWithType",
        isList: true,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "part",
    });

    return modelunit;
}

function describeExpWithType(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "ExpWithType",
        id: "-default-id-ExpWithType",
        key: "-default-key-ExpWithType",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-projectY",
        isNamedElement: false,
        trigger: "ExpWithType",
        constructor: (id?: string) => {
            return new MyLanguage.ExpWithType(id);
        },
        creator: (data: Partial<MyLanguage.ExpWithType>) => {
            return MyLanguage.ExpWithType.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };

    concept.properties.set("expr", {
        name: "expr",
        id: "-default-id-ExpWithType-expr",
        key: "-default-key-ExpWithType-expr",
        type: "Exp",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "part",
    });
    concept.properties.set("type", {
        name: "type",
        id: "-default-id-ExpWithType-type",
        key: "-default-key-ExpWithType-type",
        type: "TypeUsage",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "part",
    });

    return concept;
}

function describeTypeUsage(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "TypeUsage",
        id: "-default-id-TypeUsage",
        key: "-default-key-TypeUsage",
        isAbstract: true,
        isPublic: false,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-projectY",
        isNamedElement: false,
        trigger: "TypeUsage",
        constructor: (id?: string) => {
            return null;
        },
        creator: (data: Partial<MyLanguage.TypeUsage>) => {
            return null;
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: ["TypeRef", "TypeDecl", "GenericType", "UnitOfMeasurement"],
    };

    return concept;
}

function describeTypeRef(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "TypeRef",
        id: "-default-id-TypeRef",
        key: "-default-key-TypeRef",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-projectY",
        isNamedElement: false,
        trigger: "TypeRef",
        constructor: (id?: string) => {
            return new MyLanguage.TypeRef(id);
        },
        creator: (data: Partial<MyLanguage.TypeRef>) => {
            return MyLanguage.TypeRef.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "TypeUsage",
        subConceptNames: [],
    };

    concept.properties.set("type", {
        name: "type",
        id: "-default-id-TypeRef-type",
        key: "-default-key-TypeRef-type",
        type: "NamedType",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "reference",
    });
    return concept;
}

function describeTypeDecl(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "TypeDecl",
        id: "-default-id-TypeDecl",
        key: "-default-key-TypeDecl",
        isAbstract: true,
        isPublic: false,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-projectY",
        isNamedElement: false,
        trigger: "TypeDecl",
        constructor: (id?: string) => {
            return null;
        },
        creator: (data: Partial<MyLanguage.TypeDecl>) => {
            return null;
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "TypeUsage",
        subConceptNames: ["GenericType", "UnitOfMeasurement"],
    };

    return concept;
}

function describeNamedType(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "NamedType",
        id: "-default-id-NamedType",
        key: "-default-key-NamedType",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-projectY",
        isNamedElement: true,
        trigger: "NamedType",
        constructor: (id?: string) => {
            return new MyLanguage.NamedType(id);
        },
        creator: (data: Partial<MyLanguage.NamedType>) => {
            return MyLanguage.NamedType.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: ["PredefinedType"],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-default-id-NamedType-name",
        key: "-default-key-NamedType-name",
        type: "string",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "primitive",
    });

    return concept;
}

function describePredefinedType(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "PredefinedType",
        id: "-default-id-PredefinedType",
        key: "-default-key-PredefinedType",
        isAbstract: false,
        isPublic: true,
        isLimited: true,
        instanceNames: ["NUMBER", "BOOLEAN", "STRING", "ANY", "NULL"],
        language: "-default-key-projectY",
        isNamedElement: true,
        trigger: "PredefinedType",
        constructor: (id?: string) => {
            return new MyLanguage.PredefinedType(id);
        },
        creator: (data: Partial<MyLanguage.PredefinedType>) => {
            return MyLanguage.PredefinedType.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "NamedType",
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-default-id-NamedType-name",
        key: "-default-key-NamedType-name",
        type: "string",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "primitive",
    });

    return concept;
}

function describeGenericType(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "GenericType",
        id: "-default-id-GenericType",
        key: "-default-key-GenericType",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-projectY",
        isNamedElement: false,
        trigger: "GenericType",
        constructor: (id?: string) => {
            return new MyLanguage.GenericType(id);
        },
        creator: (data: Partial<MyLanguage.GenericType>) => {
            return MyLanguage.GenericType.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "TypeDecl",
        subConceptNames: [],
    };

    concept.properties.set("baseType", {
        name: "baseType",
        id: "-default-id-GenericType-baseType",
        key: "-default-key-GenericType-baseType",
        type: "TypeUsage",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "part",
    });
    concept.properties.set("kind", {
        name: "kind",
        id: "-default-id-GenericType-kind",
        key: "-default-key-GenericType-kind",
        type: "GenericKind",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "reference",
    });
    return concept;
}

function describeGenericKind(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "GenericKind",
        id: "-default-id-GenericKind",
        key: "-default-key-GenericKind",
        isAbstract: false,
        isPublic: true,
        isLimited: true,
        instanceNames: ["Set", "Sequence", "Bag", "Collection"],
        language: "-default-key-projectY",
        isNamedElement: true,
        trigger: "GenericKind",
        constructor: (id?: string) => {
            return new MyLanguage.GenericKind(id);
        },
        creator: (data: Partial<MyLanguage.GenericKind>) => {
            return MyLanguage.GenericKind.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "TODO_set-correct-id",
        key: "TODO_set-correct-key",
        type: "string",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "primitive",
    });

    return concept;
}

function describeUnitOfMeasurement(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "UnitOfMeasurement",
        id: "-default-id-UnitOfMeasurement",
        key: "-default-key-UnitOfMeasurement",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-projectY",
        isNamedElement: false,
        trigger: "UnitOfMeasurement",
        constructor: (id?: string) => {
            return new MyLanguage.UnitOfMeasurement(id);
        },
        creator: (data: Partial<MyLanguage.UnitOfMeasurement>) => {
            return MyLanguage.UnitOfMeasurement.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "TypeDecl",
        subConceptNames: [],
    };

    concept.properties.set("baseType", {
        name: "baseType",
        id: "-default-id-UnitOfMeasurement-baseType",
        key: "-default-key-UnitOfMeasurement-baseType",
        type: "PredefinedType",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "reference",
    });
    concept.properties.set("unit", {
        name: "unit",
        id: "-default-id-UnitOfMeasurement-unit",
        key: "-default-key-UnitOfMeasurement-unit",
        type: "UnitKind",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "reference",
    });
    return concept;
}

function describeUnitKind(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "UnitKind",
        id: "-default-id-UnitKind",
        key: "-default-key-UnitKind",
        isAbstract: false,
        isPublic: true,
        isLimited: true,
        instanceNames: ["Meters", "Grams", "kWh", "Hours"],
        language: "-default-key-projectY",
        isNamedElement: true,
        trigger: "UnitKind",
        constructor: (id?: string) => {
            return new MyLanguage.UnitKind(id);
        },
        creator: (data: Partial<MyLanguage.UnitKind>) => {
            return MyLanguage.UnitKind.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "TODO_set-correct-id",
        key: "TODO_set-correct-key",
        type: "string",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "primitive",
    });

    return concept;
}

function describeExp(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "Exp",
        id: "-default-id-Exp",
        key: "-default-key-Exp",
        isAbstract: true,
        isPublic: false,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-projectY",
        isNamedElement: false,
        trigger: "Exp",
        constructor: (id?: string) => {
            return null;
        },
        creator: (data: Partial<MyLanguage.Exp>) => {
            return null;
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: ["NumberLiteral", "StringLiteral", "BooleanLiteral", "UnitLiteral", "GenericLiteral", "NamedExp", "PlusExp"],
    };

    return concept;
}

function describeNumberLiteral(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "NumberLiteral",
        id: "-default-id-NumberLiteral",
        key: "-default-key-NumberLiteral",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-projectY",
        isNamedElement: false,
        trigger: "NumberLiteral",
        constructor: (id?: string) => {
            return new MyLanguage.NumberLiteral(id);
        },
        creator: (data: Partial<MyLanguage.NumberLiteral>) => {
            return MyLanguage.NumberLiteral.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Exp",
        subConceptNames: [],
    };
    concept.properties.set("xx", {
        name: "xx",
        id: "-default-id-NumberLiteral-xx",
        key: "-default-key-NumberLiteral-xx",
        type: "number",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "primitive",
    });

    return concept;
}

function describeStringLiteral(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "StringLiteral",
        id: "-default-id-StringLiteral",
        key: "-default-key-StringLiteral",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-projectY",
        isNamedElement: false,
        trigger: "StringLiteral",
        constructor: (id?: string) => {
            return new MyLanguage.StringLiteral(id);
        },
        creator: (data: Partial<MyLanguage.StringLiteral>) => {
            return MyLanguage.StringLiteral.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Exp",
        subConceptNames: [],
    };
    concept.properties.set("xx", {
        name: "xx",
        id: "-default-id-StringLiteral-xx",
        key: "-default-key-StringLiteral-xx",
        type: "string",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "primitive",
    });

    return concept;
}

function describeBooleanLiteral(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "BooleanLiteral",
        id: "-default-id-BooleanLiteral",
        key: "-default-key-BooleanLiteral",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-projectY",
        isNamedElement: false,
        trigger: "BooleanLiteral",
        constructor: (id?: string) => {
            return new MyLanguage.BooleanLiteral(id);
        },
        creator: (data: Partial<MyLanguage.BooleanLiteral>) => {
            return MyLanguage.BooleanLiteral.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Exp",
        subConceptNames: [],
    };
    concept.properties.set("xx", {
        name: "xx",
        id: "-default-id-BooleanLiteral-xx",
        key: "-default-key-BooleanLiteral-xx",
        type: "boolean",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "primitive",
    });

    return concept;
}

function describeUnitLiteral(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "UnitLiteral",
        id: "-default-id-UnitLiteral",
        key: "-default-key-UnitLiteral",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-projectY",
        isNamedElement: false,
        trigger: "UnitLiteral",
        constructor: (id?: string) => {
            return new MyLanguage.UnitLiteral(id);
        },
        creator: (data: Partial<MyLanguage.UnitLiteral>) => {
            return MyLanguage.UnitLiteral.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Exp",
        subConceptNames: [],
    };

    concept.properties.set("inner", {
        name: "inner",
        id: "-default-id-UnitLiteral-inner",
        key: "-default-key-UnitLiteral-inner",
        type: "NumberLiteral",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "part",
    });
    concept.properties.set("unit", {
        name: "unit",
        id: "-default-id-UnitLiteral-unit",
        key: "-default-key-UnitLiteral-unit",
        type: "UnitKind",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "reference",
    });
    return concept;
}

function describeGenericLiteral(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "GenericLiteral",
        id: "-default-id-GenericLiteral",
        key: "-default-key-GenericLiteral",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-projectY",
        isNamedElement: false,
        trigger: "GenericLiteral",
        constructor: (id?: string) => {
            return new MyLanguage.GenericLiteral(id);
        },
        creator: (data: Partial<MyLanguage.GenericLiteral>) => {
            return MyLanguage.GenericLiteral.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Exp",
        subConceptNames: [],
    };

    concept.properties.set("content", {
        name: "content",
        id: "-default-id-GenericLiteral-content",
        key: "-default-key-GenericLiteral-content",
        type: "Exp",
        isList: true,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "part",
    });
    concept.properties.set("kind", {
        name: "kind",
        id: "-default-id-GenericLiteral-kind",
        key: "-default-key-GenericLiteral-kind",
        type: "GenericKind",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "reference",
    });
    return concept;
}

function describeNamedExp(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "NamedExp",
        id: "-default-id-NamedExp",
        key: "-default-key-NamedExp",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-projectY",
        isNamedElement: false,
        trigger: "NamedExp",
        constructor: (id?: string) => {
            return new MyLanguage.NamedExp(id);
        },
        creator: (data: Partial<MyLanguage.NamedExp>) => {
            return MyLanguage.NamedExp.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Exp",
        subConceptNames: [],
    };

    concept.properties.set("inner", {
        name: "inner",
        id: "-default-id-NamedExp-inner",
        key: "-default-key-NamedExp-inner",
        type: "Exp",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "part",
    });
    concept.properties.set("myType", {
        name: "myType",
        id: "-default-id-NamedExp-myType",
        key: "-default-key-NamedExp-myType",
        type: "NamedType",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "part",
    });

    return concept;
}

function describePlusExp(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "PlusExp",
        id: "-default-id-PlusExp",
        key: "-default-key-PlusExp",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-default-key-projectY",
        isNamedElement: false,
        trigger: "PlusExp",
        constructor: (id?: string) => {
            return new MyLanguage.PlusExp(id);
        },
        creator: (data: Partial<MyLanguage.PlusExp>) => {
            return MyLanguage.PlusExp.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Exp",
        subConceptNames: [],
    };

    concept.properties.set("left", {
        name: "left",
        id: "-default-id-PlusExp-left",
        key: "-default-key-PlusExp-left",
        type: "Exp",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "part",
    });
    concept.properties.set("right", {
        name: "right",
        id: "-default-id-PlusExp-right",
        key: "-default-key-PlusExp-right",
        type: "Exp",
        isList: false,
        isPublic: true,
        language: "-default-key-projectY",
        propertyKind: "part",
    });

    return concept;
}

function describeTopType(): FreLanguageInterface {
    const intface: FreLanguageInterface = {
        typeName: "TopType",
        id: "-default-id-TopType",
        key: "-default-key-TopType",
        isPublic: false,
        isNamedElement: false,
        properties: new Map<string, FreLanguageProperty>(),
        constructor: undefined,
        creator: undefined,
        language: "projectY",
        subConceptNames: ["NamedType", "PredefinedType"],
    };

    return intface;
}
