// Generated by the Freon Language Generator.
import {
    BooleanLiteral,
    Exp,
    ExpWithType,
    GenericKind,
    GenericLiteral,
    GenericType,
    NamedExp,
    NamedType,
    NumberLiteral,
    PlusExp,
    PredefinedType,
    StringLiteral,
    TypeDecl,
    TypeRef,
    TypeUsage,
    UnitKind,
    UnitLiteral,
    UnitOfMeasurement,
    XX,
    XXunit,
} from "../../language/gen/index.js";

/**
 * Interface XXWorker implements the extended visitor pattern of instances of language XX.
 * Class XXWalker implements the traversal of the model tree, classes that implement this interface
 * are responsible for the actual work being done on the nodes of the tree.
 * Every node is visited twice, once before the visit of its children, and once after this visit.
 */
export interface XXWorker {
    execBeforeXX(modelelement: XX): boolean;
    execAfterXX(modelelement: XX): boolean;

    execBeforeXXunit(modelelement: XXunit): boolean;
    execAfterXXunit(modelelement: XXunit): boolean;

    execBeforeExpWithType(modelelement: ExpWithType): boolean;
    execAfterExpWithType(modelelement: ExpWithType): boolean;

    execBeforeTypeUsage(modelelement: TypeUsage): boolean;
    execAfterTypeUsage(modelelement: TypeUsage): boolean;

    execBeforeTypeRef(modelelement: TypeRef): boolean;
    execAfterTypeRef(modelelement: TypeRef): boolean;

    execBeforeTypeDecl(modelelement: TypeDecl): boolean;
    execAfterTypeDecl(modelelement: TypeDecl): boolean;

    execBeforeNamedType(modelelement: NamedType): boolean;
    execAfterNamedType(modelelement: NamedType): boolean;

    execBeforePredefinedType(modelelement: PredefinedType): boolean;
    execAfterPredefinedType(modelelement: PredefinedType): boolean;

    execBeforeGenericType(modelelement: GenericType): boolean;
    execAfterGenericType(modelelement: GenericType): boolean;

    execBeforeGenericKind(modelelement: GenericKind): boolean;
    execAfterGenericKind(modelelement: GenericKind): boolean;

    execBeforeUnitOfMeasurement(modelelement: UnitOfMeasurement): boolean;
    execAfterUnitOfMeasurement(modelelement: UnitOfMeasurement): boolean;

    execBeforeUnitKind(modelelement: UnitKind): boolean;
    execAfterUnitKind(modelelement: UnitKind): boolean;

    execBeforeExp(modelelement: Exp): boolean;
    execAfterExp(modelelement: Exp): boolean;

    execBeforeNumberLiteral(modelelement: NumberLiteral): boolean;
    execAfterNumberLiteral(modelelement: NumberLiteral): boolean;

    execBeforeStringLiteral(modelelement: StringLiteral): boolean;
    execAfterStringLiteral(modelelement: StringLiteral): boolean;

    execBeforeBooleanLiteral(modelelement: BooleanLiteral): boolean;
    execAfterBooleanLiteral(modelelement: BooleanLiteral): boolean;

    execBeforeUnitLiteral(modelelement: UnitLiteral): boolean;
    execAfterUnitLiteral(modelelement: UnitLiteral): boolean;

    execBeforeGenericLiteral(modelelement: GenericLiteral): boolean;
    execAfterGenericLiteral(modelelement: GenericLiteral): boolean;

    execBeforeNamedExp(modelelement: NamedExp): boolean;
    execAfterNamedExp(modelelement: NamedExp): boolean;

    execBeforePlusExp(modelelement: PlusExp): boolean;
    execAfterPlusExp(modelelement: PlusExp): boolean;
}
