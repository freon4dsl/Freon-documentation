// Generated by the Freon Language Generator.
import {
    BinaryExpression,
    DivideExpression,
    Expression,
    ExpressionUnit,
    Expressions,
    Function,
    FunctionCallExpression,
    MinusExpression,
    MultiplyExpression,
    NumberLiteralExpression,
    Parameter,
    ParameterRef,
    PlusExpression,
    Type,
} from "../../language/gen/index.js";

/**
 * Interface ExpressionsWorker implements the extended visitor pattern of instances of language Expressions.
 * Class ExpressionsWalker implements the traversal of the model tree, classes that implement this interface
 * are responsible for the actual work being done on the nodes of the tree.
 * Every node is visited twice, once before the visit of its children, and once after this visit.
 */
export interface ExpressionsWorker {
    execBeforeExpressions(modelelement: Expressions): boolean;
    execAfterExpressions(modelelement: Expressions): boolean;

    execBeforeExpressionUnit(modelelement: ExpressionUnit): boolean;
    execAfterExpressionUnit(modelelement: ExpressionUnit): boolean;

    execBeforeType(modelelement: Type): boolean;
    execAfterType(modelelement: Type): boolean;

    execBeforeExpression(modelelement: Expression): boolean;
    execAfterExpression(modelelement: Expression): boolean;

    execBeforeNumberLiteralExpression(modelelement: NumberLiteralExpression): boolean;
    execAfterNumberLiteralExpression(modelelement: NumberLiteralExpression): boolean;

    execBeforeBinaryExpression(modelelement: BinaryExpression): boolean;
    execAfterBinaryExpression(modelelement: BinaryExpression): boolean;

    execBeforeMultiplyExpression(modelelement: MultiplyExpression): boolean;
    execAfterMultiplyExpression(modelelement: MultiplyExpression): boolean;

    execBeforePlusExpression(modelelement: PlusExpression): boolean;
    execAfterPlusExpression(modelelement: PlusExpression): boolean;

    execBeforeMinusExpression(modelelement: MinusExpression): boolean;
    execAfterMinusExpression(modelelement: MinusExpression): boolean;

    execBeforeDivideExpression(modelelement: DivideExpression): boolean;
    execAfterDivideExpression(modelelement: DivideExpression): boolean;

    execBeforeFunction(modelelement: Function): boolean;
    execAfterFunction(modelelement: Function): boolean;

    execBeforeParameter(modelelement: Parameter): boolean;
    execAfterParameter(modelelement: Parameter): boolean;

    execBeforeParameterRef(modelelement: ParameterRef): boolean;
    execAfterParameterRef(modelelement: ParameterRef): boolean;

    execBeforeFunctionCallExpression(modelelement: FunctionCallExpression): boolean;
    execAfterFunctionCallExpression(modelelement: FunctionCallExpression): boolean;
}
