// Generated by the Freon Language Generator.
import {
    FreEditor,
    FreEnvironment,
    FreReader,
    FreCompositeTyper,
    FreValidator,
    FreStdlib,
    FreWriter,
    FreInterpreter,
    FreScoperComposite,
    FreLanguageEnvironment,
    FreProjectionHandler,
} from "@freon4dsl/core";
import { ExpressionsActions, initializeEditorDef, initializeProjections } from "../../editor/gen/index.js";
import { initializeScoperDef } from "../../scoper/gen/index.js";
import { initializeTypers } from "../../typer/gen/index.js";
import { ExpressionsValidator } from "../../validator/gen/index.js";
import { ExpressionsStdlib } from "../../stdlib/gen/ExpressionsStdlib.js";
import { ExpressionsModelUnitWriter } from "../../writer/gen/ExpressionsModelUnitWriter.js";
import { ExpressionsModelUnitReader } from "../../reader/gen/ExpressionsModelUnitReader.js";
import { MainExpressionsInterpreter } from "../../interpreter/MainExpressionsInterpreter.js";
import { Expressions, ExpressionUnit, initializeLanguage } from "../../language/gen/index.js";

/**
 * Class ExpressionsEnvironment provides the link between all parts of the language environment.
 * It holds the currently used editor, scoper, typer, etc, thus providing an entry point for
 * for instance, the editor to find the right scoper, or for the validator to find the typer
 * to use.
 * This class uses the singleton pattern to ensure that only one instance of the class is present.
 */
export class ExpressionsEnvironment implements FreEnvironment {
    private static environment: FreEnvironment; // the only instance of this class

    /**
     * This method implements the singleton pattern
     */
    public static getInstance(): FreEnvironment {
        if (this.environment === undefined || this.environment === null) {
            this.environment = new ExpressionsEnvironment();
            FreLanguageEnvironment.setInstance(this.environment);
        }
        return this.environment;
    }

    /**
     * A private constructor, as demanded by the singleton pattern.
     */
    private constructor() {
        const actions = new ExpressionsActions();
        const myComposite = new FreProjectionHandler();
        this.editor = new FreEditor(myComposite, this, actions);
        initializeLanguage();
        initializeProjections(myComposite);
        initializeEditorDef();
        initializeScoperDef(this.scoper);
        initializeTypers(this.typer);
        this.projectionHandler = myComposite;
    }

    /**
     * Returns a new model with name 'modelName'.
     *
     * @param modelName
     */
    newModel(modelName: string): Expressions {
        const model = new Expressions();
        model.name = modelName;
        return model;
    }

    // the parts of the language environment
    editor: FreEditor;
    scoper: FreScoperComposite = new FreScoperComposite("main");
    typer: FreCompositeTyper = new FreCompositeTyper("main");
    validator: FreValidator = new ExpressionsValidator();
    writer: FreWriter = new ExpressionsModelUnitWriter();
    reader: FreReader = new ExpressionsModelUnitReader();
    interpreter: FreInterpreter = new MainExpressionsInterpreter();
    projectionHandler: FreProjectionHandler;
    languageName: string = "Expressions";
    fileExtensions: Map<string, string> = new Map([["ExpressionUnit", "exp"]]);
}
