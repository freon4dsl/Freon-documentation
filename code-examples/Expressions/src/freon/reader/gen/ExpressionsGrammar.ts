// Generated by the Freon Language Generator.
// This file contains the input to the AGL parser generator
// (see https://https://github.com/dhakehurst/net.akehurst.language).
// The grammar in this file is read by ExpressionsModelUnitReader

export const ExpressionsGrammarStr = `
namespace ExpressionsLanguage
grammar ExpressionsGrammar {

// rules for "ExpressionUnit"
ExpressionUnit = 'Functions:'
	 Function*
	 'Expressions'
	 Expression* ;

Function = 'function' identifier '(' Parameter* '):' Type
	 '\{'
	 Expression
	 '}' ;

NumberLiteralExpression = numberLiteral ;

ParameterRef = __fre_reference ;

FunctionCallExpression = __fre_reference '(' Expression* ')' ;

Parameter = 'var' identifier ':' Type ;

Expression = ParameterRef 
    | FunctionCallExpression 
    | NumberLiteralExpression 
    | __fre_binary_Expression ;

__fre_binary_Expression = [Expression / __fre_binary_operator]2+ ;
leaf __fre_binary_operator = '*' | '+' | '-' | '/' ;

Type = 'String'
	| 'Integer'
	| 'Boolean'
	| 'ANY' ;

// common rules

__fre_reference = [ identifier / '.' ]+ ;

// white space and comments
skip WHITE_SPACE = "\\s+" ;
skip SINGLE_LINE_COMMENT = "//[^\\r\\n]*" ;
skip MULTI_LINE_COMMENT = "/\\*[^*]*\\*+(?:[^*/][^*]*\\*+)*/" ;

// the predefined basic types
leaf identifier          = "[a-zA-Z_][a-zA-Z0-9_]*" ;
/* see https://stackoverflow.com/questions/37032620/regex-for-matching-a-string-literal-in-java */
leaf stringLiteral       = '"' "[^\\"\\\\]*(\\\\.[^\\"\\\\]*)*" '"' ;
leaf numberLiteral       = "[0-9]+";
leaf booleanLiteral      = 'false' | 'true';

}`; // end of grammar
