// Generated by the Freon Language Generator.
import { FreLanguage, FreProjectionHandler, FreBoxProvider } from "@freon4dsl/core";
import { freonConfiguration } from "../../config/FreonConfiguration.js";
import {
    NumberLiteralExpression,
    MultiplyExpression,
    PlusExpression,
    MinusExpression,
    DivideExpression,
    Function,
    Parameter,
    ParameterRef,
    FunctionCallExpression,
} from "../../language/gen/index.js";
import {
    NumberLiteralExpressionBoxProvider,
    MultiplyExpressionBoxProvider,
    PlusExpressionBoxProvider,
    MinusExpressionBoxProvider,
    DivideExpressionBoxProvider,
    FunctionBoxProvider,
    ParameterBoxProvider,
    ParameterRefBoxProvider,
    FunctionCallExpressionBoxProvider,
    ExpressionUnitBoxProvider,
} from "../../editor/gen/index.js";

const map = new Map([
    // the main map
    [
        // Concept has special projection for (one of) its parts
        "NumberLiteralExpression",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["value", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Function",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["parameters", ""], // special projection
                    ["declaredType", ""], // special projection
                    ["body", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "Parameter",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["declaredType", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "ParameterRef",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["parameter", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "FunctionCallExpression",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["calledFunction", ""], // special projection
                    ["arguments", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "ExpressionUnit",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["functions", ""], // special projection
                    ["expressions", ""], // special projection
                ]),
            ],
        ]),
    ],
]);

/**
 * Adds all known projection groups to the root projection.
 * @param handler
 */
export function initializeProjections(handler: FreProjectionHandler) {
    handler.addProjection("Brackets");

    for (const p of freonConfiguration.customProjection) {
        handler.addCustomProjection(p);
    }
    handler.initConceptToPropertyProjection(map);
    handler.initProviderConstructors(
        new Map<string, () => FreBoxProvider>([
            [
                "NumberLiteralExpression",
                () => {
                    return new NumberLiteralExpressionBoxProvider(handler);
                },
            ],
            [
                "MultiplyExpression",
                () => {
                    return new MultiplyExpressionBoxProvider(handler);
                },
            ],
            [
                "PlusExpression",
                () => {
                    return new PlusExpressionBoxProvider(handler);
                },
            ],
            [
                "MinusExpression",
                () => {
                    return new MinusExpressionBoxProvider(handler);
                },
            ],
            [
                "DivideExpression",
                () => {
                    return new DivideExpressionBoxProvider(handler);
                },
            ],
            [
                "Function",
                () => {
                    return new FunctionBoxProvider(handler);
                },
            ],
            [
                "Parameter",
                () => {
                    return new ParameterBoxProvider(handler);
                },
            ],
            [
                "ParameterRef",
                () => {
                    return new ParameterRefBoxProvider(handler);
                },
            ],
            [
                "FunctionCallExpression",
                () => {
                    return new FunctionCallExpressionBoxProvider(handler);
                },
            ],
            [
                "ExpressionUnit",
                () => {
                    return new ExpressionUnitBoxProvider(handler);
                },
            ],
        ]),
    );
    handler.initTableHeaders([]);
}

/**
 * Adds trigger and reference shortcut info to the in-memory representation of structure of the language metamodel.
 */
export function initializeEditorDef() {
    FreLanguage.getInstance().concept("NumberLiteralExpression").trigger = "NumberLiteralExpression";
    FreLanguage.getInstance().concept("MultiplyExpression").trigger = "*";
    FreLanguage.getInstance().concept("PlusExpression").trigger = "+";
    FreLanguage.getInstance().concept("MinusExpression").trigger = "-";
    FreLanguage.getInstance().concept("DivideExpression").trigger = "/";
    FreLanguage.getInstance().concept("Function").trigger = "Function";
    FreLanguage.getInstance().concept("Parameter").trigger = "Parameter";
    FreLanguage.getInstance().concept("ParameterRef").trigger = "ParameterRef";
    FreLanguage.getInstance().concept("FunctionCallExpression").trigger = "FunctionCallExpression";
    FreLanguage.getInstance().concept("ParameterRef").referenceShortcut = {
        propertyName: "parameter",
        conceptName: "Parameter",
    };
    FreLanguage.getInstance().concept("FunctionCallExpression").referenceShortcut = {
        propertyName: "calledFunction",
        conceptName: "Function",
    };

    const conceptProjectionToPropertyProjection = new Map();
}
