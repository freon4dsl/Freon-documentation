typer

// What are types?
istype { NamedType }

type TT_GenericType {
    base: PiType;
    kind: GenericKind;
}

// Which concepts have a type?
hastype { DocuExpression, DocuType }

// Which type does an expression have?
TypeRef {
    infertype self.type;
}
FunctionCallExpression {
    infertype self.funcDefinition.declaredType;
}
InsurancePartRef {
    infertype InsurancePartType:InsurancePart;
}
RiskAdjustmentRef {
    infertype PercentageType:Percentage;
}
ParameterRef {
    infertype self.parameter.declaredType;
}
RiskRef {
    infertype PercentageType:Percentage;
}
PayoutRef {
    infertype EuroType:EUR;
}
PlusExpression {
    infertype commonSuperType(self.left, self.right);
}
MinusExpression {
    infertype commonSuperType(self.left, self.right);
}
DivideExpression {
    infertype commonSuperType(self.left, self.right);
}
MultiplyExpression {
    infertype commonSuperType(self.left, self.right);
}
EuroLiteral {
    infertype EuroType:EUR;
}
NumberLiteral {
    infertype NumberType:Number;
}
PercentageLiteral {
    infertype PercentageType:Percentage;
}
GenericLiteral {
    // Set{ 12, 14, 16, 18 }
    infertype TT_GenericType {
        base: typeof(self.content),
        kind: self.kind
    };
}

GenericTypeDecl {
    infertype TT_GenericType {
        base: typeof(self.baseType),
        kind: self.kind
    };
}

// Which types are 'equal' to each other?
NamedType {
    equalsto aa:NamedType where {
            aa.name equalsto self.name;
        };
}

// //////////////////////////////////////////
//  Extras to show in the documentation   //
// //////////////////////////////////////////

TT_GenericType {
    equalsto x:TT_GenericType where {
            x.base equalsto self.base;
            x.kind equalsto self.kind;
        };
    conformsto other:TT_GenericType where {
            // both conditions must be true
            self.base conformsto other.base;
            self.kind conformsto other.kind;
        };
}

GenericKind {
    Set conformsto Collection;
    Sequence conformsto Collection;
    Bag conformsto Collection;
}
