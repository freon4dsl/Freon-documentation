// Generated by the Freon Language Generator.
import {
    FreEditor,
    FreEnvironment,
    FreReader,
    FreCompositeTyper,
    FreValidator,
    FreStdlib,
    FreWriter,
    FreInterpreter,
    FreScoperComposite,
    FreLanguageEnvironment,
    FreProjectionHandler
} from "@freon4dsl/core";
import { DocuProjectActions, initializeEditorDef, initializeProjections } from "../../editor/gen";
import { initializeScoperDef } from "../../scoper/gen/DocuProjectScoperDef";
import { initializeTypers } from "../../typer/gen/DocuProjectTyperDef";
import { DocuProjectValidator } from "../../validator/gen/DocuProjectValidator";
import { DocuProjectStdlib } from "../../stdlib/gen/DocuProjectStdlib";
import { DocuProjectModelUnitWriter } from "../../writer/gen/DocuProjectModelUnitWriter";
import { DocuProjectModelUnitReader } from "../../reader/gen/DocuProjectModelUnitReader";
import { MainDocuProjectInterpreter } from "../../interpreter/MainDocuProjectInterpreter";
import { InsuranceModel, Part, initializeLanguage } from "../../language/gen";

/**
 * Class DocuProjectEnvironment provides the link between all parts of the language environment.
 * It holds the currently used editor, scoper, typer, etc, thus providing an entry point for
 * for instance, the editor to find the right scoper, or for the validator to find the typer
 * to use.
 * This class uses the singleton pattern to ensure that only one instance of the class is present.
 */
export class DocuProjectEnvironment implements FreEnvironment {
    private static environment: FreEnvironment; // the only instance of this class

    /**
     * This method implements the singleton pattern
     */
    public static getInstance(): FreEnvironment {
        if (this.environment === undefined || this.environment === null) {
            this.environment = new DocuProjectEnvironment();
            FreLanguageEnvironment.setInstance(this.environment);
        }
        return this.environment;
    }

    /**
     * A private constructor, as demanded by the singleton pattern.
     */
    private constructor() {
        const actions = new DocuProjectActions();
        const myComposite = new FreProjectionHandler();
        this.editor = new FreEditor(myComposite, this, actions);
        initializeLanguage();
        initializeProjections(myComposite);
        initializeEditorDef();
        initializeScoperDef(this.scoper);
        initializeTypers(this.typer);
    }

    /**
     * Returns a new model with name 'modelName'.
     *
     * @param modelName
     */
    newModel(modelName: string): InsuranceModel {
        const model = new InsuranceModel();
        model.name = modelName;
        return model;
    }

    // the parts of the language environment
    editor: FreEditor;
    scoper: FreScoperComposite = new FreScoperComposite("main");
    typer: FreCompositeTyper = new FreCompositeTyper("main");
    stdlib: FreStdlib = DocuProjectStdlib.getInstance();
    validator: FreValidator = new DocuProjectValidator();
    writer: FreWriter = new DocuProjectModelUnitWriter();
    reader: FreReader = new DocuProjectModelUnitReader();
    interpreter: FreInterpreter = new MainDocuProjectInterpreter();
    languageName: string = "DocuProject";
    fileExtensions: Map<string, string> = new Map([
        ["Part", "base"],
        ["Product", "prod"]
    ]);
}
