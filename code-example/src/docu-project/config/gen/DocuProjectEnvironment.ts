// Generated by the ProjectIt Language Generator.
import {
    PiEditor,
    PiCompositeProjection,
    PiEnvironment,
    PiReader,
    PiScoper,
    PiTyper,
    PiValidator,
    PiStdlib,
    PiWriter,
    LanguageEnvironment
} from "@projectit/core";
import { DocuProjectActions, initializeEditorDef, initializeProjections } from "../../editor/gen";
import { DocuProjectScoper } from "../../scoper/gen/DocuProjectScoper";
import { initializeScoperDef } from "../../scoper/gen/DocuProjectScoperDef";
import { DocuProjectTyper } from "../../typer/gen/DocuProjectTyper";
import { DocuProjectValidator } from "../../validator/gen/DocuProjectValidator";
import { DocuProjectStdlib } from "../../stdlib/gen/DocuProjectStdlib";
import { DocuProjectModelUnitWriter } from "../../writer/gen/DocuProjectModelUnitWriter";
import { DocuProjectModelUnitReader } from "../../reader/gen/DocuProjectModelUnitReader";
import { InsuranceModel, Part, initializeLanguage } from "../../language/gen";

import { editorStyle } from "../../editor/styles/CustomStyles";

/**
 * Class DocuProjectEnvironment provides the link between all parts of the language environment.
 * It holds the currently used editor, scoper, typer, etc, thus providing an entry point for
 * for instance, the editor to find the right scoper, or for the validator to find the typer
 * to use.
 * This class uses the singleton pattern to ensure that only one instance of the class is present.
 */
export class DocuProjectEnvironment implements PiEnvironment {
    private static environment: PiEnvironment; // the only instance of this class

    /**
     * This method implements the singleton pattern
     */
    public static getInstance(): PiEnvironment {
        if (this.environment === undefined || this.environment === null) {
            this.environment = new DocuProjectEnvironment();
            LanguageEnvironment.setInstance(this.environment);
        }
        return this.environment;
    }

    /**
     * A private constructor, as demanded by the singleton pattern.
     */
    private constructor() {
        const actions = new DocuProjectActions();
        const rootProjection = new PiCompositeProjection("root");
        initializeProjections(rootProjection);
        this.editor = new PiEditor(rootProjection, actions);
        this.editor.style = editorStyle;
        this.editor.rootElement = null;
        this.editor.environment = this;
        initializeLanguage();
        initializeEditorDef();
        initializeScoperDef();
    }

    /**
     * Returns a new model with name 'modelName'.
     *
     * @param modelName
     */
    newModel(modelName: string): InsuranceModel {
        const model = new InsuranceModel();
        model.name = modelName;
        return model;
    }

    // the parts of the language environment
    editor: PiEditor;
    scoper: PiScoper = new DocuProjectScoper();
    typer: PiTyper = new DocuProjectTyper();
    stdlib: PiStdlib = DocuProjectStdlib.getInstance();
    validator: PiValidator = new DocuProjectValidator();
    writer: PiWriter = new DocuProjectModelUnitWriter();
    reader: PiReader = new DocuProjectModelUnitReader();
    languageName: string = "DocuProject";
    unitNames: string[] = ["Part", "Product"];
    fileExtensions: Map<string, string> = new Map([
        ["Part", "base"],
        ["Product", "prod"]
    ]);
}
