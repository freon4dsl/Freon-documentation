language Entity

// tag::model[]
model EntityModel {
    name: identifier;
    units: EntityModelUnit[];
    extraUnit: SomeOtherModelUnit;
}
//end::model[]

modelunit SomeOtherModelUnit {
    public name: identifier;
    public somePart: Entity;
}
//tag::optionalprop[]
interface BaseType {
    name: identifier;
    baseInterface_attr?: number;
}
//end::optionalprop[]
// tag::interface[]
interface Type base BaseType {
    simpleprop: string;
    int_attrs: AttributeWithLimitedType[];
    int_functions: EntityFunction[];
    reference baseInterface: Entity;
}
// end::interface[]
// tag::concept[]
concept Entity implements Type {
    attributes: AttributeWithLimitedType[];
    entAttributes: AttributeWithEntityType[];
    functions: EntityFunction[];
    reference baseEntity: Entity;
}
// end::concept[]
// tag::limited[]
limited AttributeType implements BaseType {
    // if the 'name' property was not provided, it would have been generated
    name: identifier;
    extra: number;
    String = { name: "String", "extra": 199}
    // notations 'name:' and '"name":' are both correct
    Integer = { "name": "Integer", "extra": 240261}
    Boolean = { name: "Boolean", "extra": 5479}
    // the following instance gets the name "ANY"
    ANY = { "extra": 456}
}

limited MockEnumeration { EnumValue1; EnumValue2; EnumValue3; }
// end::limited[]
expression AbsExpression base EntityExpression {
    expr: EntityExpression;
}
// tag::expression[]
binary expression MultiplyExpression base BinaryExpression {
    priority = 8;
}
// end::expression[]

// tag::rootconcept[]
// tag::partprop[]
modelunit EntityModelUnit {
// end::partprop[]
    public name: identifier;
// tag::partprop[]
    functions: EntityFunction[];
    entities: Entity[];
}
// end::partprop[]
// end::rootconcept[]
// tag::simpleprop[]
concept EntityFunction {
    name: identifier;
    aliases: string[];
// end::simpleprop[]
    reference declaredType : Type;
    expression: EntityExpression;
    parameters: Variable[];
// tag::simpleprop[]
}
// end::simpleprop[]
// tag::referenceprop[]
concept AttributeWithLimitedType {
    reference declaredType: AttributeType;
// end::referenceprop[]
    name: identifier;
// tag::referenceprop[]
}
// end::referenceprop[]


concept Text {} // only defined to show that literal text can be part of a projection

concept AttributeWithEntityType {
    reference declaredType: Entity;
    name: identifier;
}

concept Variable {
    name: identifier;
    reference declaredType: Entity;
}

abstract expression EntityExpression {
    appliedfeature?: AppliedFeature;
}

abstract concept AppliedFeature {
    appliedfeature?: AppliedFeature;
}

concept AttributeRef base AppliedFeature {
    reference attribute: AttributeWithEntityType;
}

expression VariableRef base EntityExpression {
    reference variable: Variable;
}

abstract expression LiteralExpression base EntityExpression {}

expression StringLiteralExpression base LiteralExpression {
    value: string;
}

expression NumberLiteralExpression base LiteralExpression {
    value: string; // TODO should be changed to type number
}

expression BooleanLiteralExpression base LiteralExpression {
    value: string; // TODO should be changed to type boolean
}

abstract binary expression BinaryExpression base EntityExpression {
    left: EntityExpression;
    right: EntityExpression;
}

binary expression PlusExpression base BinaryExpression {
    priority = 4;
}

binary expression DivideExpression base BinaryExpression {
    priority = 8;
}

binary expression AndExpression base BinaryExpression {
    priority = 1;
}

binary expression OrExpression base BinaryExpression {
    priority = 1;
}

abstract binary expression ComparisonExpression base BinaryExpression {
}

binary expression LessThenExpression base ComparisonExpression {
    priority = 10;
}

binary expression GreaterThenExpression base ComparisonExpression {
    priority = 10;
}

binary expression EqualsExpression base ComparisonExpression {
    priority = 10;
}

expression FunctionCallExpression base EntityExpression {
    reference functionDefinition: EntityFunction;
}

expression IfExpression base EntityExpression {
    condition: EntityExpression;
    whenTrue: EntityExpression;
    whenFalse: EntityExpression;
}

