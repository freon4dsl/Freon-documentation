editor StartEditor for language Entity

Text {
    @projection
        [This is
                literal text
          that is projected in the

                editor
        for every concept of type Text.]
}
NumberLiteralExpression {
    @projection normal
        [${self.value}]
}
StringLiteralExpression {
// in this projection the indentation is not taken into account
    @projection normal
        [
        '${self.value}'
        ]
    @trigger "'"
}
AttributeWithLimitedType {
// in this projection the indentation is taken into account
    @projection showAll
        [
    ${self.name} : ${self.declaredType}
 ]
}
IfExpression {
    @projection normal
        [
        if (${self.condition}) then
                  ${self.whenTrue}
        else
           ${self.whenFalse}
        endif
        ]

    @trigger "if"
    @symbol "if"
}
/*
IfExpression {
    @projection normal
        [
        (${ self.condition } ? ${ self.whenTrue } : ${self.whenFalse} )
        ]

    @trigger "if"
    @symbol "if"
}
*/
PlusExpression {
    @symbol "+"
}

MultiplyExpression {
    @symbol "*"
}

DivideExpression {
    @symbol "/"
}
LessThenExpression {
    @symbol "<"
}
OrExpression {
    @symbol "or"
}

Entity {
    @projection normal [
        [?${self.isCompany @keyword[COMPANY]}]
        entity ${self.name} [? base ${self.baseEntity}] {
            ${self.attributes @vertical }
            ${self.functions @vertical }
        }
    ]
    @trigger "entity"
}

/*
FunctionCallExpression {
    @projection normal
        [
        ${self.name} (  )
        ]
    @trigger "function2"
}
*/

FunctionCallExpression {
    @projection showAll
        [+
        CALL ${self.functionDefinition} (  )
        ]
    @trigger "function"
}
EntityModelUnit {
    @projection showAll
        [
        model ${self.name} {
        entities:
            ${self.entities
                @vertical
                @terminator [ && ]
            }
        model wide functions:
            ${self.functions @horizontal @separator [; ] }
        }
        ]
}
