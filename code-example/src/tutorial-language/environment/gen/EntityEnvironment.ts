// Generated by the ProjectIt Language Generator.
import { projectitConfiguration } from "../../projectit/ProjectitConfiguration";
import {
    PiEditor,
    PiCompositeProjection,
    PiEnvironment,
    PiReader,
    PiScoper,
    PiTyper,
    PiValidator,
    PiStdlib,
    PiWriter
} from "@projectit/core";
import { EntityActions, EntityProjectionDefault } from "../../editor/gen";
import { EntityScoper } from "../../scoper/gen/EntityScoper";
import { EntityTyper } from "../../typer/gen/EntityTyper";
import { EntityValidator } from "../../validator/gen/EntityValidator";
import { EntityStdlib } from "../../stdlib/gen/EntityStdlib";
import { EntityModelUnitWriter } from "../../writer/gen/EntityModelUnitWriter";
import { EntityModelUnitReader } from "../../reader/gen/EntityModelUnitReader";
import { EntityModel, SomeOtherModelUnit } from "../../language/gen";

import { initializeLanguage } from "../../language/gen";

/**
 * Class EntityEnvironment provides the link between all parts of the language environment.
 * It holds the currently used editor, scoper, typer, etc, thus providing an entry point for
 * for instance, the editor to find the right scoper, or for the validator to find the typer
 * to use.
 * This class uses the singleton pattern to ensure that only one instance of the class is present.
 */
export class EntityEnvironment implements PiEnvironment {
    private static environment: PiEnvironment; // the only instance of this class

    /**
     * This method implements the singleton pattern
     */
    public static getInstance(): PiEnvironment {
        if (this.environment === undefined || this.environment === null) {
            this.environment = new EntityEnvironment();
        }
        return this.environment;
    }

    /**
     * A private constructor, as demanded by the singleton pattern.
     */
    private constructor() {
        const actions = new EntityActions();
        const rootProjection = new PiCompositeProjection("root");
        for (const p of projectitConfiguration.customProjection) {
            rootProjection.addProjection(p);
        }
        const projectionDefault = new EntityProjectionDefault("default");
        rootProjection.addProjection(projectionDefault);
        this.editor = new PiEditor(rootProjection, actions);
        this.editor.rootElement = null;
        this.editor.environment = this;
        initializeLanguage();
    }

    /**
     * Returns a new model with name 'modelName'.
     *
     * @param modelName
     */
    newModel(modelName: string): EntityModel {
        const model = new EntityModel();
        model.name = modelName;
        return model;
    }

    // the parts of the language environment
    editor: PiEditor;
    scoper: PiScoper = new EntityScoper();
    typer: PiTyper = new EntityTyper();
    stdlib: PiStdlib = EntityStdlib.getInstance();
    validator: PiValidator = new EntityValidator();
    writer: PiWriter = new EntityModelUnitWriter();
    reader: PiReader = new EntityModelUnitReader();
    languageName: string = "Entity";
    unitNames: string[] = ["EntityModelUnit", "SomeOtherModelUnit"];
    fileExtensions: Map<string, string> = new Map([
        ["EntityModelUnit", ".ent"],
        ["SomeOtherModelUnit", ".som"]
    ]);
}
