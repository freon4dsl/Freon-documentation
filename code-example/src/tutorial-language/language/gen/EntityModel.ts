// Generated by the ProjectIt Language Generator.
import { model, MobxModelElementImpl, observablelistpart, observablepart, PiModel, Language, PiUtils } from "@projectit/core";
import { EntityModelUnitType, EntityModelUnit, SomeOtherModelUnit, EntityMetaType } from "./internal";

/**
 * Class EntityModel is the implementation of the model with the same name in the language definition file.
 * It uses mobx decorators to enable parts of the language environment, e.g. the editor, to react
 * to changes in the state of its properties.
 */
@model
export class EntityModel extends MobxModelElementImpl implements PiModel {
    /**
     * A convenience method that creates an instance of this class
     * based on the properties defined in 'data'.
     * @param data
     */
    static create(data: Partial<EntityModel>): EntityModel {
        const result = new EntityModel();
        if (!!data.name) {
            result.name = data.name;
        }
        if (!!data.units) {
            data.units.forEach(x => result.units.push(x));
        }
        if (!!data.extraUnit) {
            result.extraUnit = data.extraUnit;
        }
        return result;
    }

    readonly $typename: EntityMetaType = "EntityModel"; // holds the metatype in the form of a string
    $id: string; // a unique identifier
    name: string = ""; // implementation of name
    units: EntityModelUnit[]; // implementation of part 'units'
    extraUnit: SomeOtherModelUnit; // implementation of part 'extraUnit'

    constructor(id?: string) {
        super();
        if (!!id) {
            this.$id = id;
        } else {
            this.$id = PiUtils.ID(); // uuid.v4();
        }
        // both 'observablepart' and 'observablelistpart' change the get and set of an attribute
        // such that the parent-part relationship is consistently maintained,
        // and make sure the part is observable
        observablelistpart(this, "units");
        observablepart(this, "extraUnit");
    }

    /**
     * Returns the metatype of this instance in the form of a string.
     */
    piLanguageConcept(): EntityMetaType {
        return this.$typename;
    }

    /**
     * Returns the unique identifier of this instance.
     */
    piId(): string {
        return this.$id;
    }

    /**
     * Returns true if this instance is a model concept.
     */
    piIsModel(): boolean {
        return true;
    }

    /**
     * Returns true if this instance is a model unit.
     */
    piIsUnit(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is an expression concept.
     */
    piIsExpression(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a binary expression concept.
     */
    piIsBinaryExpression(): boolean {
        return false;
    }

    /**
     * A convenience method that finds a unit of this model based on its name and 'metatype'.
     * @param name
     * @param metatype
     */
    findUnit(name: string, metatype?: EntityMetaType): EntityModelUnitType {
        let result: EntityModelUnitType = null;
        result = this.units.find(mod => mod.name === name);
        if (this.extraUnit.name === name) result = this.extraUnit;
        if (!!result && !!metatype) {
            const myMetatype = result.piLanguageConcept();
            if (myMetatype === metatype || Language.getInstance().subConcepts(metatype).includes(myMetatype)) {
                return result;
            }
        } else {
            return result;
        }
        return null;
    }

    /**
     * Replaces a model unit by a new one. Used for swapping between complete units and unit public interfaces.
     * Returns false if the replacement could not be done, e.g. because 'oldUnit' is not a child of this object.
     * @param oldUnit
     * @param newUnit
     */
    replaceUnit(oldUnit: EntityModelUnitType, newUnit: EntityModelUnitType): boolean {
        if (oldUnit.piLanguageConcept() !== newUnit.piLanguageConcept()) {
            return false;
        }
        if (oldUnit.piContainer().container !== this) {
            return false;
        }
        // we must store the interface in the same place as the old unit, which info is held in PiContainer()
        if (oldUnit.piLanguageConcept() === "EntityModelUnit" && oldUnit.piContainer().propertyName === "units") {
            const index = this.units.indexOf(oldUnit as EntityModelUnit);
            this.units.splice(index, 1, newUnit as EntityModelUnit);
        } else if (oldUnit.piLanguageConcept() === "SomeOtherModelUnit" && oldUnit.piContainer().propertyName === "extraUnit") {
            this.extraUnit = newUnit as SomeOtherModelUnit;
        } else {
            return false;
        }
        return true;
    }

    /**
     * Adds a model unit. Returns false if anything goes wrong.
     *
     * @param newUnit
     */
    addUnit(newUnit: EntityModelUnitType): boolean {
        if (!!newUnit) {
            const myMetatype = newUnit.piLanguageConcept();
            // TODO this depends on the fact the only one part of the model concept has the same type, should we allow differently???
            switch (myMetatype) {
                case "EntityModelUnit": {
                    this.units.push(newUnit as EntityModelUnit);
                    return true;
                }
                case "SomeOtherModelUnit": {
                    this.extraUnit = newUnit as SomeOtherModelUnit;
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Removes a model unit. Returns false if anything goes wrong.
     *
     * @param oldUnit
     */
    removeUnit(oldUnit: EntityModelUnitType): boolean {
        if (!!oldUnit) {
            const myMetatype = oldUnit.piLanguageConcept();
            switch (myMetatype) {
                case "EntityModelUnit": {
                    this.units.splice(this.units.indexOf(oldUnit as EntityModelUnit), 1);
                    return true;
                }
                case "SomeOtherModelUnit": {
                    this.extraUnit = null;
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Returns an empty model unit of type 'unitTypeName' within 'model'.
     *
     * @param model
     * @param unitTypeName
     */
    newUnit(typename: EntityMetaType): EntityModelUnitType {
        switch (typename) {
            case "EntityModelUnit": {
                const unit: EntityModelUnit = new EntityModelUnit();
                this.units.push(unit as EntityModelUnit);
                return unit;
            }
            case "SomeOtherModelUnit": {
                const unit: SomeOtherModelUnit = new SomeOtherModelUnit();
                this.extraUnit = unit as SomeOtherModelUnit;
                return unit;
            }
        }
        return null;
    }

    /**
     * Returns a list of model units.
     */
    getUnits(): EntityModelUnitType[] {
        let result: EntityModelUnitType[] = [];
        result = result.concat(this.units);
        result.push(this.extraUnit);
        return result;
    }

    /**
     * Returns a list of model units of type 'type'.
     */
    getUnitsForType(type: string): EntityModelUnitType[] {
        switch (type) {
            case "EntityModelUnit": {
                return this.units;
            }
            case "SomeOtherModelUnit": {
                let result: EntityModelUnitType[] = [];
                result.push(this.extraUnit);
                return result;
            }
        }
        return [];
    }
}
