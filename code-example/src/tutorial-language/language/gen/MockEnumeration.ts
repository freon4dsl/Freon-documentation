// Generated by the ProjectIt Language Generator.
import { observable, makeObservable } from "mobx";
import { model, MobxModelElementImpl, PiNamedElement, PiUtils } from "@projectit/core";
import { EntityMetaType } from "./internal";

/**
 * Class MockEnumeration is the implementation of the limited concept with the same name in the language definition file.
 * It uses mobx decorators to enable parts of the language environment, e.g. the editor, to react
 * to changes in the state of its properties.
 */
@model
export class MockEnumeration extends MobxModelElementImpl implements PiNamedElement {
    /**
     * A convenience method that creates an instance of this class
     * based on the properties defined in 'data'.
     * @param data
     */
    static create(data: Partial<MockEnumeration>): MockEnumeration {
        const result = new MockEnumeration();
        if (!!data.name) {
            result.name = data.name;
        }
        return result;
    }

    static EnumValue1: MockEnumeration; // implementation of instance EnumValue1
    static EnumValue2: MockEnumeration; // implementation of instance EnumValue2
    static EnumValue3: MockEnumeration; // implementation of instance EnumValue3
    static $piANY: MockEnumeration; // default predefined instance

    readonly $typename: EntityMetaType = "MockEnumeration"; // holds the metatype in the form of a string
    $id: string; // a unique identifier
    name: string = ""; // implementation of name

    constructor(id?: string) {
        super();
        if (!!id) {
            this.$id = id;
        } else {
            this.$id = PiUtils.ID(); // uuid.v4();
        }
    }

    /**
     * Returns the metatype of this instance in the form of a string.
     */
    piLanguageConcept(): EntityMetaType {
        return this.$typename;
    }

    /**
     * Returns the unique identifier of this instance.
     */
    piId(): string {
        return this.$id;
    }

    /**
     * Returns true if this instance is a model concept.
     */
    piIsModel(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a model unit.
     */
    piIsUnit(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is an expression concept.
     */
    piIsExpression(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a binary expression concept.
     */
    piIsBinaryExpression(): boolean {
        return false;
    }
}

// Because of mobx we need to generate the initialisations outside of the class,
// otherwise the state of properties with primitive type will not be kept correctly.
MockEnumeration.EnumValue1 = MockEnumeration.create({
    name: "EnumValue1"
});
MockEnumeration.EnumValue2 = MockEnumeration.create({
    name: "EnumValue2"
});
MockEnumeration.EnumValue3 = MockEnumeration.create({
    name: "EnumValue3"
});
