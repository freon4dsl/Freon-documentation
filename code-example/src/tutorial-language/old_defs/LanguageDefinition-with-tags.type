typer Entity for language Entity

// tag::types[]
// 'BaseType' is the root of the type hierarchy
istype { BaseType, Type, Entity, AttributeType }
// end::types[]

// tag::anytype[]
anytype {
    conformsto AttributeType:ANY;
    equalsto AttributeType:ANY;
}
// end::anytype[]

// tag::conformance[]
Entity {
    conformsto self.baseEntity;
}
StringLiteralExpression {
    infertype AttributeType:String;
}
// end::conformance[]

AttributeWithLimitedType {
    infertype self.declaredType;
}
// tag::inference[]
EntityFunction {
    infertype self.declaredType;
}
// end::inference[]
// tag::abstract[]
EntityExpression {
    abstract infertype ;
}
// end::abstract[]

NumberLiteralExpression {
    infertype AttributeType:Integer;
}
BooleanLiteralExpression {
    infertype AttributeType:Boolean;
}
AbsExpression {
    infertype self.expr;
}
MultiplyExpression {
    infertype self.left;
}
PlusExpression {
    infertype self.left;
}
DivideExpression {
    infertype self.left;
}
ComparisonExpression {
    infertype AttributeType:Boolean;
}
FunctionCallExpression {
    infertype self.functionDefinition;
}
IfExpression    {
    infertype self.whenTrue;
}
Variable {
    infertype self.declaredType;
}
VariableRef   {
    infertype self.variable.declaredType;
}
AttributeRef   {
    infertype self.attribute.declaredType;
}

