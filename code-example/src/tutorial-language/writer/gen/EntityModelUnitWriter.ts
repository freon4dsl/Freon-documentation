// Generated by the ProjectIt Language Generator.
import { PiNamedElement, PiWriter } from "@projectit/core";
import {
    EntityEveryConcept,
    PiElementReference,
    SomeOtherModelUnit,
    EntityModelUnit,
    Entity,
    AttributeType,
    MockEnumeration,
    AbsExpression,
    MultiplyExpression,
    EntityFunction,
    AttributeWithLimitedType,
    Text,
    AttributeWithEntityType,
    Variable,
    EntityExpression,
    AppliedFeature,
    AttributeRef,
    VariableRef,
    LiteralExpression,
    StringLiteralExpression,
    NumberLiteralExpression,
    BooleanLiteralExpression,
    BinaryExpression,
    PlusExpression,
    DivideExpression,
    AndExpression,
    OrExpression,
    ComparisonExpression,
    LessThenExpression,
    GreaterThenExpression,
    EqualsExpression,
    FunctionCallExpression,
    IfExpression
} from "../../language/gen";

/**
 * SeparatorType is used to unparse lists.
 * NONE means only space(s) between the elements.
 * Terminator means that every element is terminated with a certain string.
 * Separator means that in between elements a certain string is placed.
 */
enum SeparatorType {
    NONE = "NONE",
    Terminator = "Terminator",
    Separator = "Separator"
}

/**
 * Class EntityModelUnitWriter provides methods to return a string representation of an instance of
 * elements of language Entity.
 * It is, amongst others, used to create error messages in the validator.
 */
export class EntityModelUnitWriter implements PiWriter {
    output: string[] = []; // stores the result, one line per array element
    currentLine: number = 0; // keeps track of the element in 'output' that we are working on

    /**
     * Returns a string representation of 'modelelement'.
     * If 'short' is present and true, then a single-line result will be given.
     * Otherwise, the result is always a multi-line string.
     * Note that the single-line-string cannot be parsed into a correct model.
     *
     * @param modelelement
     * @param startIndent
     * @param short
     */
    public writeToString(modelelement: EntityEveryConcept, startIndent?: number, short?: boolean): string {
        this.writeToLines(modelelement, startIndent, short);
        return `${this.output
            .map(line => `${line}`)
            .join("\n")
            .trimRight()}`;
    }

    /**
     * Returns a string representation of 'modelelement', divided into an array of strings,
     * each of which contain a single line (without newline).
     * If 'short' is present and true, then a single-line result will be given.
     * Otherwise, the result is always a multi-line string.
     *
     * @param modelelement
     * @param startIndent
     * @param short
     */
    public writeToLines(modelelement: EntityEveryConcept, startIndent?: number, short?: boolean): string[] {
        // set default for optional parameters
        if (startIndent === undefined) {
            startIndent = 0;
        }
        if (short === undefined) {
            short = false;
        }

        // make sure the global variables are reset
        this.output = [];
        this.currentLine = 0;

        // begin the unparsing with an indent if asked for
        let indentString: string = "";
        for (let _i = 0; _i < startIndent; _i++) {
            indentString += " ";
        }
        this.output[this.currentLine] = indentString;

        // do the actual work
        this.unparse(modelelement, short);
        return this.output;
    }

    /**
     * Returns the name of 'modelelement' if it has one, else returns
     * a short unparsing of 'modelelement'.
     * Used by the validator to produce readable error messages.
     *
     * @param modelelement
     */
    public writeNameOnly(modelelement: EntityEveryConcept): string {
        if (modelelement instanceof SomeOtherModelUnit) {
            return modelelement.name;
        } else if (modelelement instanceof EntityModelUnit) {
            return modelelement.name;
        } else if (modelelement instanceof Entity) {
            return modelelement.name;
        } else if (modelelement instanceof AttributeType) {
            return modelelement.name;
        } else if (modelelement instanceof MockEnumeration) {
            return modelelement.name;
        } else if (modelelement instanceof EntityFunction) {
            return modelelement.name;
        } else if (modelelement instanceof AttributeWithLimitedType) {
            return modelelement.name;
        } else if (modelelement instanceof AttributeWithEntityType) {
            return modelelement.name;
        } else if (modelelement instanceof Variable) {
            return modelelement.name;
        } else {
            // make sure the global variables are reset
            this.output = [];
            this.currentLine = 0;
            // do not care about indent, we just need a single line
            this.output[this.currentLine] = "";
            // do the actual work
            this.unparse(modelelement, true);
            return this.output[0].trimEnd();
        }
    }

    private unparse(modelelement: EntityEveryConcept, short: boolean) {
        if (modelelement instanceof MultiplyExpression) {
            this.unparseMultiplyExpression(modelelement, short);
        } else if (modelelement instanceof IfExpression) {
            this.unparseIfExpression(modelelement, short);
        } else if (modelelement instanceof FunctionCallExpression) {
            this.unparseFunctionCallExpression(modelelement, short);
        } else if (modelelement instanceof EqualsExpression) {
            this.unparseEqualsExpression(modelelement, short);
        } else if (modelelement instanceof GreaterThenExpression) {
            this.unparseGreaterThenExpression(modelelement, short);
        } else if (modelelement instanceof LessThenExpression) {
            this.unparseLessThenExpression(modelelement, short);
        } else if (modelelement instanceof ComparisonExpression) {
            this.unparseComparisonExpression(modelelement, short);
        } else if (modelelement instanceof OrExpression) {
            this.unparseOrExpression(modelelement, short);
        } else if (modelelement instanceof AndExpression) {
            this.unparseAndExpression(modelelement, short);
        } else if (modelelement instanceof DivideExpression) {
            this.unparseDivideExpression(modelelement, short);
        } else if (modelelement instanceof PlusExpression) {
            this.unparsePlusExpression(modelelement, short);
        } else if (modelelement instanceof BinaryExpression) {
            this.unparseBinaryExpression(modelelement, short);
        } else if (modelelement instanceof BooleanLiteralExpression) {
            this.unparseBooleanLiteralExpression(modelelement, short);
        } else if (modelelement instanceof NumberLiteralExpression) {
            this.unparseNumberLiteralExpression(modelelement, short);
        } else if (modelelement instanceof StringLiteralExpression) {
            this.unparseStringLiteralExpression(modelelement, short);
        } else if (modelelement instanceof LiteralExpression) {
            this.unparseLiteralExpression(modelelement, short);
        } else if (modelelement instanceof VariableRef) {
            this.unparseVariableRef(modelelement, short);
        } else if (modelelement instanceof AttributeRef) {
            this.unparseAttributeRef(modelelement, short);
        } else if (modelelement instanceof AbsExpression) {
            this.unparseAbsExpression(modelelement, short);
        } else if (modelelement instanceof AppliedFeature) {
            this.unparseAppliedFeature(modelelement, short);
        } else if (modelelement instanceof EntityExpression) {
            this.unparseEntityExpression(modelelement, short);
        } else if (modelelement instanceof Variable) {
            this.unparseVariable(modelelement, short);
        } else if (modelelement instanceof AttributeWithEntityType) {
            this.unparseAttributeWithEntityType(modelelement, short);
        } else if (modelelement instanceof Text) {
            this.unparseText(modelelement, short);
        } else if (modelelement instanceof AttributeWithLimitedType) {
            this.unparseAttributeWithLimitedType(modelelement, short);
        } else if (modelelement instanceof EntityFunction) {
            this.unparseEntityFunction(modelelement, short);
        } else if (modelelement instanceof MockEnumeration) {
            this.unparseMockEnumeration(modelelement, short);
        } else if (modelelement instanceof AttributeType) {
            this.unparseAttributeType(modelelement, short);
        } else if (modelelement instanceof Entity) {
            this.unparseEntity(modelelement, short);
        } else if (modelelement instanceof SomeOtherModelUnit) {
            this.unparseSomeOtherModelUnit(modelelement, short);
        } else if (modelelement instanceof EntityModelUnit) {
            this.unparseEntityModelUnit(modelelement, short);
        }
    }

    /**
     * See the public unparse method.
     */
    private unparseText(modelelement: Text, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `This is `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 8);
            this.output[this.currentLine] += `literal text `;
            this.newlineAndIndentation(blockIndent + 2);
            this.output[this.currentLine] += `that is projected in the `;
            this.newlineAndIndentation(blockIndent + 8);
            this.output[this.currentLine] += `editor `;
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `for every concept of type Text. `;
        }
    }

    /**
     * See the public unparse method.
     */
    private unparseNumberLiteralExpression(modelelement: NumberLiteralExpression, short: boolean) {
        this.output[this.currentLine] += `"${modelelement.value}" `;
    }

    /**
     * See the public unparse method.
     */
    private unparseStringLiteralExpression(modelelement: StringLiteralExpression, short: boolean) {
        this.output[this.currentLine] += `' `;
        this.output[this.currentLine] += `"${modelelement.value}" `;
        this.output[this.currentLine] += `' `;
    }

    /**
     * See the public unparse method.
     */
    private unparseAttributeWithLimitedType(modelelement: AttributeWithLimitedType, short: boolean) {
        this.output[this.currentLine] += `${modelelement.name} `;
        this.output[this.currentLine] += `: `;
        this.unparseReference(modelelement.declaredType, short);
    }

    /**
     * See the public unparse method.
     */
    private unparseIfExpression(modelelement: IfExpression, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `if ( `;
        this.unparse(modelelement.condition, short);
        this.output[this.currentLine] += `) then `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 10);
            this.unparse(modelelement.whenTrue, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `else `;
            this.newlineAndIndentation(blockIndent + 3);
            this.unparse(modelelement.whenFalse, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `endif `;
        }
    }
    /**
     * See the public unparse method.
     */
    private unparsePlusExpression(modelelement: PlusExpression, short: boolean) {
        //this.output[this.currentLine] += "( ";
        this.unparse(modelelement.left, short);
        this.output[this.currentLine] += "+ ";
        this.unparse(modelelement.right, short);
        //this.output[this.currentLine] += ") ";
    }
    /**
     * See the public unparse method.
     */
    private unparseMultiplyExpression(modelelement: MultiplyExpression, short: boolean) {
        //this.output[this.currentLine] += "( ";
        this.unparse(modelelement.left, short);
        this.output[this.currentLine] += "* ";
        this.unparse(modelelement.right, short);
        //this.output[this.currentLine] += ") ";
    }
    /**
     * See the public unparse method.
     */
    private unparseDivideExpression(modelelement: DivideExpression, short: boolean) {
        //this.output[this.currentLine] += "( ";
        this.unparse(modelelement.left, short);
        this.output[this.currentLine] += "/ ";
        this.unparse(modelelement.right, short);
        //this.output[this.currentLine] += ") ";
    }
    /**
     * See the public unparse method.
     */
    private unparseLessThenExpression(modelelement: LessThenExpression, short: boolean) {
        //this.output[this.currentLine] += "( ";
        this.unparse(modelelement.left, short);
        this.output[this.currentLine] += "< ";
        this.unparse(modelelement.right, short);
        //this.output[this.currentLine] += ") ";
    }
    /**
     * See the public unparse method.
     */
    private unparseOrExpression(modelelement: OrExpression, short: boolean) {
        //this.output[this.currentLine] += "( ";
        this.unparse(modelelement.left, short);
        this.output[this.currentLine] += "or ";
        this.unparse(modelelement.right, short);
        //this.output[this.currentLine] += ") ";
    }

    /**
     * See the public unparse method.
     */
    private unparseEntity(modelelement: Entity, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        if (!!modelelement.isCompany) {
            if (modelelement.isCompany) {
                this.output[this.currentLine] += `COMPANY `;
            }
        }
        this.output[this.currentLine] += `entity `;
        this.output[this.currentLine] += `${modelelement.name} `;
        if (!!modelelement.baseEntity?.referred) {
            this.output[this.currentLine] += `base `;
            if (!!modelelement.baseEntity) {
                this.unparseReference(modelelement.baseEntity, short);
            }
        }
        this.output[this.currentLine] += `{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.unparseList(modelelement.attributes, "", SeparatorType.NONE, true, this.output[this.currentLine].length, short);
            this.newlineAndIndentation(blockIndent + 4);
            this.unparseList(modelelement.functions, "", SeparatorType.NONE, true, this.output[this.currentLine].length, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * See the public unparse method.
     */
    private unparseFunctionCallExpression(modelelement: FunctionCallExpression, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `+ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `CALL `;
            this.unparseReference(modelelement.functionDefinition, short);
            this.output[this.currentLine] += `(  ) `;
        }
    }

    /**
     * See the public unparse method.
     */
    private unparseEntityModelUnit(modelelement: EntityModelUnit, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `model `;
        this.output[this.currentLine] += `${modelelement.name} `;
        this.output[this.currentLine] += `{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `entities: `;
            this.newlineAndIndentation(blockIndent + 4);
            this.unparseList(modelelement.entities, " && ", SeparatorType.Terminator, true, this.output[this.currentLine].length, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `model wide functions: `;
            this.newlineAndIndentation(blockIndent + 4);
            this.unparseList(modelelement.functions, "; ", SeparatorType.Separator, false, this.output[this.currentLine].length, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }
    /**
     * The abstract concept 'BinaryExpression' is not unparsed.
     */
    private unparseBinaryExpression(modelelement: BinaryExpression, short: boolean) {
        throw new Error("Method unparseBinaryExpression should be implemented by its (concrete) subclasses.");
    }
    /**
     * See the public unparse method.
     */
    private unparseAndExpression(modelelement: AndExpression, short: boolean) {
        //this.output[this.currentLine] += "( ";
        this.unparse(modelelement.left, short);
        this.output[this.currentLine] += "AndExpression ";
        this.unparse(modelelement.right, short);
        //this.output[this.currentLine] += ") ";
    }
    /**
     * The abstract concept 'ComparisonExpression' is not unparsed.
     */
    private unparseComparisonExpression(modelelement: ComparisonExpression, short: boolean) {
        throw new Error("Method unparseComparisonExpression should be implemented by its (concrete) subclasses.");
    }
    /**
     * See the public unparse method.
     */
    private unparseGreaterThenExpression(modelelement: GreaterThenExpression, short: boolean) {
        //this.output[this.currentLine] += "( ";
        this.unparse(modelelement.left, short);
        this.output[this.currentLine] += "GreaterThenExpression ";
        this.unparse(modelelement.right, short);
        //this.output[this.currentLine] += ") ";
    }
    /**
     * See the public unparse method.
     */
    private unparseEqualsExpression(modelelement: EqualsExpression, short: boolean) {
        //this.output[this.currentLine] += "( ";
        this.unparse(modelelement.left, short);
        this.output[this.currentLine] += "EqualsExpression ";
        this.unparse(modelelement.right, short);
        //this.output[this.currentLine] += ") ";
    }
    /**
     * The limited concept 'AttributeType' is unparsed as its name.
     */
    private unparseAttributeType(modelelement: AttributeType, short: boolean) {
        if (!!modelelement) {
            this.output[this.currentLine] += modelelement.name + " ";
        }
    }
    /**
     * The limited concept 'MockEnumeration' is unparsed as its name.
     */
    private unparseMockEnumeration(modelelement: MockEnumeration, short: boolean) {
        if (!!modelelement) {
            this.output[this.currentLine] += modelelement.name + " ";
        }
    }

    /**
     * See the public unparse method.
     */
    private unparseAbsExpression(modelelement: AbsExpression, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `AbsExpression `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `expr `;
            this.unparse(modelelement.expr, short);
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `appliedfeature `;
            if (!!modelelement.appliedfeature) {
                this.unparse(modelelement.appliedfeature, short);
            }
        }
    }

    /**
     * See the public unparse method.
     */
    private unparseEntityFunction(modelelement: EntityFunction, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `EntityFunction `;
        this.output[this.currentLine] += `${modelelement.name} `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `aliases `;
            this.unparseListOfPrimitiveValues(
                modelelement.aliases,
                false,
                ", ",
                SeparatorType.Separator,
                false,
                this.output[this.currentLine].length,
                short
            );
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `expression `;
            this.unparse(modelelement.expression, short);
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `parameters `;
            this.newlineAndIndentation(blockIndent + 8);
            this.unparseList(modelelement.parameters, "", SeparatorType.Separator, true, this.output[this.currentLine].length, short);
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `declaredType `;
            this.unparseReference(modelelement.declaredType, short);
        }
    }

    /**
     * See the public unparse method.
     */
    private unparseAttributeWithEntityType(modelelement: AttributeWithEntityType, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `AttributeWithEntityType `;
        this.output[this.currentLine] += `${modelelement.name} `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `declaredType `;
            this.unparseReference(modelelement.declaredType, short);
        }
    }

    /**
     * See the public unparse method.
     */
    private unparseVariable(modelelement: Variable, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `Variable `;
        this.output[this.currentLine] += `${modelelement.name} `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `declaredType `;
            this.unparseReference(modelelement.declaredType, short);
        }
    }
    /**
     * The abstract concept 'EntityExpression' is not unparsed.
     */
    private unparseEntityExpression(modelelement: EntityExpression, short: boolean) {
        throw new Error("Method unparseEntityExpression should be implemented by its (concrete) subclasses.");
    }
    /**
     * The abstract concept 'AppliedFeature' is not unparsed.
     */
    private unparseAppliedFeature(modelelement: AppliedFeature, short: boolean) {
        throw new Error("Method unparseAppliedFeature should be implemented by its (concrete) subclasses.");
    }

    /**
     * See the public unparse method.
     */
    private unparseAttributeRef(modelelement: AttributeRef, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `AttributeRef `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `appliedfeature `;
            if (!!modelelement.appliedfeature) {
                this.unparse(modelelement.appliedfeature, short);
            }
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `attribute `;
            this.unparseReference(modelelement.attribute, short);
        }
    }

    /**
     * See the public unparse method.
     */
    private unparseVariableRef(modelelement: VariableRef, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `VariableRef `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `appliedfeature `;
            if (!!modelelement.appliedfeature) {
                this.unparse(modelelement.appliedfeature, short);
            }
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `variable `;
            this.unparseReference(modelelement.variable, short);
        }
    }
    /**
     * The abstract concept 'LiteralExpression' is not unparsed.
     */
    private unparseLiteralExpression(modelelement: LiteralExpression, short: boolean) {
        throw new Error("Method unparseLiteralExpression should be implemented by its (concrete) subclasses.");
    }

    /**
     * See the public unparse method.
     */
    private unparseBooleanLiteralExpression(modelelement: BooleanLiteralExpression, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `BooleanLiteralExpression `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `value `;
            this.output[this.currentLine] += `"${modelelement.value}" `;
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `appliedfeature `;
            if (!!modelelement.appliedfeature) {
                this.unparse(modelelement.appliedfeature, short);
            }
        }
    }

    /**
     * See the public unparse method.
     */
    private unparseSomeOtherModelUnit(modelelement: SomeOtherModelUnit, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `SomeOtherModelUnit `;
        this.output[this.currentLine] += `${modelelement.name} `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `somePart `;
            this.unparse(modelelement.somePart, short);
        }
    }

    /**
     *
     */
    private unparseReference(modelelement: PiElementReference<PiNamedElement>, short: boolean) {
        const type: PiNamedElement = modelelement.referred;
        if (!!type) {
            if (type instanceof AttributeType) {
                this.unparseAttributeType(type, short);
            } else if (type instanceof MockEnumeration) {
                this.unparseMockEnumeration(type, short);
            } else {
                this.output[this.currentLine] += type.name + " ";
            }
        } else {
            this.output[this.currentLine] += modelelement.name + " ";
        }
    }

    /**
     * Adds a string representation of 'list' to the 'output', using 'sepText' , and 'sepType' to include either a separator string
     * or a terminator string. Param 'vertical' indicates whether the list should be represented vertically or horizontally.
     * If 'short' is false, then a multi-line result will be given. Otherwise, only one single-line string is added.
     * @param list
     * @param sepText
     * @param sepType
     * @param vertical
     * @param indent
     * @param short
     */
    private unparseList(
        list: EntityEveryConcept[],
        sepText: string,
        sepType: SeparatorType,
        vertical: boolean,
        indent: number,
        short: boolean
    ) {
        list.forEach((listElem, index) => {
            const isLastInList: boolean = index === list.length - 1;
            this.unparse(listElem, short);
            this.doSeparatorOrTerminatorAndNewline(sepType, isLastInList, sepText, vertical, short, indent);
        });
    }

    /**
     * Adds a string representation of a list of references, where every reference
     * is replaced by the name of its referred element. The use of params
     * 'sepText' and 'SepType' are equals to those in the private method unparseList.
     * @param list
     * @param sepText
     * @param sepType
     * @param vertical
     * @param indent
     * @param short
     */
    private unparseReferenceList(
        list: PiElementReference<PiNamedElement>[],
        sepText: string,
        sepType: SeparatorType,
        vertical: boolean,
        indent: number,
        short: boolean
    ) {
        list.forEach((listElem, index) => {
            const isLastInList: boolean = index === list.length - 1;
            this.unparseReference(listElem, short);
            this.doSeparatorOrTerminatorAndNewline(sepType, isLastInList, sepText, vertical, short, indent);
        });
    }

    /**
     * Adds a string representation of 'list' to the 'output', using 'sepText' , and 'sepType' to include either a separator string
     * or a terminator string. Param 'vertical' indicates whether the list should be represented vertically or horizontally.
     * If 'short' is false, then a multi-line result will be given. Otherwise, only one single-line string is added.
     * @param list
     * @param isIdentifier : indicates whether or not the value should be surrounded with double quotes
     * @param sepText
     * @param sepType
     * @param vertical
     * @param indent
     * @param short
     */
    private unparseListOfPrimitiveValues(
        list: (string | number | boolean)[],
        isIdentifier: boolean,
        sepText: string,
        sepType: SeparatorType,
        vertical: boolean,
        indent: number,
        short: boolean
    ) {
        if (!!list) {
            list.forEach((listElem, index) => {
                const isLastInList: boolean = index === list.length - 1;
                if (typeof listElem === "string" && !isIdentifier) {
                    this.output[this.currentLine] += `"${listElem}"`;
                } else {
                    this.output[this.currentLine] += `${listElem}`;
                }
                this.doSeparatorOrTerminatorAndNewline(sepType, isLastInList, sepText, vertical, short, indent);
            });
        }
    }

    /**
     * Adds a separator text or a terminator text (followed by a newline and the right amount of indentation)
     * to the output, depending on the parameters.
     * @param sepType
     * @param isLastInList
     * @param sepText
     * @param vertical
     * @param short
     * @param indent
     */
    // tslint:disable-next-line:max-line-length
    private doSeparatorOrTerminatorAndNewline(
        sepType: SeparatorType,
        isLastInList: boolean,
        sepText: string,
        vertical: boolean,
        short: boolean,
        indent: number
    ) {
        // first eliminate any whitespace at the end of the line
        this.output[this.currentLine] = this.output[this.currentLine].trimRight();

        // then add the right separator or terminator
        switch (sepType) {
            case SeparatorType.Separator: {
                if (!isLastInList) {
                    this.output[this.currentLine] += sepText;
                }
                break;
            }
            case SeparatorType.Terminator: {
                this.output[this.currentLine] += sepText;
                break;
            }
            case SeparatorType.NONE: {
                break;
            }
        }

        // then add newline and indentation
        if (vertical && !isLastInList) {
            if (!short) {
                this.newlineAndIndentation(indent);
            } else {
                // stop after 1 line
                // note that the following cannot be parsed
                this.output[this.currentLine] += ` ...`;
            }
        } else if (!vertical && isLastInList) {
            this.output[this.currentLine] += ` `;
        }
    }

    /**
     * Makes a a new entry in the 'output' array
     * and adds the indentation of 'number' spaces
     * to the new entry/line.
     * @param indent
     */
    private newlineAndIndentation(indent: number) {
        this.currentLine += 1;
        let indentation: string = "";
        for (let _i = 0; _i < indent; _i++) {
            indentation += " ";
        }
        this.output[this.currentLine] = indentation;
    }
}
