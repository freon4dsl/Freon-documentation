// Generated by the Freon Language Generator.
import { FreNamedNode, FreNodeReference, FreWriter } from "@freon4dsl/core";
import {
    EntityEveryConcept,
    BaseType,
    Type,
    SomeOtherModelUnit,
    EntityModelUnit,
    Entity,
    AttributeType,
    MockEnumeration,
    AbsExpression,
    MultiplyExpression,
    EntityFunction,
    AttributeWithLimitedType,
    Text,
    Text2,
    Text3,
    Text4,
    AttributeWithEntityType,
    Variable,
    EntityExpression,
    AppliedFeature,
    AttributeRef,
    VariableRef,
    LiteralExpression,
    StringLiteralExpression,
    NumberLiteralExpression,
    BooleanLiteralExpression,
    BinaryExpression,
    PlusExpression,
    DivideExpression,
    AndExpression,
    OrExpression,
    ComparisonExpression,
    LessThenExpression,
    GreaterThenExpression,
    EqualsExpression,
    FunctionCallExpression,
    IfExpression
} from "../../language/gen";

/**
 * SeparatorType is used to unparse lists.
 * NONE means only space(s) between the elements.
 * Terminator means that every element is terminated with a certain string.
 * Separator means that in between elements a certain string is placed.
 */
enum SeparatorType {
    NONE = "NONE",
    Terminator = "Terminator",
    Separator = "Separator",
    Initiator = "Initiator"
}

/**
 * Class EntityModelUnitWriter provides methods to return a string representation of an instance of
 * elements of language Entity.
 * It is, amongst others, used to create error messages in the validator.
 */
export class EntityModelUnitWriter implements FreWriter {
    output: string[] = []; // stores the result, one line per array element
    currentLine: number = 0; // keeps track of the element in 'output' that we are working on

    /**
     * Returns a string representation of 'modelelement'.
     * If 'short' is present and true, then a single-line result will be given.
     * Otherwise, the result is always a multi-line string.
     * Note that the single-line-string cannot be parsed into a correct model.
     *
     * @param modelelement
     * @param startIndent
     * @param short
     */
    public writeToString(modelelement: EntityEveryConcept, startIndent?: number, short?: boolean): string {
        this.writeToLines(modelelement, startIndent, short);
        return `${this.output
            .map(line => `${line.trimEnd()}`)
            .join("\n")
            .trimEnd()}`;
    }

    /**
     * Returns a string representation of 'modelelement', divided into an array of strings,
     * each of which contain a single line (without newline).
     * If 'short' is present and true, then a single-line result will be given.
     * Otherwise, the result is always a multi-line string.
     *
     * @param modelelement
     * @param startIndent
     * @param short
     */
    public writeToLines(modelelement: EntityEveryConcept, startIndent?: number, short?: boolean): string[] {
        // set default for optional parameters
        if (startIndent === undefined) {
            startIndent = 0;
        }
        if (short === undefined) {
            short = false;
        }

        // make sure the global variables are reset
        this.output = [];
        this.currentLine = 0;

        // begin the unparsing with an indent if asked for
        let indentString: string = "";
        for (let _i = 0; _i < startIndent; _i++) {
            indentString += " ";
        }
        this.output[this.currentLine] = indentString;

        // do the actual work
        this.unparse(modelelement, short);
        return this.output;
    }

    /**
     * Returns the name of 'modelelement' if it has one, else returns
     * a short unparsing of 'modelelement'.
     * Used by the validator to produce readable error messages.
     *
     * @param modelelement
     */
    public writeNameOnly(modelelement: EntityEveryConcept): string {
        if (!modelelement) return "";

        if (modelelement instanceof SomeOtherModelUnit) {
            return modelelement.name;
        } else if (modelelement instanceof EntityModelUnit) {
            return modelelement.name;
        } else if (modelelement instanceof Entity) {
            return modelelement.name;
        } else if (modelelement instanceof AttributeType) {
            return modelelement.name;
        } else if (modelelement instanceof MockEnumeration) {
            return modelelement.name;
        } else if (modelelement instanceof EntityFunction) {
            return modelelement.name;
        } else if (modelelement instanceof AttributeWithLimitedType) {
            return modelelement.name;
        } else if (modelelement instanceof AttributeWithEntityType) {
            return modelelement.name;
        } else if (modelelement instanceof Variable) {
            return modelelement.name;
        } else {
            // make sure the global variables are reset
            this.output = [];
            this.currentLine = 0;
            // do not care about indent, we just need a single line
            this.output[this.currentLine] = "";
            // do the actual work
            this.unparse(modelelement, true);
            return this.output[0].trimEnd();
        }
    }

    private unparse(modelelement: EntityEveryConcept, short: boolean) {
        if (!modelelement) return;
        switch (modelelement.freLanguageConcept()) {
            case "Entity":
                this.unparseEntity(modelelement as Entity, short);
                break;
            case "AttributeType":
                this.unparseAttributeType(modelelement as AttributeType, short);
                break;
            case "MockEnumeration":
                this.unparseMockEnumeration(modelelement as MockEnumeration, short);
                break;
            case "AbsExpression":
                this.unparseAbsExpression(modelelement as AbsExpression, short);
                break;
            case "MultiplyExpression":
                this.unparseMultiplyExpression(modelelement as MultiplyExpression, short);
                break;
            case "EntityFunction":
                this.unparseEntityFunction(modelelement as EntityFunction, short);
                break;
            case "AttributeWithLimitedType":
                this.unparseAttributeWithLimitedType(modelelement as AttributeWithLimitedType, short);
                break;
            case "Text":
                this.unparseText(modelelement as Text, short);
                break;
            case "Text2":
                this.unparseText2(modelelement as Text2, short);
                break;
            case "Text3":
                this.unparseText3(modelelement as Text3, short);
                break;
            case "Text4":
                this.unparseText4(modelelement as Text4, short);
                break;
            case "AttributeWithEntityType":
                this.unparseAttributeWithEntityType(modelelement as AttributeWithEntityType, short);
                break;
            case "Variable":
                this.unparseVariable(modelelement as Variable, short);
                break;
            case "EntityExpression":
                this.unparseEntityExpression(modelelement as EntityExpression, short);
                break;
            case "AppliedFeature":
                this.unparseAppliedFeature(modelelement as AppliedFeature, short);
                break;
            case "AttributeRef":
                this.unparseAttributeRef(modelelement as AttributeRef, short);
                break;
            case "VariableRef":
                this.unparseVariableRef(modelelement as VariableRef, short);
                break;
            case "LiteralExpression":
                this.unparseLiteralExpression(modelelement as LiteralExpression, short);
                break;
            case "StringLiteralExpression":
                this.unparseStringLiteralExpression(modelelement as StringLiteralExpression, short);
                break;
            case "NumberLiteralExpression":
                this.unparseNumberLiteralExpression(modelelement as NumberLiteralExpression, short);
                break;
            case "BooleanLiteralExpression":
                this.unparseBooleanLiteralExpression(modelelement as BooleanLiteralExpression, short);
                break;
            case "BinaryExpression":
                this.unparseBinaryExpression(modelelement as BinaryExpression, short);
                break;
            case "PlusExpression":
                this.unparsePlusExpression(modelelement as PlusExpression, short);
                break;
            case "DivideExpression":
                this.unparseDivideExpression(modelelement as DivideExpression, short);
                break;
            case "AndExpression":
                this.unparseAndExpression(modelelement as AndExpression, short);
                break;
            case "OrExpression":
                this.unparseOrExpression(modelelement as OrExpression, short);
                break;
            case "ComparisonExpression":
                this.unparseComparisonExpression(modelelement as ComparisonExpression, short);
                break;
            case "LessThenExpression":
                this.unparseLessThenExpression(modelelement as LessThenExpression, short);
                break;
            case "GreaterThenExpression":
                this.unparseGreaterThenExpression(modelelement as GreaterThenExpression, short);
                break;
            case "EqualsExpression":
                this.unparseEqualsExpression(modelelement as EqualsExpression, short);
                break;
            case "FunctionCallExpression":
                this.unparseFunctionCallExpression(modelelement as FunctionCallExpression, short);
                break;
            case "IfExpression":
                this.unparseIfExpression(modelelement as IfExpression, short);
                break;
            case "SomeOtherModelUnit":
                this.unparseSomeOtherModelUnit(modelelement as SomeOtherModelUnit, short);
                break;
            case "EntityModelUnit":
                this.unparseEntityModelUnit(modelelement as EntityModelUnit, short);
                break;
            case "BaseType":
                this.unparseBaseType(modelelement as BaseType, short);
                break;
            case "Type":
                this.unparseType(modelelement as Type, short);
                break;
        }
    }

    /**
     * Unparsing of 'Entity' according to projection 'default'.
     */
    private unparseEntity(modelelement: Entity, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `Entity `;
        this.output[this.currentLine] += `${modelelement.name} `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `isCompany `;
            this.output[this.currentLine] += `${modelelement.isCompany} `;
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `baseInterface_attr `;
            this.output[this.currentLine] += `${modelelement.baseInterface_attr} `;
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `simpleprop `;
            this.output[this.currentLine] += `"${modelelement.simpleprop}" `;
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `attributes `;
            this.newlineAndIndentation(blockIndent + 8);
            this.unparseList(
                modelelement.attributes,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short,
                (modelelement, short) => this.unparse(modelelement, short)
            );
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `entAttributes `;
            this.newlineAndIndentation(blockIndent + 8);
            this.unparseList(
                modelelement.entAttributes,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short,
                (modelelement, short) => this.unparse(modelelement, short)
            );
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `functions `;
            this.newlineAndIndentation(blockIndent + 8);
            this.unparseList(
                modelelement.functions,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short,
                (modelelement, short) => this.unparse(modelelement, short)
            );
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `int_attrs `;
            this.newlineAndIndentation(blockIndent + 8);
            this.unparseList(
                modelelement.int_attrs,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short,
                (modelelement, short) => this.unparse(modelelement, short)
            );
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `int_functions `;
            this.newlineAndIndentation(blockIndent + 8);
            this.unparseList(
                modelelement.int_functions,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short,
                (modelelement, short) => this.unparse(modelelement, short)
            );
            if (!!modelelement.baseEntity) {
                this.newlineAndIndentation(blockIndent + 0 + 4);
                this.output[this.currentLine] += `baseEntity `;
                this.unparseReference(modelelement.baseEntity, short);
            }
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `baseInterface `;
            this.unparseReference(modelelement.baseInterface, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'AbsExpression' according to projection 'default'.
     */
    private unparseAbsExpression(modelelement: AbsExpression, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `AbsExpression `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `expr `;
            this.unparse(modelelement.expr, short);
            if (!!modelelement.appliedfeature) {
                this.newlineAndIndentation(blockIndent + 0 + 4);
                this.output[this.currentLine] += `appliedfeature `;
                this.unparse(modelelement.appliedfeature, short);
            }
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'EntityFunction' according to projection 'default'.
     */
    private unparseEntityFunction(modelelement: EntityFunction, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `EntityFunction `;
        this.output[this.currentLine] += `${modelelement.name} `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `aliases `;
            this.newlineAndIndentation(blockIndent + 8);
            this.unparseListOfPrimitiveValues(
                modelelement.aliases,
                false,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short
            );
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `expression `;
            this.unparse(modelelement.expression, short);
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `parameters `;
            this.newlineAndIndentation(blockIndent + 8);
            this.unparseList(
                modelelement.parameters,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short,
                (modelelement, short) => this.unparse(modelelement, short)
            );
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `declaredType `;
            this.unparseReference(modelelement.declaredType, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'AttributeWithLimitedType' according to projection 'default'.
     */
    private unparseAttributeWithLimitedType(modelelement: AttributeWithLimitedType, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `AttributeWithLimitedType `;
        this.output[this.currentLine] += `${modelelement.name} `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `declaredType `;
            this.unparseReference(modelelement.declaredType, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'Text' according to projection 'default'.
     */
    private unparseText(modelelement: Text, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `Text `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'Text2' according to projection 'default'.
     */
    private unparseText2(modelelement: Text2, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `Text2 `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'Text3' according to projection 'default'.
     */
    private unparseText3(modelelement: Text3, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `Text3 `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'Text4' according to projection 'default'.
     */
    private unparseText4(modelelement: Text4, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `Text4 `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'AttributeWithEntityType' according to projection 'default'.
     */
    private unparseAttributeWithEntityType(modelelement: AttributeWithEntityType, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `AttributeWithEntityType `;
        this.output[this.currentLine] += `${modelelement.name} `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `declaredType `;
            this.unparseReference(modelelement.declaredType, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'Variable' according to projection 'default'.
     */
    private unparseVariable(modelelement: Variable, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `Variable `;
        this.output[this.currentLine] += `${modelelement.name} `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `declaredType `;
            this.unparseReference(modelelement.declaredType, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'AttributeRef' according to projection 'default'.
     */
    private unparseAttributeRef(modelelement: AttributeRef, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `AttributeRef `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            if (!!modelelement.appliedfeature) {
                this.newlineAndIndentation(blockIndent + 0 + 4);
                this.output[this.currentLine] += `appliedfeature `;
                this.unparse(modelelement.appliedfeature, short);
            }
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `attribute `;
            this.unparseReference(modelelement.attribute, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'VariableRef' according to projection 'default'.
     */
    private unparseVariableRef(modelelement: VariableRef, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `VariableRef `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            if (!!modelelement.appliedfeature) {
                this.newlineAndIndentation(blockIndent + 0 + 4);
                this.output[this.currentLine] += `appliedfeature `;
                this.unparse(modelelement.appliedfeature, short);
            }
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `variable `;
            this.unparseReference(modelelement.variable, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'StringLiteralExpression' according to projection 'default'.
     */
    private unparseStringLiteralExpression(modelelement: StringLiteralExpression, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `StringLiteralExpression `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `value `;
            this.output[this.currentLine] += `"${modelelement.value}" `;
            if (!!modelelement.appliedfeature) {
                this.newlineAndIndentation(blockIndent + 0 + 4);
                this.output[this.currentLine] += `appliedfeature `;
                this.unparse(modelelement.appliedfeature, short);
            }
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'NumberLiteralExpression' according to projection 'default'.
     */
    private unparseNumberLiteralExpression(modelelement: NumberLiteralExpression, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `NumberLiteralExpression `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `value `;
            this.output[this.currentLine] += `"${modelelement.value}" `;
            if (!!modelelement.appliedfeature) {
                this.newlineAndIndentation(blockIndent + 0 + 4);
                this.output[this.currentLine] += `appliedfeature `;
                this.unparse(modelelement.appliedfeature, short);
            }
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'BooleanLiteralExpression' according to projection 'default'.
     */
    private unparseBooleanLiteralExpression(modelelement: BooleanLiteralExpression, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `BooleanLiteralExpression `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `value `;
            this.output[this.currentLine] += `"${modelelement.value}" `;
            if (!!modelelement.appliedfeature) {
                this.newlineAndIndentation(blockIndent + 0 + 4);
                this.output[this.currentLine] += `appliedfeature `;
                this.unparse(modelelement.appliedfeature, short);
            }
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'FunctionCallExpression' according to projection 'default'.
     */
    private unparseFunctionCallExpression(modelelement: FunctionCallExpression, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `FunctionCallExpression `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            if (!!modelelement.appliedfeature) {
                this.newlineAndIndentation(blockIndent + 0 + 4);
                this.output[this.currentLine] += `appliedfeature `;
                this.unparse(modelelement.appliedfeature, short);
            }
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `functionDefinition `;
            this.unparseReference(modelelement.functionDefinition, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'IfExpression' according to projection 'default'.
     */
    private unparseIfExpression(modelelement: IfExpression, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `IfExpression `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `condition `;
            this.unparse(modelelement.condition, short);
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `whenTrue `;
            this.unparse(modelelement.whenTrue, short);
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `whenFalse `;
            this.unparse(modelelement.whenFalse, short);
            if (!!modelelement.appliedfeature) {
                this.newlineAndIndentation(blockIndent + 0 + 4);
                this.output[this.currentLine] += `appliedfeature `;
                this.unparse(modelelement.appliedfeature, short);
            }
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'SomeOtherModelUnit' according to projection 'default'.
     */
    private unparseSomeOtherModelUnit(modelelement: SomeOtherModelUnit, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `SomeOtherModelUnit `;
        this.output[this.currentLine] += `${modelelement.name} `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `somePart `;
            this.unparse(modelelement.somePart, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'EntityModelUnit' according to projection 'default'.
     */
    private unparseEntityModelUnit(modelelement: EntityModelUnit, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `EntityModelUnit `;
        this.output[this.currentLine] += `${modelelement.name} `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `functions `;
            this.newlineAndIndentation(blockIndent + 8);
            this.unparseList(
                modelelement.functions,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short,
                (modelelement, short) => this.unparse(modelelement, short)
            );
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `entities `;
            this.newlineAndIndentation(blockIndent + 8);
            this.unparseList(
                modelelement.entities,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short,
                (modelelement, short) => this.unparse(modelelement, short)
            );
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'Type' according to projection 'default'.
     */
    private unparseType(modelelement: Type, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `Type `;
        this.output[this.currentLine] += `${modelelement.name} `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `simpleprop `;
            this.output[this.currentLine] += `"${modelelement.simpleprop}" `;
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `baseInterface_attr `;
            this.output[this.currentLine] += `${modelelement.baseInterface_attr} `;
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `int_attrs `;
            this.newlineAndIndentation(blockIndent + 8);
            this.unparseList(
                modelelement.int_attrs,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short,
                (modelelement, short) => this.unparse(modelelement, short)
            );
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `int_functions `;
            this.newlineAndIndentation(blockIndent + 8);
            this.unparseList(
                modelelement.int_functions,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short,
                (modelelement, short) => this.unparse(modelelement, short)
            );
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `baseInterface `;
            this.unparseReference(modelelement.baseInterface, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }
    /**
     * See the public unparse method.
     */
    private unparsePlusExpression(modelelement: PlusExpression, short: boolean) {
        this.unparse(modelelement.left, short);
        this.output[this.currentLine] += "+ ";
        this.unparse(modelelement.right, short);
    }
    /**
     * See the public unparse method.
     */
    private unparseMultiplyExpression(modelelement: MultiplyExpression, short: boolean) {
        this.unparse(modelelement.left, short);
        this.output[this.currentLine] += "* ";
        this.unparse(modelelement.right, short);
    }
    /**
     * See the public unparse method.
     */
    private unparseDivideExpression(modelelement: DivideExpression, short: boolean) {
        this.unparse(modelelement.left, short);
        this.output[this.currentLine] += "/ ";
        this.unparse(modelelement.right, short);
    }
    /**
     * See the public unparse method.
     */
    private unparseLessThenExpression(modelelement: LessThenExpression, short: boolean) {
        this.unparse(modelelement.left, short);
        this.output[this.currentLine] += "< ";
        this.unparse(modelelement.right, short);
    }
    /**
     * See the public unparse method.
     */
    private unparseOrExpression(modelelement: OrExpression, short: boolean) {
        this.unparse(modelelement.left, short);
        this.output[this.currentLine] += "or ";
        this.unparse(modelelement.right, short);
    }
    /**
     * See the public unparse method.
     */
    private unparseAndExpression(modelelement: AndExpression, short: boolean) {
        this.unparse(modelelement.left, short);
        this.output[this.currentLine] += "AndExpression ";
        this.unparse(modelelement.right, short);
    }
    /**
     * See the public unparse method.
     */
    private unparseGreaterThenExpression(modelelement: GreaterThenExpression, short: boolean) {
        this.unparse(modelelement.left, short);
        this.output[this.currentLine] += "GreaterThenExpression ";
        this.unparse(modelelement.right, short);
    }
    /**
     * See the public unparse method.
     */
    private unparseEqualsExpression(modelelement: EqualsExpression, short: boolean) {
        this.unparse(modelelement.left, short);
        this.output[this.currentLine] += "EqualsExpression ";
        this.unparse(modelelement.right, short);
    }
    /**
     * The limited concept 'AttributeType' is unparsed as its name.
     */
    private unparseAttributeType(modelelement: AttributeType, short: boolean) {
        if (!!modelelement) {
            this.output[this.currentLine] += modelelement.name + " ";
        }
    }
    /**
     * The limited concept 'MockEnumeration' is unparsed as its name.
     */
    private unparseMockEnumeration(modelelement: MockEnumeration, short: boolean) {
        if (!!modelelement) {
            this.output[this.currentLine] += modelelement.name + " ";
        }
    }
    /**
     * The abstract concept 'EntityExpression' is not unparsed.
     */
    private unparseEntityExpression(modelelement: EntityExpression, short: boolean) {
        throw new Error("Method unparseEntityExpression should be implemented by its (concrete) subclasses.");
    }
    /**
     * The abstract concept 'AppliedFeature' is not unparsed.
     */
    private unparseAppliedFeature(modelelement: AppliedFeature, short: boolean) {
        throw new Error("Method unparseAppliedFeature should be implemented by its (concrete) subclasses.");
    }
    /**
     * The abstract concept 'LiteralExpression' is not unparsed.
     */
    private unparseLiteralExpression(modelelement: LiteralExpression, short: boolean) {
        throw new Error("Method unparseLiteralExpression should be implemented by its (concrete) subclasses.");
    }
    /**
     * The abstract concept 'BinaryExpression' is not unparsed.
     */
    private unparseBinaryExpression(modelelement: BinaryExpression, short: boolean) {
        throw new Error("Method unparseBinaryExpression should be implemented by its (concrete) subclasses.");
    }
    /**
     * The abstract concept 'ComparisonExpression' is not unparsed.
     */
    private unparseComparisonExpression(modelelement: ComparisonExpression, short: boolean) {
        throw new Error("Method unparseComparisonExpression should be implemented by its (concrete) subclasses.");
    }
    /**
     * The interface 'BaseType' is not unparsed.
     */
    private unparseBaseType(modelelement: EntityEveryConcept, short: boolean) {
        throw new Error("Method unparseBaseType should be implemented by the classes that implement it.");
    }

    /**
     *
     */
    private unparseReference(modelelement: FreNodeReference<FreNamedNode>, short: boolean) {
        if (!!modelelement) {
            const type: FreNamedNode = modelelement?.referred;
            if (!!type) {
                if (type instanceof AttributeType) {
                    this.unparseAttributeType(type, short);
                } else if (type instanceof MockEnumeration) {
                    this.unparseMockEnumeration(type, short);
                } else {
                    this.output[this.currentLine] += modelelement.pathnameToString(".") + " ";
                }
            } else {
                this.output[this.currentLine] += modelelement.pathnameToString(".") + " ";
            }
        }
    }

    /**
     * Adds a string representation of 'list' to the 'output', using 'sepText' , and 'sepType' to include either a separator string
     * or a terminator string. Param 'vertical' indicates whether the list should be represented vertically or horizontally.
     * If 'short' is false, then a multi-line result will be given. Otherwise, only one single-line string is added.
     * @param list
     * @param sepText
     * @param sepType
     * @param vertical
     * @param indent
     * @param short
     */
    private unparseList(
        list: EntityEveryConcept[],
        sepText: string,
        sepType: SeparatorType,
        vertical: boolean,
        indent: number,
        short: boolean,
        method: (modelelement: EntityEveryConcept, short: boolean) => void
    ) {
        list.forEach((listElem, index) => {
            const isLastInList: boolean = index === list.length - 1;
            this.doInitiator(sepText, sepType);
            method(listElem, short);
            this.doSeparatorOrTerminatorAndNewline(sepType, isLastInList, sepText, vertical, short, indent);
        });
    }

    /**
     * Adds a string representation of a list of references, where every reference
     * is replaced by the name of its referred element. The use of params
     * 'sepText' and 'SepType' are equals to those in the private method unparseList.
     * @param list
     * @param sepText
     * @param sepType
     * @param vertical
     * @param indent
     * @param short
     */
    private unparseReferenceList(
        list: FreNodeReference<FreNamedNode>[],
        sepText: string,
        sepType: SeparatorType,
        vertical: boolean,
        indent: number,
        short: boolean
    ) {
        list.forEach((listElem, index) => {
            const isLastInList: boolean = index === list.length - 1;
            this.doInitiator(sepText, sepType);
            this.unparseReference(listElem, short);
            this.doSeparatorOrTerminatorAndNewline(sepType, isLastInList, sepText, vertical, short, indent);
        });
    }

    /**
     * Adds a string representation of 'list' to the 'output', using 'sepText' , and 'sepType' to include either a separator string
     * or a terminator string. Param 'vertical' indicates whether the list should be represented vertically or horizontally.
     * If 'short' is false, then a multi-line result will be given. Otherwise, only one single-line string is added.
     * @param list
     * @param isIdentifier : indicates whether or not the value should be surrounded with double quotes
     * @param sepText
     * @param sepType
     * @param vertical
     * @param indent
     * @param short
     */
    private unparseListOfPrimitiveValues(
        list: (string | number | boolean)[],
        isIdentifier: boolean,
        sepText: string,
        sepType: SeparatorType,
        vertical: boolean,
        indent: number,
        short: boolean
    ) {
        if (!!list) {
            list.forEach((listElem, index) => {
                const isLastInList: boolean = index === list.length - 1;
                if (typeof listElem === "string" && !isIdentifier) {
                    this.output[this.currentLine] += `"${listElem}"`;
                } else {
                    this.output[this.currentLine] += `${listElem}`;
                }
                this.doSeparatorOrTerminatorAndNewline(sepType, isLastInList, sepText, vertical, short, indent);
            });
        }
    }

    /**
     * Adds a separator, terminator, or initiator text (followed or preceded by a newline and the right amount of indentation)
     * to the output, depending on the parameters.
     * @param sepType
     * @param isLastInList
     * @param sepText
     * @param vertical
     * @param short
     * @param indent
     */
    // tslint:disable-next-line:max-line-length
    private doSeparatorOrTerminatorAndNewline(
        sepType: SeparatorType,
        isLastInList: boolean,
        sepText: string,
        vertical: boolean,
        short: boolean,
        indent: number
    ) {
        // first eliminate any whitespace at the end of the line
        this.output[this.currentLine] = this.output[this.currentLine].trimEnd();

        if (!vertical && (!sepText || sepText.length == 0)) {
            // at least separate the items by a space to avoid things
            // like "IntegerFunction", which should be "Integer Function"
            sepText = " ";
        }

        // then add the right separator or terminator
        switch (sepType) {
            case SeparatorType.Separator: {
                if (!isLastInList) {
                    this.output[this.currentLine] += sepText;
                }
                break;
            }
            case SeparatorType.Terminator: {
                this.output[this.currentLine] += sepText;
                break;
            }
            case SeparatorType.Initiator: {
                break;
            }
            case SeparatorType.NONE: {
                if (!vertical) {
                    // at least separate the items by a space to avoid things
                    // like "IntegerFunction", which should be "Integer Function"
                    this.output[this.currentLine] += " ";
                }
                break;
            }
        }

        // then add newline and indentation
        if (vertical && !isLastInList) {
            if (!short) {
                this.newlineAndIndentation(indent);
            } else {
                // stop after 1 line
                // note that the following cannot be parsed
                this.output[this.currentLine] += ` ...`;
            }
        } else if (isLastInList) {
            // end with a space to avoid things
            // like "666after", which should be "666 after"
            if (this.output[this.currentLine][this.output[this.currentLine].length - 1] !== " ") {
                this.output[this.currentLine] += ` `;
            }
        }
    }

    /**
     * Makes a new entry in the 'output' array
     * and adds the indentation of 'number' spaces
     * to the new entry/line.
     * @param indent
     */
    private newlineAndIndentation(indent: number) {
        this.currentLine += 1;
        let indentation: string = "";
        for (let _i = 0; _i < indent; _i++) {
            indentation += " ";
        }
        this.output[this.currentLine] = indentation;
    }

    /**
     * Adds the 'initiator' text
     * @param sepText
     * @param sepType
     * @private
     */
    private doInitiator(sepText: string, sepType: SeparatorType) {
        if (sepType === SeparatorType.Initiator) {
            this.output[this.currentLine] += sepText;
        }
    }
}
