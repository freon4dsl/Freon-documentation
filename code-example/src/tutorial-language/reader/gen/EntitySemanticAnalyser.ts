// Generated by the ProjectIt Language Generator.
import { EntityEveryConcept } from "../../language/gen";
import { EntityWalker } from "../../utils/gen";
import { EntitySemanticAnalysisWalker } from "./EntitySemanticAnalysisWalker";
import { PiElement } from "@projectit/core";

export class EntitySemanticAnalyser {
    public correct(modelunit: EntityEveryConcept) {
        let changesToBeMade: Map<EntityEveryConcept, EntityEveryConcept> = new Map<EntityEveryConcept, EntityEveryConcept>();
        // create the walker over the model tree
        const myWalker = new EntityWalker();

        // create the object that will find what needs ot be changed
        let myCorrector = new EntitySemanticAnalysisWalker(changesToBeMade);

        // and add the corrector to the walker
        myWalker.myWorkers.push(myCorrector);

        // do the work
        myWalker.walk(modelunit, () => {
            return true;
        });

        // now change all ref errors
        for (const [toBeReplaced, newObject] of changesToBeMade) {
            let parent: PiElement = toBeReplaced.piContainer().container;
            const propName: string = toBeReplaced.piContainer().propertyName;
            const propIndex: number = toBeReplaced.piContainer().propertyIndex;
            if (propIndex !== undefined) {
                parent[propName].splice(propIndex, 1, newObject);
            } else {
                parent[propName] = newObject;
            }
        }
    }
}
