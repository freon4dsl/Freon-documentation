// Generated by the ProjectIt Language Generator.
import * as Keys from "@projectit/core";
import {
    AFTER_BINARY_OPERATOR,
    BEFORE_BINARY_OPERATOR,
    Box,
    KeyboardShortcutBehavior,
    MetaKey,
    PiActions,
    PiBinaryExpressionCreator,
    PiCaret,
    PiCustomBehavior,
    PiEditor,
    PiElement,
    PiExpressionCreator,
    PiBinaryExpression,
    PiKey,
    PiLogger,
    PiTriggerType,
    PiUtils,
    AliasBox,
    OptionalBox,
    LEFT_MOST,
    RIGHT_MOST
} from "@projectit/core";

import {
    PiElementReference,
    Entity,
    AttributeType,
    MockEnumeration,
    AbsExpression,
    MultiplyExpression,
    EntityFunction,
    AttributeWithLimitedType,
    Text,
    AttributeWithEntityType,
    Variable,
    EntityExpression,
    AppliedFeature,
    AttributeRef,
    VariableRef,
    LiteralExpression,
    StringLiteralExpression,
    NumberLiteralExpression,
    BooleanLiteralExpression,
    BinaryExpression,
    PlusExpression,
    DivideExpression,
    AndExpression,
    OrExpression,
    ComparisonExpression,
    LessThenExpression,
    GreaterThenExpression,
    EqualsExpression,
    FunctionCallExpression,
    IfExpression,
    BaseType,
    Type,
    SomeOtherModelUnit,
    EntityModelUnit
} from "../../language/gen";

/**
 * This module implements all default actions for the editor.
 * These default actions are merged with custom actions.
 */
export const EXPRESSION_CREATORS: PiExpressionCreator[] = [];

export const BINARY_EXPRESSION_CREATORS: PiBinaryExpressionCreator[] = [
    {
        trigger: "*",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: PiTriggerType, editor: PiEditor) => {
            const parent = box.element;
            const newExpression = new MultiplyExpression();
            parent[(box as AliasBox).propertyName] = newExpression;
            return newExpression;
        }
    },
    {
        trigger: "+",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: PiTriggerType, editor: PiEditor) => {
            const parent = box.element;
            const newExpression = new PlusExpression();
            parent[(box as AliasBox).propertyName] = newExpression;
            return newExpression;
        }
    },
    {
        trigger: "/",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: PiTriggerType, editor: PiEditor) => {
            const parent = box.element;
            const newExpression = new DivideExpression();
            parent[(box as AliasBox).propertyName] = newExpression;
            return newExpression;
        }
    },
    {
        trigger: "AndExpression",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: PiTriggerType, editor: PiEditor) => {
            const parent = box.element;
            const newExpression = new AndExpression();
            parent[(box as AliasBox).propertyName] = newExpression;
            return newExpression;
        }
    },
    {
        trigger: "or",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: PiTriggerType, editor: PiEditor) => {
            const parent = box.element;
            const newExpression = new OrExpression();
            parent[(box as AliasBox).propertyName] = newExpression;
            return newExpression;
        }
    },
    {
        trigger: "<",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: PiTriggerType, editor: PiEditor) => {
            const parent = box.element;
            const newExpression = new LessThenExpression();
            parent[(box as AliasBox).propertyName] = newExpression;
            return newExpression;
        }
    },
    {
        trigger: "GreaterThenExpression",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: PiTriggerType, editor: PiEditor) => {
            const parent = box.element;
            const newExpression = new GreaterThenExpression();
            parent[(box as AliasBox).propertyName] = newExpression;
            return newExpression;
        }
    },
    {
        trigger: "EqualsExpression",
        activeInBoxRoles: [LEFT_MOST, RIGHT_MOST, BEFORE_BINARY_OPERATOR, AFTER_BINARY_OPERATOR],
        expressionBuilder: (box: Box, trigger: PiTriggerType, editor: PiEditor) => {
            const parent = box.element;
            const newExpression = new EqualsExpression();
            parent[(box as AliasBox).propertyName] = newExpression;
            return newExpression;
        }
    }
];

export const CUSTOM_BEHAVIORS: PiCustomBehavior[] = [
    {
        trigger: "isCompany",
        activeInBoxRoles: ["optional-isCompany"],
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            (box.parent as OptionalBox).mustShow = true;
            return null;
        },
        boxRoleToSelect: "Entity-isCompany"
    },
    {
        trigger: "base",
        activeInBoxRoles: ["optional-baseEntity"],
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            (box.parent as OptionalBox).mustShow = true;
            return null;
        },
        boxRoleToSelect: "Entity-baseEntity"
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: ["EntityModel-units"],
        trigger: "EntityModelUnit", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new EntityModelUnit();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "EntityModelUnit-name" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: ["EntityModel-extraUnit"],
        trigger: "SomeOtherModelUnit", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new SomeOtherModelUnit();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "SomeOtherModelUnit-name" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: ["SomeOtherModelUnit-somePart", "EntityModelUnit-entities"],
        trigger: "entity", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new Entity();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "BaseType-name" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: ["EntityModelUnit-functions", "Entity-functions", "Entity-int_functions"],
        trigger: "EntityFunction", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new EntityFunction();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "EntityFunction-name" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: ["Entity-attributes", "Entity-int_attrs"],
        trigger: "AttributeWithLimitedType", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new AttributeWithLimitedType();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "AttributeWithLimitedType-name" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: ["Entity-entAttributes"],
        trigger: "AttributeWithEntityType", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new AttributeWithEntityType();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "AttributeWithEntityType-name" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: [
            "AbsExpression-expr",
            "MultiplyExpression-left",
            "MultiplyExpression-right",
            "EntityFunction-expression",
            "PiBinaryExpression-left",
            "PiBinaryExpression-right",
            "PlusExpression-left",
            "PlusExpression-right",
            "DivideExpression-left",
            "DivideExpression-right",
            "AndExpression-left",
            "AndExpression-right",
            "OrExpression-left",
            "OrExpression-right",
            "ComparisonExpression-left",
            "ComparisonExpression-right",
            "LessThenExpression-left",
            "LessThenExpression-right",
            "GreaterThenExpression-left",
            "GreaterThenExpression-right",
            "EqualsExpression-left",
            "EqualsExpression-right",
            "IfExpression-condition",
            "IfExpression-whenTrue",
            "IfExpression-whenFalse"
        ],
        trigger: "AbsExpression", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new AbsExpression();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "AbsExpression-expr" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: [
            "AbsExpression-expr",
            "MultiplyExpression-left",
            "MultiplyExpression-right",
            "EntityFunction-expression",
            "PiBinaryExpression-left",
            "PiBinaryExpression-right",
            "PlusExpression-left",
            "PlusExpression-right",
            "DivideExpression-left",
            "DivideExpression-right",
            "AndExpression-left",
            "AndExpression-right",
            "OrExpression-left",
            "OrExpression-right",
            "ComparisonExpression-left",
            "ComparisonExpression-right",
            "LessThenExpression-left",
            "LessThenExpression-right",
            "GreaterThenExpression-left",
            "GreaterThenExpression-right",
            "EqualsExpression-left",
            "EqualsExpression-right",
            "IfExpression-condition",
            "IfExpression-whenTrue",
            "IfExpression-whenFalse"
        ],
        trigger: "*", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new MultiplyExpression();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "PiBinaryExpression-left" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: [
            "AbsExpression-expr",
            "MultiplyExpression-left",
            "MultiplyExpression-right",
            "EntityFunction-expression",
            "PiBinaryExpression-left",
            "PiBinaryExpression-right",
            "PlusExpression-left",
            "PlusExpression-right",
            "DivideExpression-left",
            "DivideExpression-right",
            "AndExpression-left",
            "AndExpression-right",
            "OrExpression-left",
            "OrExpression-right",
            "ComparisonExpression-left",
            "ComparisonExpression-right",
            "LessThenExpression-left",
            "LessThenExpression-right",
            "GreaterThenExpression-left",
            "GreaterThenExpression-right",
            "EqualsExpression-left",
            "EqualsExpression-right",
            "IfExpression-condition",
            "IfExpression-whenTrue",
            "IfExpression-whenFalse"
        ],
        trigger: "VariableRef", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new VariableRef();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "EntityExpression-appliedfeature" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: [
            "AbsExpression-expr",
            "MultiplyExpression-left",
            "MultiplyExpression-right",
            "EntityFunction-expression",
            "PiBinaryExpression-left",
            "PiBinaryExpression-right",
            "PlusExpression-left",
            "PlusExpression-right",
            "DivideExpression-left",
            "DivideExpression-right",
            "AndExpression-left",
            "AndExpression-right",
            "OrExpression-left",
            "OrExpression-right",
            "ComparisonExpression-left",
            "ComparisonExpression-right",
            "LessThenExpression-left",
            "LessThenExpression-right",
            "GreaterThenExpression-left",
            "GreaterThenExpression-right",
            "EqualsExpression-left",
            "EqualsExpression-right",
            "IfExpression-condition",
            "IfExpression-whenTrue",
            "IfExpression-whenFalse"
        ],
        trigger: "'", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new StringLiteralExpression();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "StringLiteralExpression-value" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: [
            "AbsExpression-expr",
            "MultiplyExpression-left",
            "MultiplyExpression-right",
            "EntityFunction-expression",
            "PiBinaryExpression-left",
            "PiBinaryExpression-right",
            "PlusExpression-left",
            "PlusExpression-right",
            "DivideExpression-left",
            "DivideExpression-right",
            "AndExpression-left",
            "AndExpression-right",
            "OrExpression-left",
            "OrExpression-right",
            "ComparisonExpression-left",
            "ComparisonExpression-right",
            "LessThenExpression-left",
            "LessThenExpression-right",
            "GreaterThenExpression-left",
            "GreaterThenExpression-right",
            "EqualsExpression-left",
            "EqualsExpression-right",
            "IfExpression-condition",
            "IfExpression-whenTrue",
            "IfExpression-whenFalse"
        ],
        trigger: "NumberLiteralExpression", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new NumberLiteralExpression();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "NumberLiteralExpression-value" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: [
            "AbsExpression-expr",
            "MultiplyExpression-left",
            "MultiplyExpression-right",
            "EntityFunction-expression",
            "PiBinaryExpression-left",
            "PiBinaryExpression-right",
            "PlusExpression-left",
            "PlusExpression-right",
            "DivideExpression-left",
            "DivideExpression-right",
            "AndExpression-left",
            "AndExpression-right",
            "OrExpression-left",
            "OrExpression-right",
            "ComparisonExpression-left",
            "ComparisonExpression-right",
            "LessThenExpression-left",
            "LessThenExpression-right",
            "GreaterThenExpression-left",
            "GreaterThenExpression-right",
            "EqualsExpression-left",
            "EqualsExpression-right",
            "IfExpression-condition",
            "IfExpression-whenTrue",
            "IfExpression-whenFalse"
        ],
        trigger: "BooleanLiteralExpression", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new BooleanLiteralExpression();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "BooleanLiteralExpression-value" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: [
            "AbsExpression-expr",
            "MultiplyExpression-left",
            "MultiplyExpression-right",
            "EntityFunction-expression",
            "PiBinaryExpression-left",
            "PiBinaryExpression-right",
            "PlusExpression-left",
            "PlusExpression-right",
            "DivideExpression-left",
            "DivideExpression-right",
            "AndExpression-left",
            "AndExpression-right",
            "OrExpression-left",
            "OrExpression-right",
            "ComparisonExpression-left",
            "ComparisonExpression-right",
            "LessThenExpression-left",
            "LessThenExpression-right",
            "GreaterThenExpression-left",
            "GreaterThenExpression-right",
            "EqualsExpression-left",
            "EqualsExpression-right",
            "IfExpression-condition",
            "IfExpression-whenTrue",
            "IfExpression-whenFalse"
        ],
        trigger: "+", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new PlusExpression();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "PiBinaryExpression-left" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: [
            "AbsExpression-expr",
            "MultiplyExpression-left",
            "MultiplyExpression-right",
            "EntityFunction-expression",
            "PiBinaryExpression-left",
            "PiBinaryExpression-right",
            "PlusExpression-left",
            "PlusExpression-right",
            "DivideExpression-left",
            "DivideExpression-right",
            "AndExpression-left",
            "AndExpression-right",
            "OrExpression-left",
            "OrExpression-right",
            "ComparisonExpression-left",
            "ComparisonExpression-right",
            "LessThenExpression-left",
            "LessThenExpression-right",
            "GreaterThenExpression-left",
            "GreaterThenExpression-right",
            "EqualsExpression-left",
            "EqualsExpression-right",
            "IfExpression-condition",
            "IfExpression-whenTrue",
            "IfExpression-whenFalse"
        ],
        trigger: "/", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new DivideExpression();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "PiBinaryExpression-left" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: [
            "AbsExpression-expr",
            "MultiplyExpression-left",
            "MultiplyExpression-right",
            "EntityFunction-expression",
            "PiBinaryExpression-left",
            "PiBinaryExpression-right",
            "PlusExpression-left",
            "PlusExpression-right",
            "DivideExpression-left",
            "DivideExpression-right",
            "AndExpression-left",
            "AndExpression-right",
            "OrExpression-left",
            "OrExpression-right",
            "ComparisonExpression-left",
            "ComparisonExpression-right",
            "LessThenExpression-left",
            "LessThenExpression-right",
            "GreaterThenExpression-left",
            "GreaterThenExpression-right",
            "EqualsExpression-left",
            "EqualsExpression-right",
            "IfExpression-condition",
            "IfExpression-whenTrue",
            "IfExpression-whenFalse"
        ],
        trigger: "AndExpression", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new AndExpression();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "PiBinaryExpression-left" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: [
            "AbsExpression-expr",
            "MultiplyExpression-left",
            "MultiplyExpression-right",
            "EntityFunction-expression",
            "PiBinaryExpression-left",
            "PiBinaryExpression-right",
            "PlusExpression-left",
            "PlusExpression-right",
            "DivideExpression-left",
            "DivideExpression-right",
            "AndExpression-left",
            "AndExpression-right",
            "OrExpression-left",
            "OrExpression-right",
            "ComparisonExpression-left",
            "ComparisonExpression-right",
            "LessThenExpression-left",
            "LessThenExpression-right",
            "GreaterThenExpression-left",
            "GreaterThenExpression-right",
            "EqualsExpression-left",
            "EqualsExpression-right",
            "IfExpression-condition",
            "IfExpression-whenTrue",
            "IfExpression-whenFalse"
        ],
        trigger: "or", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new OrExpression();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "PiBinaryExpression-left" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: [
            "AbsExpression-expr",
            "MultiplyExpression-left",
            "MultiplyExpression-right",
            "EntityFunction-expression",
            "PiBinaryExpression-left",
            "PiBinaryExpression-right",
            "PlusExpression-left",
            "PlusExpression-right",
            "DivideExpression-left",
            "DivideExpression-right",
            "AndExpression-left",
            "AndExpression-right",
            "OrExpression-left",
            "OrExpression-right",
            "ComparisonExpression-left",
            "ComparisonExpression-right",
            "LessThenExpression-left",
            "LessThenExpression-right",
            "GreaterThenExpression-left",
            "GreaterThenExpression-right",
            "EqualsExpression-left",
            "EqualsExpression-right",
            "IfExpression-condition",
            "IfExpression-whenTrue",
            "IfExpression-whenFalse"
        ],
        trigger: "<", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new LessThenExpression();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "PiBinaryExpression-left" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: [
            "AbsExpression-expr",
            "MultiplyExpression-left",
            "MultiplyExpression-right",
            "EntityFunction-expression",
            "PiBinaryExpression-left",
            "PiBinaryExpression-right",
            "PlusExpression-left",
            "PlusExpression-right",
            "DivideExpression-left",
            "DivideExpression-right",
            "AndExpression-left",
            "AndExpression-right",
            "OrExpression-left",
            "OrExpression-right",
            "ComparisonExpression-left",
            "ComparisonExpression-right",
            "LessThenExpression-left",
            "LessThenExpression-right",
            "GreaterThenExpression-left",
            "GreaterThenExpression-right",
            "EqualsExpression-left",
            "EqualsExpression-right",
            "IfExpression-condition",
            "IfExpression-whenTrue",
            "IfExpression-whenFalse"
        ],
        trigger: "GreaterThenExpression", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new GreaterThenExpression();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "PiBinaryExpression-left" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: [
            "AbsExpression-expr",
            "MultiplyExpression-left",
            "MultiplyExpression-right",
            "EntityFunction-expression",
            "PiBinaryExpression-left",
            "PiBinaryExpression-right",
            "PlusExpression-left",
            "PlusExpression-right",
            "DivideExpression-left",
            "DivideExpression-right",
            "AndExpression-left",
            "AndExpression-right",
            "OrExpression-left",
            "OrExpression-right",
            "ComparisonExpression-left",
            "ComparisonExpression-right",
            "LessThenExpression-left",
            "LessThenExpression-right",
            "GreaterThenExpression-left",
            "GreaterThenExpression-right",
            "EqualsExpression-left",
            "EqualsExpression-right",
            "IfExpression-condition",
            "IfExpression-whenTrue",
            "IfExpression-whenFalse"
        ],
        trigger: "EqualsExpression", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new EqualsExpression();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "PiBinaryExpression-left" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: [
            "AbsExpression-expr",
            "MultiplyExpression-left",
            "MultiplyExpression-right",
            "EntityFunction-expression",
            "PiBinaryExpression-left",
            "PiBinaryExpression-right",
            "PlusExpression-left",
            "PlusExpression-right",
            "DivideExpression-left",
            "DivideExpression-right",
            "AndExpression-left",
            "AndExpression-right",
            "OrExpression-left",
            "OrExpression-right",
            "ComparisonExpression-left",
            "ComparisonExpression-right",
            "LessThenExpression-left",
            "LessThenExpression-right",
            "GreaterThenExpression-left",
            "GreaterThenExpression-right",
            "EqualsExpression-left",
            "EqualsExpression-right",
            "IfExpression-condition",
            "IfExpression-whenTrue",
            "IfExpression-whenFalse"
        ],
        trigger: "function", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new FunctionCallExpression();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "FunctionCallExpression-functionDefinition" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: [
            "AbsExpression-expr",
            "MultiplyExpression-left",
            "MultiplyExpression-right",
            "EntityFunction-expression",
            "PiBinaryExpression-left",
            "PiBinaryExpression-right",
            "PlusExpression-left",
            "PlusExpression-right",
            "DivideExpression-left",
            "DivideExpression-right",
            "AndExpression-left",
            "AndExpression-right",
            "OrExpression-left",
            "OrExpression-right",
            "ComparisonExpression-left",
            "ComparisonExpression-right",
            "LessThenExpression-left",
            "LessThenExpression-right",
            "GreaterThenExpression-left",
            "GreaterThenExpression-right",
            "EqualsExpression-left",
            "EqualsExpression-right",
            "IfExpression-condition",
            "IfExpression-whenTrue",
            "IfExpression-whenFalse"
        ],
        trigger: "if", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new IfExpression();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "IfExpression-condition" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: [
            "AbsExpression-appliedfeature",
            "MultiplyExpression-appliedfeature",
            "EntityExpression-appliedfeature",
            "AppliedFeature-appliedfeature",
            "AttributeRef-appliedfeature",
            "VariableRef-appliedfeature",
            "LiteralExpression-appliedfeature",
            "StringLiteralExpression-appliedfeature",
            "NumberLiteralExpression-appliedfeature",
            "BooleanLiteralExpression-appliedfeature",
            "PiBinaryExpression-appliedfeature",
            "PlusExpression-appliedfeature",
            "DivideExpression-appliedfeature",
            "AndExpression-appliedfeature",
            "OrExpression-appliedfeature",
            "ComparisonExpression-appliedfeature",
            "LessThenExpression-appliedfeature",
            "GreaterThenExpression-appliedfeature",
            "EqualsExpression-appliedfeature",
            "FunctionCallExpression-appliedfeature",
            "IfExpression-appliedfeature"
        ],
        trigger: "AttributeRef", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new AttributeRef();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "AppliedFeature-appliedfeature" /* CURSOR 4 */
    },

    {
        // ProjectIt Generator: custom Action for creating a PiElement
        activeInBoxRoles: ["EntityFunction-parameters"],
        trigger: "Variable", // for single Concept part
        action: (box: Box, trigger: PiTriggerType, ed: PiEditor): PiElement | null => {
            const parent = box.element;
            const newElement = new Variable();
            const property = parent[(box as AliasBox).propertyName];
            if (Array.isArray(property)) {
                parent[(box as AliasBox).propertyName].push(newElement);
            } else {
                parent[(box as AliasBox).propertyName] = newElement;
            }
            return newElement;
        },

        boxRoleToSelect: "Variable-name" /* CURSOR 4 */
    }
];

export const KEYBOARD: KeyboardShortcutBehavior[] = [
    // {
    //     activeInBoxRoles: ["new-attributes"],
    //     trigger: { meta: MetaKey.None, keyCode: Keys.ENTER},
    //     action: (box: Box, trigger: PiTriggerType, ed: PiEditor): Promise< PiElement> => {
    //         var parent: Entity = box.element as Entity;
    //         const newattributes: AttributeWithLimitedType = new AttributeWithLimitedType();
    //         parent.attributes.push(newattributes);
    //         return Promise.resolve(newattributes);
    //     },
    //     boxRoleToSelect: "attributes-name"
    // },
    // {
    //     activeInBoxRoles: ["new-entAttributes"],
    //     trigger: { meta: MetaKey.None, keyCode: Keys.ENTER},
    //     action: (box: Box, trigger: PiTriggerType, ed: PiEditor): Promise< PiElement> => {
    //         var parent: Entity = box.element as Entity;
    //         const newentAttributes: AttributeWithEntityType = new AttributeWithEntityType();
    //         parent.entAttributes.push(newentAttributes);
    //         return Promise.resolve(newentAttributes);
    //     },
    //     boxRoleToSelect: "entAttributes-name"
    // },
    // {
    //     activeInBoxRoles: ["new-functions"],
    //     trigger: { meta: MetaKey.None, keyCode: Keys.ENTER},
    //     action: (box: Box, trigger: PiTriggerType, ed: PiEditor): Promise< PiElement> => {
    //         var parent: Entity = box.element as Entity;
    //         const newfunctions: EntityFunction = new EntityFunction();
    //         parent.functions.push(newfunctions);
    //         return Promise.resolve(newfunctions);
    //     },
    //     boxRoleToSelect: "functions-name"
    // },
    // {
    //     activeInBoxRoles: ["new-int_attrs"],
    //     trigger: { meta: MetaKey.None, keyCode: Keys.ENTER},
    //     action: (box: Box, trigger: PiTriggerType, ed: PiEditor): Promise< PiElement> => {
    //         var parent: Type = box.element as Type;
    //         const newint_attrs: AttributeWithLimitedType = new AttributeWithLimitedType();
    //         parent.int_attrs.push(newint_attrs);
    //         return Promise.resolve(newint_attrs);
    //     },
    //     boxRoleToSelect: "int_attrs-name"
    // },
    // {
    //     activeInBoxRoles: ["new-int_functions"],
    //     trigger: { meta: MetaKey.None, keyCode: Keys.ENTER},
    //     action: (box: Box, trigger: PiTriggerType, ed: PiEditor): Promise< PiElement> => {
    //         var parent: Type = box.element as Type;
    //         const newint_functions: EntityFunction = new EntityFunction();
    //         parent.int_functions.push(newint_functions);
    //         return Promise.resolve(newint_functions);
    //     },
    //     boxRoleToSelect: "int_functions-name"
    // },
    // {
    //     activeInBoxRoles: ["new-parameters"],
    //     trigger: { meta: MetaKey.None, keyCode: Keys.ENTER},
    //     action: (box: Box, trigger: PiTriggerType, ed: PiEditor): Promise< PiElement> => {
    //         var parent: EntityFunction = box.element as EntityFunction;
    //         const newparameters: Variable = new Variable();
    //         parent.parameters.push(newparameters);
    //         return Promise.resolve(newparameters);
    //     },
    //     boxRoleToSelect: "parameters-name"
    // }
];
