// Generated by the ProjectIt Language Generator.
import { observable, makeObservable } from "mobx";

import * as projectitStyles from "../../editor/styles/styles";
// TODO import { projectitStyles } from "../../editor/styles/styles";
import {
    styleToCSS,
    BoxFactory,
    AliasBox,
    Box,
    GridBox,
    IndentBox,
    GridCell,
    GridUtil,
    HorizontalListBox,
    SelectOption,
    SvgBox,
    SelectBox,
    KeyPressAction,
    LabelBox,
    PiElement,
    PiProjection,
    OptionalBox,
    TextBox,
    VerticalListBox,
    VerticalPiElementListBox,
    PiUtils,
    createDefaultBinaryBox,
    createDefaultExpressionBox,
    isPiBinaryExpression,
    PiBinaryExpression,
    BehaviorExecutionResult
} from "@projectit/core";

import { PiElementReference } from "../../language/gen";
import {
    SomeOtherModelUnit,
    EntityModelUnit,
    Entity,
    AttributeType,
    MockEnumeration,
    AbsExpression,
    MultiplyExpression,
    EntityFunction,
    AttributeWithLimitedType,
    Text,
    AttributeWithEntityType,
    Variable,
    EntityExpression,
    AppliedFeature,
    AttributeRef,
    VariableRef,
    LiteralExpression,
    StringLiteralExpression,
    NumberLiteralExpression,
    BooleanLiteralExpression,
    BinaryExpression,
    PlusExpression,
    DivideExpression,
    AndExpression,
    OrExpression,
    ComparisonExpression,
    LessThenExpression,
    GreaterThenExpression,
    EqualsExpression,
    FunctionCallExpression,
    IfExpression,
    BaseType,
    Type
} from "../../language/gen";
import { EntitySelectionHelpers } from "./EntitySelectionHelpers";
import { EntityEnvironment } from "../../environment/gen/EntityEnvironment";

/**
 * Class EntityProjectionDefault implements the default projections for elements of
 * language Entity.
 * These are merged with the custom build additions and definition-based editor parts
 * in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */
export class EntityProjectionDefault implements PiProjection {
    private helpers: EntitySelectionHelpers = new EntitySelectionHelpers();
    rootProjection: PiProjection;
    showBrackets: boolean = false;
    name: string = "StartEditor";

    constructor(name?: string) {
        if (!!name) {
            this.name = name;
        }
        makeObservable(this, {
            showBrackets: observable
        });
    }

    getBox(exp: PiElement): Box {
        if (exp === null) {
            return null;
        }

        switch (exp.piLanguageConcept()) {
            case "SomeOtherModelUnit":
                return this.getSomeOtherModelUnitBox(exp as SomeOtherModelUnit);
            case "EntityModelUnit":
                return this.getEntityModelUnitBox(exp as EntityModelUnit);
            case "Entity":
                return this.getEntityBox(exp as Entity);
            case "AttributeType":
                return this.getAttributeTypeBox(exp as AttributeType);
            case "MockEnumeration":
                return this.getMockEnumerationBox(exp as MockEnumeration);
            case "AbsExpression":
                return this.getAbsExpressionBox(exp as AbsExpression);
            case "MultiplyExpression":
                return this.getMultiplyExpressionBox(exp as MultiplyExpression);
            case "EntityFunction":
                return this.getEntityFunctionBox(exp as EntityFunction);
            case "AttributeWithLimitedType":
                return this.getAttributeWithLimitedTypeBox(exp as AttributeWithLimitedType);
            case "Text":
                return this.getTextBox(exp as Text);
            case "AttributeWithEntityType":
                return this.getAttributeWithEntityTypeBox(exp as AttributeWithEntityType);
            case "Variable":
                return this.getVariableBox(exp as Variable);
            case "EntityExpression":
                return this.getEntityExpressionBox(exp as EntityExpression);
            case "AppliedFeature":
                return this.getAppliedFeatureBox(exp as AppliedFeature);
            case "AttributeRef":
                return this.getAttributeRefBox(exp as AttributeRef);
            case "VariableRef":
                return this.getVariableRefBox(exp as VariableRef);
            case "LiteralExpression":
                return this.getLiteralExpressionBox(exp as LiteralExpression);
            case "StringLiteralExpression":
                return this.getStringLiteralExpressionBox(exp as StringLiteralExpression);
            case "NumberLiteralExpression":
                return this.getNumberLiteralExpressionBox(exp as NumberLiteralExpression);
            case "BooleanLiteralExpression":
                return this.getBooleanLiteralExpressionBox(exp as BooleanLiteralExpression);
            case "BinaryExpression":
                return this.getBinaryExpressionBox(exp as BinaryExpression);
            case "PlusExpression":
                return this.getPlusExpressionBox(exp as PlusExpression);
            case "DivideExpression":
                return this.getDivideExpressionBox(exp as DivideExpression);
            case "AndExpression":
                return this.getAndExpressionBox(exp as AndExpression);
            case "OrExpression":
                return this.getOrExpressionBox(exp as OrExpression);
            case "ComparisonExpression":
                return this.getComparisonExpressionBox(exp as ComparisonExpression);
            case "LessThenExpression":
                return this.getLessThenExpressionBox(exp as LessThenExpression);
            case "GreaterThenExpression":
                return this.getGreaterThenExpressionBox(exp as GreaterThenExpression);
            case "EqualsExpression":
                return this.getEqualsExpressionBox(exp as EqualsExpression);
            case "FunctionCallExpression":
                return this.getFunctionCallExpressionBox(exp as FunctionCallExpression);
            case "IfExpression":
                return this.getIfExpressionBox(exp as IfExpression);
        }
        // nothing fits
        throw new Error("No box defined for this expression:" + exp.piId());
    }

    private getMultiplyExpressionBox(element: MultiplyExpression) {
        return this.createBinaryBox(this, element, "*");
    }

    private getBinaryExpressionBox(element: BinaryExpression) {
        return this.createBinaryBox(this, element, "BinaryExpression");
    }

    private getPlusExpressionBox(element: PlusExpression) {
        return this.createBinaryBox(this, element, "+");
    }

    private getDivideExpressionBox(element: DivideExpression) {
        return this.createBinaryBox(this, element, "/");
    }

    private getAndExpressionBox(element: AndExpression) {
        return this.createBinaryBox(this, element, "AndExpression");
    }

    private getOrExpressionBox(element: OrExpression) {
        return this.createBinaryBox(this, element, "or");
    }

    private getComparisonExpressionBox(element: ComparisonExpression) {
        return this.createBinaryBox(this, element, "ComparisonExpression");
    }

    private getLessThenExpressionBox(element: LessThenExpression) {
        return this.createBinaryBox(this, element, "<");
    }

    private getGreaterThenExpressionBox(element: GreaterThenExpression) {
        return this.createBinaryBox(this, element, "GreaterThenExpression");
    }

    private getEqualsExpressionBox(element: EqualsExpression) {
        return this.createBinaryBox(this, element, "EqualsExpression");
    }

    public getSomeOtherModelUnitBox(someothermodelunit: SomeOtherModelUnit): Box {
        return BoxFactory.verticalList(someothermodelunit, "SomeOtherModelUnit-overall", [
            BoxFactory.horizontalList(
                someothermodelunit,
                "SomeOtherModelUnit-hlist-line-0",
                [
                    BoxFactory.label(someothermodelunit, "someothermodelunit-label-line-0-item-0", "SomeOtherModelUnit", {
                        style: styleToCSS(projectitStyles.conceptkeyword),
                        selectable: false
                    }),
                    BoxFactory.text(
                        someothermodelunit,
                        "SomeOtherModelUnit-name",
                        () => someothermodelunit.name,
                        (c: string) => (someothermodelunit.name = c as string),
                        {
                            placeHolder: "text",
                            style: styleToCSS(projectitStyles.placeholdertext)
                        }
                    )
                ],
                { selectable: true }
            ),
            BoxFactory.indent(
                someothermodelunit,
                "SomeOtherModelUnit-indent-line-1",
                4,
                BoxFactory.horizontalList(
                    someothermodelunit,
                    "SomeOtherModelUnit-hlist-line-1",
                    [
                        BoxFactory.label(someothermodelunit, "someothermodelunit-label-line-1-item-0", "somePart", {
                            style: styleToCSS(projectitStyles.propertykeyword),
                            selectable: false
                        }),
                        !!someothermodelunit.somePart
                            ? this.rootProjection.getBox(someothermodelunit.somePart)
                            : BoxFactory.alias(someothermodelunit, "SomeOtherModelUnit-somePart", "[add]", { propertyName: "somePart" })
                    ],
                    { selectable: true }
                )
            )
        ]);
    }
    public getEntityModelUnitBox(entitymodelunit: EntityModelUnit): Box {
        return BoxFactory.verticalList(entitymodelunit, "EntityModelUnit-overall", [
            BoxFactory.horizontalList(
                entitymodelunit,
                "EntityModelUnit-hlist-line-0",
                [
                    BoxFactory.label(entitymodelunit, "entitymodelunit-label-line-0-item-0", "model ", {
                        style: styleToCSS(projectitStyles.propertykeyword),
                        selectable: false
                    }),
                    BoxFactory.text(
                        entitymodelunit,
                        "EntityModelUnit-name",
                        () => entitymodelunit.name,
                        (c: string) => (entitymodelunit.name = c as string),
                        {
                            placeHolder: "text",
                            style: styleToCSS(projectitStyles.placeholdertext)
                        }
                    ),
                    BoxFactory.label(entitymodelunit, "entitymodelunit-label-line-0-item-2", "{", {
                        style: styleToCSS(projectitStyles.propertykeyword),
                        selectable: false
                    })
                ],
                { selectable: true }
            ),
            BoxFactory.label(entitymodelunit, "entitymodelunit-label-line-1-item-0", "entities:", {
                style: styleToCSS(projectitStyles.propertykeyword),
                selectable: false
            }),
            BoxFactory.indent(
                entitymodelunit,
                "EntityModelUnit-indent-line-2",
                4,
                BoxFactory.verticalList(
                    entitymodelunit,
                    "EntityModelUnit-entities-list",
                    entitymodelunit.entities
                        .map(feature => {
                            const roleName: string = "EntityModelUnit-entities-" + feature.piId() + "-separator";
                            return BoxFactory.horizontalList(entitymodelunit, roleName, [
                                this.rootProjection.getBox(feature),
                                BoxFactory.label(entitymodelunit, roleName + "label", " && ")
                            ]) as Box;
                        })
                        .concat(
                            BoxFactory.alias(entitymodelunit, "EntityModelUnit-entities", "<+ entities>", {
                                //  add entities
                                style: styleToCSS(projectitStyles.placeholdertext),
                                propertyName: "entities"
                            })
                        )
                )
            ),
            BoxFactory.label(entitymodelunit, "entitymodelunit-label-line-3-item-0", "model wide functions:", {
                style: styleToCSS(projectitStyles.propertykeyword),
                selectable: false
            }),
            BoxFactory.indent(
                entitymodelunit,
                "EntityModelUnit-indent-line-4",
                4,
                BoxFactory.horizontalList(
                    entitymodelunit,
                    "EntityModelUnit-functions-list",
                    entitymodelunit.functions
                        .map(feature => {
                            const roleName: string = "EntityModelUnit-functions-" + feature.piId() + "-separator";
                            return BoxFactory.horizontalList(entitymodelunit, roleName, [
                                this.rootProjection.getBox(feature),
                                BoxFactory.label(entitymodelunit, roleName + "label", "; ")
                            ]) as Box;
                        })
                        .concat(
                            BoxFactory.alias(entitymodelunit, "EntityModelUnit-functions", "<+ functions>", {
                                //  add functions
                                style: styleToCSS(projectitStyles.placeholdertext),
                                propertyName: "functions"
                            })
                        )
                )
            ),
            BoxFactory.label(entitymodelunit, "entitymodelunit-label-line-5-item-0", "}", {
                style: styleToCSS(projectitStyles.propertykeyword),
                selectable: false
            })
        ]);
    }
    public getEntityBox(entity: Entity): Box {
        return BoxFactory.verticalList(entity, "Entity-overall", [
            BoxFactory.horizontalList(
                entity,
                "Entity-hlist-line-0",
                [
                    BoxFactory.optional(
                        entity,
                        "optional-isCompany",
                        () => !!entity.isCompany,
                        BoxFactory.text(
                            entity,
                            "Entity-isCompany",
                            () => "" + entity.isCompany,
                            (c: string) => (entity.isCompany = c === "true" ? true : false),
                            {
                                placeHolder: "text",
                                style: styleToCSS(projectitStyles.placeholdertext)
                            }
                        ),
                        false,
                        "<+>"
                    ),
                    ,
                    BoxFactory.label(entity, "entity-label-line-0-item-1", "entity ", {
                        style: styleToCSS(projectitStyles.propertykeyword),
                        selectable: false
                    }),
                    BoxFactory.text(
                        entity,
                        "BaseType-name",
                        () => entity.name,
                        (c: string) => (entity.name = c as string),
                        {
                            placeHolder: "text",
                            style: styleToCSS(projectitStyles.placeholdertext)
                        }
                    ),
                    BoxFactory.optional(
                        entity,
                        "optional-baseEntity",
                        () => !!entity.baseEntity,
                        BoxFactory.horizontalList(entity, "Entity-hlist-line-0", [
                            BoxFactory.label(entity, "entity-label-line-0-item-1", "base ", {
                                style: styleToCSS(projectitStyles.propertykeyword),
                                selectable: false
                            }),
                            this.helpers.getReferenceBox(
                                entity,
                                "Entity-baseEntity",
                                "<select baseEntity>",
                                "Entity",
                                () => {
                                    if (!!entity.baseEntity) {
                                        return { id: entity.baseEntity.name, label: entity.baseEntity.name };
                                    } else {
                                        return null;
                                    }
                                },
                                async (option: SelectOption): Promise<BehaviorExecutionResult> => {
                                    if (!!option) {
                                        entity.baseEntity = PiElementReference.create<Entity>(
                                            EntityEnvironment.getInstance().scoper.getFromVisibleElements(
                                                entity,
                                                option.label,
                                                "Entity"
                                            ) as Entity,
                                            "Entity"
                                        );
                                    } else {
                                        entity.baseEntity = null;
                                    }
                                    return BehaviorExecutionResult.EXECUTED;
                                }
                            )
                        ]),
                        false,
                        "<+>"
                    ),
                    ,
                    BoxFactory.label(entity, "entity-label-line-0-item-4", "{", {
                        style: styleToCSS(projectitStyles.propertykeyword),
                        selectable: false
                    })
                ],
                { selectable: true }
            ),
            BoxFactory.indent(
                entity,
                "Entity-indent-line-1",
                4,
                BoxFactory.verticalList(
                    entity,
                    "Entity-attributes-list",
                    entity.attributes
                        .map(feature => {
                            const roleName: string = "Entity-attributes-" + feature.piId() + "-separator";
                            return BoxFactory.horizontalList(entity, roleName, [
                                this.rootProjection.getBox(feature),
                                BoxFactory.label(entity, roleName + "label", "")
                            ]) as Box;
                        })
                        .concat(
                            BoxFactory.alias(entity, "Entity-attributes", "<+ attributes>", {
                                //  add attributes
                                style: styleToCSS(projectitStyles.placeholdertext),
                                propertyName: "attributes"
                            })
                        )
                )
            ),
            BoxFactory.indent(
                entity,
                "Entity-indent-line-2",
                4,
                BoxFactory.verticalList(
                    entity,
                    "Entity-functions-list",
                    entity.functions
                        .map(feature => {
                            const roleName: string = "Entity-functions-" + feature.piId() + "-separator";
                            return BoxFactory.horizontalList(entity, roleName, [
                                this.rootProjection.getBox(feature),
                                BoxFactory.label(entity, roleName + "label", "")
                            ]) as Box;
                        })
                        .concat(
                            BoxFactory.alias(entity, "Entity-functions", "<+ functions>", {
                                //  add functions
                                style: styleToCSS(projectitStyles.placeholdertext),
                                propertyName: "functions"
                            })
                        )
                )
            ),
            BoxFactory.label(entity, "entity-label-line-3-item-0", "}", {
                style: styleToCSS(projectitStyles.propertykeyword),
                selectable: false
            })
        ]);
    }
    public getAttributeTypeBox(attributetype: AttributeType): Box {
        return BoxFactory.verticalList(attributetype, "AttributeType-overall", [
            BoxFactory.horizontalList(
                attributetype,
                "AttributeType-hlist-line-0",
                [
                    BoxFactory.label(attributetype, "attributetype-label-line-0-item-0", "AttributeType", {
                        style: styleToCSS(projectitStyles.conceptkeyword),
                        selectable: false
                    }),
                    BoxFactory.text(
                        attributetype,
                        "AttributeType-name",
                        () => attributetype.name,
                        (c: string) => (attributetype.name = c as string),
                        {
                            placeHolder: "text",
                            style: styleToCSS(projectitStyles.placeholdertext)
                        }
                    )
                ],
                { selectable: true }
            ),
            BoxFactory.indent(
                attributetype,
                "AttributeType-indent-line-1",
                4,
                BoxFactory.horizontalList(
                    attributetype,
                    "AttributeType-hlist-line-1",
                    [
                        BoxFactory.label(attributetype, "attributetype-label-line-1-item-0", "extra", {
                            style: styleToCSS(projectitStyles.propertykeyword),
                            selectable: false
                        }),
                        BoxFactory.text(
                            attributetype,
                            "AttributeType-extra",
                            () => "" + attributetype.extra,
                            (c: string) => (attributetype.extra = Number.parseInt(c)),
                            {
                                placeHolder: "text",
                                style: styleToCSS(projectitStyles.placeholdertext)
                            }
                        )
                    ],
                    { selectable: true }
                )
            ),
            BoxFactory.indent(
                attributetype,
                "AttributeType-indent-line-2",
                4,
                BoxFactory.horizontalList(
                    attributetype,
                    "AttributeType-hlist-line-2",
                    [
                        BoxFactory.label(attributetype, "attributetype-label-line-2-item-0", "baseInterface_attr", {
                            style: styleToCSS(projectitStyles.propertykeyword),
                            selectable: false
                        }),
                        BoxFactory.text(
                            attributetype,
                            "BaseType-baseInterface_attr",
                            () => "" + attributetype.baseInterface_attr,
                            (c: string) => (attributetype.baseInterface_attr = Number.parseInt(c)),
                            {
                                placeHolder: "text",
                                style: styleToCSS(projectitStyles.placeholdertext)
                            }
                        )
                    ],
                    { selectable: true }
                )
            )
        ]);
    }
    public getMockEnumerationBox(mockenumeration: MockEnumeration): Box {
        return BoxFactory.horizontalList(
            mockenumeration,
            "MockEnumeration-hlist-line-0",
            [
                BoxFactory.label(mockenumeration, "mockenumeration-label-line-0-item-0", "MockEnumeration", {
                    style: styleToCSS(projectitStyles.conceptkeyword),
                    selectable: false
                }),
                BoxFactory.text(
                    mockenumeration,
                    "MockEnumeration-name",
                    () => mockenumeration.name,
                    (c: string) => (mockenumeration.name = c as string),
                    {
                        placeHolder: "text",
                        style: styleToCSS(projectitStyles.placeholdertext)
                    }
                )
            ],
            { selectable: true }
        );
    }
    public getAbsExpressionBox(absexpression: AbsExpression): Box {
        return createDefaultExpressionBox(
            absexpression,
            "default-expression-box",
            [
                BoxFactory.verticalList(absexpression, "AbsExpression-overall", [
                    BoxFactory.label(absexpression, "absexpression-label-line-0-item-0", "AbsExpression", {
                        style: styleToCSS(projectitStyles.conceptkeyword),
                        selectable: false
                    }),
                    BoxFactory.indent(
                        absexpression,
                        "AbsExpression-indent-line-1",
                        4,
                        BoxFactory.horizontalList(
                            absexpression,
                            "AbsExpression-hlist-line-1",
                            [
                                BoxFactory.label(absexpression, "absexpression-label-line-1-item-0", "expr", {
                                    style: styleToCSS(projectitStyles.propertykeyword),
                                    selectable: false
                                }),
                                !!absexpression.expr
                                    ? this.rootProjection.getBox(absexpression.expr)
                                    : BoxFactory.alias(absexpression, "AbsExpression-expr", "[add]", { propertyName: "expr" })
                            ],
                            { selectable: true }
                        )
                    ),
                    BoxFactory.indent(
                        absexpression,
                        "AbsExpression-indent-line-2",
                        4,
                        BoxFactory.horizontalList(
                            absexpression,
                            "AbsExpression-hlist-line-2",
                            [
                                BoxFactory.label(absexpression, "absexpression-label-line-2-item-0", "appliedfeature", {
                                    style: styleToCSS(projectitStyles.propertykeyword),
                                    selectable: false
                                }),
                                !!absexpression.appliedfeature
                                    ? this.rootProjection.getBox(absexpression.appliedfeature)
                                    : BoxFactory.alias(absexpression, "EntityExpression-appliedfeature", "[add]", {
                                          propertyName: "appliedfeature"
                                      })
                            ],
                            { selectable: true }
                        )
                    )
                ])
            ],
            { selectable: false }
        );
    }
    public getEntityFunctionBox(entityfunction: EntityFunction): Box {
        return BoxFactory.verticalList(entityfunction, "EntityFunction-overall", [
            BoxFactory.horizontalList(
                entityfunction,
                "EntityFunction-hlist-line-0",
                [
                    BoxFactory.label(entityfunction, "entityfunction-label-line-0-item-0", "EntityFunction", {
                        style: styleToCSS(projectitStyles.conceptkeyword),
                        selectable: false
                    }),
                    BoxFactory.text(
                        entityfunction,
                        "EntityFunction-name",
                        () => entityfunction.name,
                        (c: string) => (entityfunction.name = c as string),
                        {
                            placeHolder: "text",
                            style: styleToCSS(projectitStyles.placeholdertext)
                        }
                    )
                ],
                { selectable: true }
            ),
            BoxFactory.indent(
                entityfunction,
                "EntityFunction-indent-line-1",
                4,
                BoxFactory.horizontalList(
                    entityfunction,
                    "EntityFunction-hlist-line-1",
                    [
                        BoxFactory.label(entityfunction, "entityfunction-label-line-1-item-0", "aliases", {
                            style: styleToCSS(projectitStyles.propertykeyword),
                            selectable: false
                        }),
                        BoxFactory.horizontalList(
                            entityfunction,
                            "EntityFunction-aliases-hlist",
                            (
                                entityfunction.aliases.map((item, index) =>
                                    BoxFactory.text(
                                        entityfunction,
                                        "EntityFunction-aliases",
                                        () => entityfunction.aliases[index],
                                        (c: string) => (entityfunction.aliases[index] = c as string),
                                        {
                                            placeHolder: "text",
                                            style: styleToCSS(projectitStyles.placeholdertext)
                                        }
                                    )
                                ) as Box[]
                            ).concat([
                                // TODO  Create Action for the role to actually add an element.
                                BoxFactory.alias(entityfunction, "new-EntityFunction-aliases-hlist", "<+ aliases>")
                            ])
                        )
                    ],
                    { selectable: true }
                )
            ),
            BoxFactory.indent(
                entityfunction,
                "EntityFunction-indent-line-2",
                4,
                BoxFactory.horizontalList(
                    entityfunction,
                    "EntityFunction-hlist-line-2",
                    [
                        BoxFactory.label(entityfunction, "entityfunction-label-line-2-item-0", "expression", {
                            style: styleToCSS(projectitStyles.propertykeyword),
                            selectable: false
                        }),
                        !!entityfunction.expression
                            ? this.rootProjection.getBox(entityfunction.expression)
                            : BoxFactory.alias(entityfunction, "EntityFunction-expression", "[add]", { propertyName: "expression" })
                    ],
                    { selectable: true }
                )
            ),
            BoxFactory.indent(
                entityfunction,
                "EntityFunction-indent-line-3",
                4,
                BoxFactory.label(entityfunction, "entityfunction-label-line-3-item-0", "parameters", {
                    style: styleToCSS(projectitStyles.propertykeyword),
                    selectable: false
                })
            ),
            BoxFactory.indent(
                entityfunction,
                "EntityFunction-indent-line-4",
                8,
                BoxFactory.verticalList(
                    entityfunction,
                    "EntityFunction-parameters-list",
                    entityfunction.parameters
                        .map(feature => {
                            const roleName: string = "EntityFunction-parameters-" + feature.piId() + "-separator";
                            return BoxFactory.horizontalList(entityfunction, roleName, [
                                this.rootProjection.getBox(feature),
                                BoxFactory.label(entityfunction, roleName + "label", "")
                            ]) as Box;
                        })
                        .concat(
                            BoxFactory.alias(entityfunction, "EntityFunction-parameters", "<+ parameters>", {
                                //  add parameters
                                style: styleToCSS(projectitStyles.placeholdertext),
                                propertyName: "parameters"
                            })
                        )
                )
            ),
            BoxFactory.indent(
                entityfunction,
                "EntityFunction-indent-line-5",
                4,
                BoxFactory.horizontalList(
                    entityfunction,
                    "EntityFunction-hlist-line-5",
                    [
                        BoxFactory.label(entityfunction, "entityfunction-label-line-5-item-0", "declaredType", {
                            style: styleToCSS(projectitStyles.propertykeyword),
                            selectable: false
                        }),
                        this.helpers.getReferenceBox(
                            entityfunction,
                            "EntityFunction-declaredType",
                            "<select declaredType>",
                            "Type",
                            () => {
                                if (!!entityfunction.declaredType) {
                                    return { id: entityfunction.declaredType.name, label: entityfunction.declaredType.name };
                                } else {
                                    return null;
                                }
                            },
                            async (option: SelectOption): Promise<BehaviorExecutionResult> => {
                                if (!!option) {
                                    entityfunction.declaredType = PiElementReference.create<Type>(
                                        EntityEnvironment.getInstance().scoper.getFromVisibleElements(
                                            entityfunction,
                                            option.label,
                                            "Type"
                                        ) as Type,
                                        "Type"
                                    );
                                } else {
                                    entityfunction.declaredType = null;
                                }
                                return BehaviorExecutionResult.EXECUTED;
                            }
                        )
                    ],
                    { selectable: true }
                )
            )
        ]);
    }
    public getAttributeWithLimitedTypeBox(attributewithlimitedtype: AttributeWithLimitedType): Box {
        return BoxFactory.horizontalList(
            attributewithlimitedtype,
            "AttributeWithLimitedType-hlist-line-0",
            [
                BoxFactory.text(
                    attributewithlimitedtype,
                    "AttributeWithLimitedType-name",
                    () => attributewithlimitedtype.name,
                    (c: string) => (attributewithlimitedtype.name = c as string),
                    {
                        placeHolder: "text",
                        style: styleToCSS(projectitStyles.placeholdertext)
                    }
                ),
                BoxFactory.label(attributewithlimitedtype, "attributewithlimitedtype-label-line-0-item-1", ": ", {
                    style: styleToCSS(projectitStyles.propertykeyword),
                    selectable: false
                }),
                this.helpers.getReferenceBox(
                    attributewithlimitedtype,
                    "AttributeWithLimitedType-declaredType",
                    "<select declaredType>",
                    "AttributeType",
                    () => {
                        if (!!attributewithlimitedtype.declaredType) {
                            return { id: attributewithlimitedtype.declaredType.name, label: attributewithlimitedtype.declaredType.name };
                        } else {
                            return null;
                        }
                    },
                    async (option: SelectOption): Promise<BehaviorExecutionResult> => {
                        if (!!option) {
                            attributewithlimitedtype.declaredType = PiElementReference.create<AttributeType>(
                                EntityEnvironment.getInstance().scoper.getFromVisibleElements(
                                    attributewithlimitedtype,
                                    option.label,
                                    "AttributeType"
                                ) as AttributeType,
                                "AttributeType"
                            );
                        } else {
                            attributewithlimitedtype.declaredType = null;
                        }
                        return BehaviorExecutionResult.EXECUTED;
                    }
                )
            ],
            { selectable: true }
        );
    }
    public getTextBox(text: Text): Box {
        return BoxFactory.verticalList(text, "Text-overall", [
            BoxFactory.label(text, "text-label-line-0-item-0", "This is", {
                style: styleToCSS(projectitStyles.propertykeyword),
                selectable: false
            }),
            BoxFactory.indent(
                text,
                "Text-indent-line-1",
                8,
                BoxFactory.label(text, "text-label-line-1-item-0", "literal text", {
                    style: styleToCSS(projectitStyles.propertykeyword),
                    selectable: false
                })
            ),
            BoxFactory.indent(
                text,
                "Text-indent-line-2",
                2,
                BoxFactory.label(text, "text-label-line-2-item-0", "that is projected in the", {
                    style: styleToCSS(projectitStyles.propertykeyword),
                    selectable: false
                })
            ),
            BoxFactory.indent(
                text,
                "Text-indent-line-3",
                8,
                BoxFactory.label(text, "text-label-line-3-item-0", "editor", {
                    style: styleToCSS(projectitStyles.propertykeyword),
                    selectable: false
                })
            ),
            BoxFactory.label(text, "text-label-line-4-item-0", "for every concept of type Text.", {
                style: styleToCSS(projectitStyles.propertykeyword),
                selectable: false
            })
        ]);
    }
    public getAttributeWithEntityTypeBox(attributewithentitytype: AttributeWithEntityType): Box {
        return BoxFactory.verticalList(attributewithentitytype, "AttributeWithEntityType-overall", [
            BoxFactory.horizontalList(
                attributewithentitytype,
                "AttributeWithEntityType-hlist-line-0",
                [
                    BoxFactory.label(attributewithentitytype, "attributewithentitytype-label-line-0-item-0", "AttributeWithEntityType", {
                        style: styleToCSS(projectitStyles.conceptkeyword),
                        selectable: false
                    }),
                    BoxFactory.text(
                        attributewithentitytype,
                        "AttributeWithEntityType-name",
                        () => attributewithentitytype.name,
                        (c: string) => (attributewithentitytype.name = c as string),
                        {
                            placeHolder: "text",
                            style: styleToCSS(projectitStyles.placeholdertext)
                        }
                    )
                ],
                { selectable: true }
            ),
            BoxFactory.indent(
                attributewithentitytype,
                "AttributeWithEntityType-indent-line-1",
                4,
                BoxFactory.horizontalList(
                    attributewithentitytype,
                    "AttributeWithEntityType-hlist-line-1",
                    [
                        BoxFactory.label(attributewithentitytype, "attributewithentitytype-label-line-1-item-0", "declaredType", {
                            style: styleToCSS(projectitStyles.propertykeyword),
                            selectable: false
                        }),
                        this.helpers.getReferenceBox(
                            attributewithentitytype,
                            "AttributeWithEntityType-declaredType",
                            "<select declaredType>",
                            "Entity",
                            () => {
                                if (!!attributewithentitytype.declaredType) {
                                    return {
                                        id: attributewithentitytype.declaredType.name,
                                        label: attributewithentitytype.declaredType.name
                                    };
                                } else {
                                    return null;
                                }
                            },
                            async (option: SelectOption): Promise<BehaviorExecutionResult> => {
                                if (!!option) {
                                    attributewithentitytype.declaredType = PiElementReference.create<Entity>(
                                        EntityEnvironment.getInstance().scoper.getFromVisibleElements(
                                            attributewithentitytype,
                                            option.label,
                                            "Entity"
                                        ) as Entity,
                                        "Entity"
                                    );
                                } else {
                                    attributewithentitytype.declaredType = null;
                                }
                                return BehaviorExecutionResult.EXECUTED;
                            }
                        )
                    ],
                    { selectable: true }
                )
            )
        ]);
    }
    public getVariableBox(variable: Variable): Box {
        return BoxFactory.verticalList(variable, "Variable-overall", [
            BoxFactory.horizontalList(
                variable,
                "Variable-hlist-line-0",
                [
                    BoxFactory.label(variable, "variable-label-line-0-item-0", "Variable", {
                        style: styleToCSS(projectitStyles.conceptkeyword),
                        selectable: false
                    }),
                    BoxFactory.text(
                        variable,
                        "Variable-name",
                        () => variable.name,
                        (c: string) => (variable.name = c as string),
                        {
                            placeHolder: "text",
                            style: styleToCSS(projectitStyles.placeholdertext)
                        }
                    )
                ],
                { selectable: true }
            ),
            BoxFactory.indent(
                variable,
                "Variable-indent-line-1",
                4,
                BoxFactory.horizontalList(
                    variable,
                    "Variable-hlist-line-1",
                    [
                        BoxFactory.label(variable, "variable-label-line-1-item-0", "declaredType", {
                            style: styleToCSS(projectitStyles.propertykeyword),
                            selectable: false
                        }),
                        this.helpers.getReferenceBox(
                            variable,
                            "Variable-declaredType",
                            "<select declaredType>",
                            "Entity",
                            () => {
                                if (!!variable.declaredType) {
                                    return { id: variable.declaredType.name, label: variable.declaredType.name };
                                } else {
                                    return null;
                                }
                            },
                            async (option: SelectOption): Promise<BehaviorExecutionResult> => {
                                if (!!option) {
                                    variable.declaredType = PiElementReference.create<Entity>(
                                        EntityEnvironment.getInstance().scoper.getFromVisibleElements(
                                            variable,
                                            option.label,
                                            "Entity"
                                        ) as Entity,
                                        "Entity"
                                    );
                                } else {
                                    variable.declaredType = null;
                                }
                                return BehaviorExecutionResult.EXECUTED;
                            }
                        )
                    ],
                    { selectable: true }
                )
            )
        ]);
    }
    public getEntityExpressionBox(entityexpression: EntityExpression): Box {
        return createDefaultExpressionBox(
            entityexpression,
            "default-expression-box",
            [
                BoxFactory.verticalList(entityexpression, "EntityExpression-overall", [
                    BoxFactory.label(entityexpression, "entityexpression-label-line-0-item-0", "EntityExpression", {
                        style: styleToCSS(projectitStyles.conceptkeyword),
                        selectable: false
                    }),
                    BoxFactory.indent(
                        entityexpression,
                        "EntityExpression-indent-line-1",
                        4,
                        BoxFactory.horizontalList(
                            entityexpression,
                            "EntityExpression-hlist-line-1",
                            [
                                BoxFactory.label(entityexpression, "entityexpression-label-line-1-item-0", "appliedfeature", {
                                    style: styleToCSS(projectitStyles.propertykeyword),
                                    selectable: false
                                }),
                                !!entityexpression.appliedfeature
                                    ? this.rootProjection.getBox(entityexpression.appliedfeature)
                                    : BoxFactory.alias(entityexpression, "EntityExpression-appliedfeature", "[add]", {
                                          propertyName: "appliedfeature"
                                      })
                            ],
                            { selectable: true }
                        )
                    )
                ])
            ],
            { selectable: false }
        );
    }
    public getAppliedFeatureBox(appliedfeature: AppliedFeature): Box {
        return BoxFactory.verticalList(appliedfeature, "AppliedFeature-overall", [
            BoxFactory.label(appliedfeature, "appliedfeature-label-line-0-item-0", "AppliedFeature", {
                style: styleToCSS(projectitStyles.conceptkeyword),
                selectable: false
            }),
            BoxFactory.indent(
                appliedfeature,
                "AppliedFeature-indent-line-1",
                4,
                BoxFactory.horizontalList(
                    appliedfeature,
                    "AppliedFeature-hlist-line-1",
                    [
                        BoxFactory.label(appliedfeature, "appliedfeature-label-line-1-item-0", "appliedfeature", {
                            style: styleToCSS(projectitStyles.propertykeyword),
                            selectable: false
                        }),
                        !!appliedfeature.appliedfeature
                            ? this.rootProjection.getBox(appliedfeature.appliedfeature)
                            : BoxFactory.alias(appliedfeature, "AppliedFeature-appliedfeature", "[add]", { propertyName: "appliedfeature" })
                    ],
                    { selectable: true }
                )
            )
        ]);
    }
    public getAttributeRefBox(attributeref: AttributeRef): Box {
        return BoxFactory.verticalList(attributeref, "AttributeRef-overall", [
            BoxFactory.label(attributeref, "attributeref-label-line-0-item-0", "AttributeRef", {
                style: styleToCSS(projectitStyles.conceptkeyword),
                selectable: false
            }),
            BoxFactory.indent(
                attributeref,
                "AttributeRef-indent-line-1",
                4,
                BoxFactory.horizontalList(
                    attributeref,
                    "AttributeRef-hlist-line-1",
                    [
                        BoxFactory.label(attributeref, "attributeref-label-line-1-item-0", "appliedfeature", {
                            style: styleToCSS(projectitStyles.propertykeyword),
                            selectable: false
                        }),
                        !!attributeref.appliedfeature
                            ? this.rootProjection.getBox(attributeref.appliedfeature)
                            : BoxFactory.alias(attributeref, "AppliedFeature-appliedfeature", "[add]", { propertyName: "appliedfeature" })
                    ],
                    { selectable: true }
                )
            ),
            BoxFactory.indent(
                attributeref,
                "AttributeRef-indent-line-2",
                4,
                BoxFactory.horizontalList(
                    attributeref,
                    "AttributeRef-hlist-line-2",
                    [
                        BoxFactory.label(attributeref, "attributeref-label-line-2-item-0", "attribute", {
                            style: styleToCSS(projectitStyles.propertykeyword),
                            selectable: false
                        }),
                        this.helpers.getReferenceBox(
                            attributeref,
                            "AttributeRef-attribute",
                            "<select attribute>",
                            "AttributeWithEntityType",
                            () => {
                                if (!!attributeref.attribute) {
                                    return { id: attributeref.attribute.name, label: attributeref.attribute.name };
                                } else {
                                    return null;
                                }
                            },
                            async (option: SelectOption): Promise<BehaviorExecutionResult> => {
                                if (!!option) {
                                    attributeref.attribute = PiElementReference.create<AttributeWithEntityType>(
                                        EntityEnvironment.getInstance().scoper.getFromVisibleElements(
                                            attributeref,
                                            option.label,
                                            "AttributeWithEntityType"
                                        ) as AttributeWithEntityType,
                                        "AttributeWithEntityType"
                                    );
                                } else {
                                    attributeref.attribute = null;
                                }
                                return BehaviorExecutionResult.EXECUTED;
                            }
                        )
                    ],
                    { selectable: true }
                )
            )
        ]);
    }
    public getVariableRefBox(variableref: VariableRef): Box {
        return createDefaultExpressionBox(
            variableref,
            "default-expression-box",
            [
                BoxFactory.verticalList(variableref, "VariableRef-overall", [
                    BoxFactory.label(variableref, "variableref-label-line-0-item-0", "VariableRef", {
                        style: styleToCSS(projectitStyles.conceptkeyword),
                        selectable: false
                    }),
                    BoxFactory.indent(
                        variableref,
                        "VariableRef-indent-line-1",
                        4,
                        BoxFactory.horizontalList(
                            variableref,
                            "VariableRef-hlist-line-1",
                            [
                                BoxFactory.label(variableref, "variableref-label-line-1-item-0", "appliedfeature", {
                                    style: styleToCSS(projectitStyles.propertykeyword),
                                    selectable: false
                                }),
                                !!variableref.appliedfeature
                                    ? this.rootProjection.getBox(variableref.appliedfeature)
                                    : BoxFactory.alias(variableref, "EntityExpression-appliedfeature", "[add]", {
                                          propertyName: "appliedfeature"
                                      })
                            ],
                            { selectable: true }
                        )
                    ),
                    BoxFactory.indent(
                        variableref,
                        "VariableRef-indent-line-2",
                        4,
                        BoxFactory.horizontalList(
                            variableref,
                            "VariableRef-hlist-line-2",
                            [
                                BoxFactory.label(variableref, "variableref-label-line-2-item-0", "variable", {
                                    style: styleToCSS(projectitStyles.propertykeyword),
                                    selectable: false
                                }),
                                this.helpers.getReferenceBox(
                                    variableref,
                                    "VariableRef-variable",
                                    "<select variable>",
                                    "Variable",
                                    () => {
                                        if (!!variableref.variable) {
                                            return { id: variableref.variable.name, label: variableref.variable.name };
                                        } else {
                                            return null;
                                        }
                                    },
                                    async (option: SelectOption): Promise<BehaviorExecutionResult> => {
                                        if (!!option) {
                                            variableref.variable = PiElementReference.create<Variable>(
                                                EntityEnvironment.getInstance().scoper.getFromVisibleElements(
                                                    variableref,
                                                    option.label,
                                                    "Variable"
                                                ) as Variable,
                                                "Variable"
                                            );
                                        } else {
                                            variableref.variable = null;
                                        }
                                        return BehaviorExecutionResult.EXECUTED;
                                    }
                                )
                            ],
                            { selectable: true }
                        )
                    )
                ])
            ],
            { selectable: false }
        );
    }
    public getLiteralExpressionBox(literalexpression: LiteralExpression): Box {
        return createDefaultExpressionBox(
            literalexpression,
            "default-expression-box",
            [
                BoxFactory.verticalList(literalexpression, "LiteralExpression-overall", [
                    BoxFactory.label(literalexpression, "literalexpression-label-line-0-item-0", "LiteralExpression", {
                        style: styleToCSS(projectitStyles.conceptkeyword),
                        selectable: false
                    }),
                    BoxFactory.indent(
                        literalexpression,
                        "LiteralExpression-indent-line-1",
                        4,
                        BoxFactory.horizontalList(
                            literalexpression,
                            "LiteralExpression-hlist-line-1",
                            [
                                BoxFactory.label(literalexpression, "literalexpression-label-line-1-item-0", "appliedfeature", {
                                    style: styleToCSS(projectitStyles.propertykeyword),
                                    selectable: false
                                }),
                                !!literalexpression.appliedfeature
                                    ? this.rootProjection.getBox(literalexpression.appliedfeature)
                                    : BoxFactory.alias(literalexpression, "EntityExpression-appliedfeature", "[add]", {
                                          propertyName: "appliedfeature"
                                      })
                            ],
                            { selectable: true }
                        )
                    )
                ])
            ],
            { selectable: false }
        );
    }
    public getStringLiteralExpressionBox(stringliteralexpression: StringLiteralExpression): Box {
        return createDefaultExpressionBox(
            stringliteralexpression,
            "default-expression-box",
            [
                BoxFactory.horizontalList(
                    stringliteralexpression,
                    "StringLiteralExpression-hlist-line-0",
                    [
                        BoxFactory.label(stringliteralexpression, "stringliteralexpression-label-line-0-item-0", "'", {
                            style: styleToCSS(projectitStyles.propertykeyword),
                            selectable: false
                        }),
                        BoxFactory.text(
                            stringliteralexpression,
                            "StringLiteralExpression-value",
                            () => stringliteralexpression.value,
                            (c: string) => (stringliteralexpression.value = c as string),
                            {
                                placeHolder: "text",
                                style: styleToCSS(projectitStyles.placeholdertext)
                            }
                        ),
                        BoxFactory.label(stringliteralexpression, "stringliteralexpression-label-line-0-item-2", "'", {
                            style: styleToCSS(projectitStyles.propertykeyword),
                            selectable: false
                        })
                    ],
                    { selectable: true }
                )
            ],
            { selectable: false }
        );
    }
    public getNumberLiteralExpressionBox(numberliteralexpression: NumberLiteralExpression): Box {
        return createDefaultExpressionBox(
            numberliteralexpression,
            "default-expression-box",
            [
                BoxFactory.text(
                    numberliteralexpression,
                    "NumberLiteralExpression-value",
                    () => numberliteralexpression.value,
                    (c: string) => (numberliteralexpression.value = c as string),
                    {
                        placeHolder: "text",
                        style: styleToCSS(projectitStyles.placeholdertext)
                    }
                )
            ],
            { selectable: false }
        );
    }
    public getBooleanLiteralExpressionBox(booleanliteralexpression: BooleanLiteralExpression): Box {
        return createDefaultExpressionBox(
            booleanliteralexpression,
            "default-expression-box",
            [
                BoxFactory.verticalList(booleanliteralexpression, "BooleanLiteralExpression-overall", [
                    BoxFactory.label(booleanliteralexpression, "booleanliteralexpression-label-line-0-item-0", "BooleanLiteralExpression", {
                        style: styleToCSS(projectitStyles.conceptkeyword),
                        selectable: false
                    }),
                    BoxFactory.indent(
                        booleanliteralexpression,
                        "BooleanLiteralExpression-indent-line-1",
                        4,
                        BoxFactory.horizontalList(
                            booleanliteralexpression,
                            "BooleanLiteralExpression-hlist-line-1",
                            [
                                BoxFactory.label(booleanliteralexpression, "booleanliteralexpression-label-line-1-item-0", "value", {
                                    style: styleToCSS(projectitStyles.propertykeyword),
                                    selectable: false
                                }),
                                BoxFactory.text(
                                    booleanliteralexpression,
                                    "BooleanLiteralExpression-value",
                                    () => booleanliteralexpression.value,
                                    (c: string) => (booleanliteralexpression.value = c as string),
                                    {
                                        placeHolder: "text",
                                        style: styleToCSS(projectitStyles.placeholdertext)
                                    }
                                )
                            ],
                            { selectable: true }
                        )
                    ),
                    BoxFactory.indent(
                        booleanliteralexpression,
                        "BooleanLiteralExpression-indent-line-2",
                        4,
                        BoxFactory.horizontalList(
                            booleanliteralexpression,
                            "BooleanLiteralExpression-hlist-line-2",
                            [
                                BoxFactory.label(
                                    booleanliteralexpression,
                                    "booleanliteralexpression-label-line-2-item-0",
                                    "appliedfeature",
                                    {
                                        style: styleToCSS(projectitStyles.propertykeyword),
                                        selectable: false
                                    }
                                ),
                                !!booleanliteralexpression.appliedfeature
                                    ? this.rootProjection.getBox(booleanliteralexpression.appliedfeature)
                                    : BoxFactory.alias(booleanliteralexpression, "EntityExpression-appliedfeature", "[add]", {
                                          propertyName: "appliedfeature"
                                      })
                            ],
                            { selectable: true }
                        )
                    )
                ])
            ],
            { selectable: false }
        );
    }
    public getFunctionCallExpressionBox(functioncallexpression: FunctionCallExpression): Box {
        return createDefaultExpressionBox(
            functioncallexpression,
            "default-expression-box",
            [
                BoxFactory.verticalList(functioncallexpression, "FunctionCallExpression-overall", [
                    BoxFactory.label(functioncallexpression, "functioncallexpression-label-line-0-item-0", "+", {
                        style: styleToCSS(projectitStyles.propertykeyword),
                        selectable: false
                    }),
                    BoxFactory.horizontalList(
                        functioncallexpression,
                        "FunctionCallExpression-hlist-line-1",
                        [
                            BoxFactory.label(functioncallexpression, "functioncallexpression-label-line-1-item-0", "CALL ", {
                                style: styleToCSS(projectitStyles.propertykeyword),
                                selectable: false
                            }),
                            this.helpers.getReferenceBox(
                                functioncallexpression,
                                "FunctionCallExpression-functionDefinition",
                                "<select functionDefinition>",
                                "EntityFunction",
                                () => {
                                    if (!!functioncallexpression.functionDefinition) {
                                        return {
                                            id: functioncallexpression.functionDefinition.name,
                                            label: functioncallexpression.functionDefinition.name
                                        };
                                    } else {
                                        return null;
                                    }
                                },
                                async (option: SelectOption): Promise<BehaviorExecutionResult> => {
                                    if (!!option) {
                                        functioncallexpression.functionDefinition = PiElementReference.create<EntityFunction>(
                                            EntityEnvironment.getInstance().scoper.getFromVisibleElements(
                                                functioncallexpression,
                                                option.label,
                                                "EntityFunction"
                                            ) as EntityFunction,
                                            "EntityFunction"
                                        );
                                    } else {
                                        functioncallexpression.functionDefinition = null;
                                    }
                                    return BehaviorExecutionResult.EXECUTED;
                                }
                            ),
                            BoxFactory.label(functioncallexpression, "functioncallexpression-label-line-1-item-2", "(  )", {
                                style: styleToCSS(projectitStyles.propertykeyword),
                                selectable: false
                            })
                        ],
                        { selectable: true }
                    )
                ])
            ],
            { selectable: false }
        );
    }
    public getIfExpressionBox(ifexpression: IfExpression): Box {
        return createDefaultExpressionBox(
            ifexpression,
            "default-expression-box",
            [
                BoxFactory.verticalList(ifexpression, "IfExpression-overall", [
                    BoxFactory.horizontalList(
                        ifexpression,
                        "IfExpression-hlist-line-0",
                        [
                            BoxFactory.label(ifexpression, "ifexpression-label-line-0-item-0", "if (", {
                                style: styleToCSS(projectitStyles.propertykeyword),
                                selectable: false
                            }),
                            !!ifexpression.condition
                                ? this.rootProjection.getBox(ifexpression.condition)
                                : BoxFactory.alias(ifexpression, "IfExpression-condition", "[add]", { propertyName: "condition" }),
                            BoxFactory.label(ifexpression, "ifexpression-label-line-0-item-2", ") then", {
                                style: styleToCSS(projectitStyles.propertykeyword),
                                selectable: false
                            })
                        ],
                        { selectable: true }
                    ),
                    BoxFactory.indent(
                        ifexpression,
                        "IfExpression-indent-line-1",
                        10,
                        !!ifexpression.whenTrue
                            ? this.rootProjection.getBox(ifexpression.whenTrue)
                            : BoxFactory.alias(ifexpression, "IfExpression-whenTrue", "[add]", { propertyName: "whenTrue" })
                    ),
                    BoxFactory.label(ifexpression, "ifexpression-label-line-2-item-0", "else", {
                        style: styleToCSS(projectitStyles.propertykeyword),
                        selectable: false
                    }),
                    BoxFactory.indent(
                        ifexpression,
                        "IfExpression-indent-line-3",
                        3,
                        !!ifexpression.whenFalse
                            ? this.rootProjection.getBox(ifexpression.whenFalse)
                            : BoxFactory.alias(ifexpression, "IfExpression-whenFalse", "[add]", { propertyName: "whenFalse" })
                    ),
                    BoxFactory.label(ifexpression, "ifexpression-label-line-4-item-0", "endif", {
                        style: styleToCSS(projectitStyles.propertykeyword),
                        selectable: false
                    })
                ])
            ],
            { selectable: false }
        );
    }

    /**
     *  Create a standard binary box to ensure binary expressions can be edited easily
     */
    private createBinaryBox(projection: EntityProjectionDefault, exp: PiBinaryExpression, symbol: string): Box {
        const binBox = createDefaultBinaryBox(exp, symbol, EntityEnvironment.getInstance().editor);
        if (this.showBrackets && !!exp.piContainer().container && isPiBinaryExpression(exp.piContainer().container)) {
            return BoxFactory.horizontalList(exp, "brackets", [
                BoxFactory.label(exp, "open-bracket", "("),
                binBox,
                BoxFactory.label(exp, "close-bracket", ")")
            ]);
        } else {
            return binBox;
        }
    }
}
