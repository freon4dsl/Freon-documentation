{"version":3,"file":"23.CBVUDtvh.js","sources":["../../../../../../src/routes/Documentation/Creating_the_Metamodel/Language_Structure/SectionStore.ts","../../../../../../src/routes/Documentation/Creating_the_Metamodel/Language_Structure/PageContent.svelte","../../../../../../src/routes/Documentation/Creating_the_Metamodel/Language_Structure/+page.svelte"],"sourcesContent":["import { writable, type Writable } from 'svelte/store';\nimport type { Section } from '$lib/section/SectionType';\n\nexport const mySections: Writable<Section[]> = writable<Section[]>([]);\n","<script lang=\"ts\">\n\timport SectionComponent from '$lib/section/SectionComponent.svelte';\n\timport { mySections } from './SectionStore.js';\n\t$mySections = [\n\t\t{ title: 'The Language Structure', visible: false, ref: '#the-language-structure-1' },\n\t\t{ title: 'Model', visible: false, ref: '#model-2' },\n\t\t{ title: 'Model unit', visible: false, ref: '#model-unit-3' },\n\t\t{ title: 'Concept', visible: false, ref: '#concept-4' },\n\t\t{ title: 'Expression Concept', visible: false, ref: '#expression-concept-5' },\n\t\t{ title: 'Binary Expression Concept', visible: false, ref: '#binary-expression-concept-6' },\n\t\t{ title: 'Limited Concept', visible: false, ref: '#limited-concept-7' },\n\t\t{ title: 'Interface', visible: false, ref: '#interface-8' }\n\t];\n\tlet visible: boolean[] = [];\n\t$: $mySections[0].visible = visible[0];\n\t$: $mySections[1].visible = visible[1];\n\t$: $mySections[2].visible = visible[2];\n\t$: $mySections[3].visible = visible[3];\n\t$: $mySections[4].visible = visible[4];\n\t$: $mySections[5].visible = visible[5];\n\t$: $mySections[6].visible = visible[6];\n\t$: $mySections[7].visible = visible[7];\n\timport copy from 'copy-to-clipboard';\n\timport { onMount } from 'svelte';\n\n\t/**\n\t * This function will go through all the 'pre' elements\n\t * on the page and add a copy button to them.\n\t * Thanks to: https://slavbasharov.com/blog/adding-click-to-copy-code-markdown-blog\n\t */\n\tonMount(() => {\n\t\tconst codeBlocks = document.querySelectorAll('pre');\n\t\tcodeBlocks.forEach((block) => {\n\t\t\tconst copyPrompt = document.createElement('div');\n\t\t\tcopyPrompt.className = 'copy-prompt';\n\t\t\tconst copyPromptText = document.createElement('p');\n\t\t\tcopyPromptText.innerHTML = 'ðŸ‘† Click to copy';\n\t\t\tcopyPromptText.className = 'copy-prompt-p';\n\t\t\tconst copyIcon = document.createElement('img');\n\t\t\tcopyIcon.src = '/icons/copy-icon.svg';\n\t\t\tcopyIcon.className = 'copy-prompt-img';\n\t\t\tcopyPrompt.appendChild(copyIcon);\n\t\t\tcopyPrompt.appendChild(copyPromptText);\n\t\t\tblock.appendChild(copyPrompt);\n\t\t\tblock.querySelector('.copy-prompt > p').addEventListener('click', (evt) => {\n\t\t\t\tcopy(block.querySelector('code').textContent);\n\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'Copied!';\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'ðŸ‘† Click to copy';\n\t\t\t\t}, 1000);\n\t\t\t});\n\t\t});\n\t});\n\timport PrevNextSection from '$lib/prevNext/PrevNextSection.svelte';\n\n\tlet prevLink = '/Documentation/Creating_the_Metamodel';\n\tlet nextLink = '/Documentation/Creating_the_Metamodel/Defining_Properties';\n\n\timport Note from '$lib/notes/Note.svelte';\n</script>\n\n<PrevNextSection {prevLink} {nextLink} />\n\n<SectionComponent tag=\"h1\" id=\"the-language-structure-1\" bind:intersecting={visible[0]}>The Language Structure</SectionComponent>\n<SectionComponent tag=\"h2\" id=\"model-2\" bind:intersecting={visible[1]}>Model</SectionComponent>\n<p>\n\tA <em>model</em> is the root of the abstract syntax tree. It may hold any number of model units as children. These model units may be of different\n\ttype. For instance, you can have model units that define the items in a home automation system, and other model units that define the rules\n\tthat apply in this system.\n</p>\n<Note\n\t><svelte:fragment slot=\"header\">Models are never explicit in an editor</svelte:fragment><svelte:fragment slot=\"content\">\n\t\tThe model is never shown in an editor as a whole. It is always shown in parts: the model units. However, the provided webapp does 'show'\n\t\tthe model and the units, that are part of it, in its left panel.\n\t</svelte:fragment></Note\n>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// Insurance/src/defs/language-main.ast#L7-L10\n</span>\n<span class=\"token keyword\">model</span> <span class=\"token class-name\">InsuranceModel</span> &#123;\n    parts: <span class=\"token class-name\">Part</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>;              <span class=\"token comment\">// units that hold partial definitions of insurance products\n</span>    products: <span class=\"token class-name\">Product</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>;        <span class=\"token comment\">// units that hold sellable insurance products\n</span>&#125;</code>`}</pre>\n<SectionComponent tag=\"h2\" id=\"model-unit-3\" bind:intersecting={visible[2]}>Model unit</SectionComponent>\n<p>\n\tA <em>model unit</em> is a part of the model that can be edited by the user independently of the rest of the model. A model unit is always\n\ta direct child of a model. Model units may not extend other units, or implement interfaces.\n</p>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// Insurance/src/defs/language-main.ast#L12-L15\n</span>\n<span class=\"token keyword\">modelunit</span> <span class=\"token class-name\">Part</span> &#123;\n    part: <span class=\"token class-name\">BaseProduct</span>;          <span class=\"token comment\">// one collection of partial insurance products\n</span>    file-extension = <span class=\"token string\">\"base\"</span>;    <span class=\"token comment\">// the file extension used by the parser\n</span>&#125;</code>`}</pre>\n<p>\n\tModel units have one special entry called <code>file-extension</code>, as shown in the example above. This is an optional indication of\n\tthe file type that the generated parser will associate with this model unit, i.e. an instance of the above model unit will be\n\texported/imported to/from a file with extension â€˜.baseâ€™.\n</p>\n<SectionComponent tag=\"h2\" id=\"concept-4\" bind:intersecting={visible[3]}>Concept</SectionComponent>\n<p>\n\tA <em>concept</em> is the basic element of your language definition. It defines which instances can be present in a model created by your users.\n</p>\n<p>\n\tConcepts may extend one other concept using the keyword <code>base</code>, and implement multiple interfaces. Furthermore, they may be\n\t<em>abstract</em>.\n</p>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// Insurance/src/defs/language-main.ast#L24-L28\n</span>\n<span class=\"token keyword\">concept</span> <span class=\"token class-name\">BaseProduct</span> &#123;\n    name: <span class=\"token builtin\">identifier</span>;               <span class=\"token comment\">// internal name\n</span>    isUnderConstruction: <span class=\"token builtin\">boolean</span>;   <span class=\"token comment\">// defines whether this base product is still 'raw'\n</span>    theme: <span class=\"token class-name\">InsuranceTheme</span>;          <span class=\"token comment\">// the 'kind' of insurance\n</span>    parts: <span class=\"token class-name\">InsurancePart</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>;         // all parts of this product</code>`}</pre>\n<pre\n\tclass=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// Insurance/src/defs/language-main.ast#L106-L112\n</span>\n    Percentage;\n&#125;\n\n<span class=\"token keyword\">limited</span> NumberType <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NamedType</span> &#123;\n    Number;\n&#125;\n</code>`}</pre>\n<SectionComponent tag=\"h2\" id=\"expression-concept-5\" bind:intersecting={visible[4]}>Expression Concept</SectionComponent>\n<p>\n\tAn <em>expression concept</em> is a concept represents an expression. The editor deals differently with these, in order to give your user a\n\tmore natural editing experience.\n</p>\n<p>Expression concepts may extend another concept, and implement multiple interfaces.</p>\n<pre\n\tclass=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// Insurance/src/defs/language-expressions.ast#L10-L18\n</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">expression</span> Literal <span class=\"token keyword\">base</span> <span class=\"token class-name\">DocuExpression</span> &#123;\n&#125;\n<span class=\"token keyword\">expression</span> EuroLiteral <span class=\"token keyword\">base</span> <span class=\"token class-name\">Literal</span> &#123;\n    euros: <span class=\"token builtin\">number</span>;\n    cents: <span class=\"token builtin\">number</span>;\n&#125;\n<span class=\"token keyword\">expression</span> NumberLiteral <span class=\"token keyword\">base</span> <span class=\"token class-name\">Literal</span> &#123;\n    value: <span class=\"token builtin\">number</span>;\n&#125;</code>`}</pre>\n<Note>\n\t<svelte:fragment slot=\"header\">Use a Single Root of the Expression AST</svelte:fragment>\n\t<svelte:fragment slot=\"content\">\n\t\t<p>\n\t\t\tIt is good practice to have all expression concepts inherit from one single root concept. This make it easy to have any type of\n\t\t\texpression as a part of the expression that you want to define.\n\t\t</p>\n\t\t<p>\n\t\t\tFor instance, when defining a bracketed expression, i.e. an expression surrounded by brackets, you can simply use the root expression\n\t\t\tconcept as type of the property that is to be put between the brackets.\n\t\t</p>\n\t</svelte:fragment></Note\n>\n<SectionComponent tag=\"h2\" id=\"binary-expression-concept-6\" bind:intersecting={visible[5]}>Binary Expression Concept</SectionComponent>\n<p>\n\tA <em>binary expression concept</em> is an expression concept that has two sub expressions, <code>left</code> and <code>right</code>\n\toperands, and an operator, which in the concrete syntax is shown in the middle. For example, the expression <code>4 + 5</code>\n\thas as left operand <code>4</code>, as operator <code>+</code>, and as right operand <code>5</code>.\n</p>\n<p>\n\tAny concrete binary expression concept needs to have a priority. For example, in mathematics the priority of the multiplication is higher\n\tthan the priority of the plus. The expression 5 + 67 * 8 should be read as 5 + (67 * 8), not as (5 + 67) * 8. The priorities are used by\n\tFreon to balance the abstract syntax tree (see <a href=\"/Background/Projectional_Editing#tree-balancing\">Projectional Editing</a>). In\n\t<a href=\"/Documentation/Defining_an_Editor/Ease_of_Editing\">Ease of Editing</a> you can find more information on how to set the concrete syntax\n\tfor the operand.\n</p>\n<p>Binary expression concepts may extend one other concept, and implement multiple interfaces.</p>\n<pre\n\tclass=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// Insurance/src/defs/language-expressions.ast#L26-L46\n</span>\n<span class=\"token comment\">// Basic binary expressions: plus, minus, multiply, divide\n</span><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">binary</span> <span class=\"token keyword\">expression</span> BinaryExpression <span class=\"token keyword\">base</span> <span class=\"token class-name\">DocuExpression</span> &#123;\n    left: <span class=\"token class-name\">DocuExpression</span>;\n    right: <span class=\"token class-name\">DocuExpression</span>;\n&#125;\n\n<span class=\"token keyword\">binary</span> <span class=\"token keyword\">expression</span> PlusExpression <span class=\"token keyword\">base</span> <span class=\"token class-name\">BinaryExpression</span> &#123;\n    <span class=\"token keyword\">priority</span> = <span class=\"token number\">4</span>;\n&#125;\n\n<span class=\"token keyword\">binary</span> <span class=\"token keyword\">expression</span> MinusExpression <span class=\"token keyword\">base</span> <span class=\"token class-name\">BinaryExpression</span> &#123;\n    <span class=\"token keyword\">priority</span> = <span class=\"token number\">4</span>;\n&#125;\n\n<span class=\"token keyword\">binary</span> <span class=\"token keyword\">expression</span> MultiplyExpression <span class=\"token keyword\">base</span> <span class=\"token class-name\">BinaryExpression</span> &#123;\n    <span class=\"token keyword\">priority</span> = <span class=\"token number\">8</span>;\n&#125;\n\n<span class=\"token keyword\">binary</span> <span class=\"token keyword\">expression</span> DivideExpression <span class=\"token keyword\">base</span> <span class=\"token class-name\">BinaryExpression</span> &#123;\n    <span class=\"token keyword\">priority</span> = <span class=\"token number\">8</span>;\n&#125;</code>`}</pre>\n<SectionComponent tag=\"h2\" id=\"limited-concept-7\" bind:intersecting={visible[6]}>Limited Concept</SectionComponent>\n<p>\n\tA <em>limited concept</em> is a concept that has a limited number of predefined instances. Actually, it is an extended version of an enumeration.\n\tAll instances become part of the standard library of your language.\n</p>\n<p>\n\tA limited concept must always have a name property (<code>name: identifier;</code>), but if this is not provided in the definition then it\n\tis automatically created. Furthermore, when a predefined instance does not provide a value for the name, the name given in the .ast file\n\tis used. In this manner, you can define simple enumerations.\n</p>\n<p>\n\tLimited concepts may extend another concept, and implement multiple interfaces. Note that the definition of the concept includes the\n\tdefinition of the predefined instances. For example, the instances of <code>PremiumDays</code> are\n\t<code>Week</code>, <code>Month</code>, <code>Quarter</code>, <code>Semester</code>, and <code>Year</code>.\n</p>\n<pre\n\tclass=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// Insurance/src/defs/language-main.ast#L129-L146\n</span>\n<span class=\"token keyword\">limited</span> <span class=\"token class-name\">InsuranceTheme</span> &#123;        <span class=\"token comment\">// limited defined as a simple enumeration\n</span>    HomeTheme; HealthTheme; LegalTheme;\n&#125;\n\n<span class=\"token keyword\">limited</span> <span class=\"token class-name\">PremiumDays</span> &#123;           <span class=\"token comment\">// limited with various options\n</span>    <span class=\"token comment\">// if the 'name' property was not provided, it would have been generated\n</span>    name: <span class=\"token builtin\">identifier</span>;\n    nrOfDays: <span class=\"token builtin\">number</span>;\n    <span class=\"token comment\">// notations 'name:' and '\"name\":' are both correct\n</span>    Week = &#123; name: <span class=\"token string\">\"Week\"</span>, nrOfDays: <span class=\"token class-name\">7</span> &#125;\n    Month = &#123; <span class=\"token string\">\"name\"</span>: <span class=\"token string\">\"Month\"</span>, nrOfDays: <span class=\"token class-name\">30</span> &#125;\n    <span class=\"token comment\">// the following instance gets the name \"Quarter\"\n</span>    Quarter = &#123; nrOfDays: <span class=\"token class-name\">91</span> &#125;\n    <span class=\"token comment\">// the following instance gets the name \"Semester\"\n</span>    Semester = &#123; nrOfDays: <span class=\"token class-name\">182</span> &#125;\n    <span class=\"token comment\">// the following instance gets the name \"Year\"\n</span>    Year = &#123; nrOfDays: <span class=\"token class-name\">365</span> &#125;\n&#125;</code>`}</pre>\n<Note>\n\t<svelte:fragment slot=\"header\">No quotes around numbers and booleans.</svelte:fragment>\n\t<svelte:fragment slot=\"content\">\n\t\tFor number and boolean types, quotes (double or single) are not allowed around the values of properties of instances of limited\n\t\tconcepts.\n\t</svelte:fragment>\n</Note>\n<SectionComponent tag=\"h2\" id=\"interface-8\" bind:intersecting={visible[7]}>Interface</SectionComponent>\n<p>An <em>interface</em> is a concept that has no instances. It may extend multiple other interfaces.</p>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// Insurance/src/defs/language-main.ast#L96-L99\n</span>\n<span class=\"token comment\">// concepts can implement interfaces.\n</span><span class=\"token keyword\">interface</span> <span class=\"token class-name\">NamedType</span> &#123;\n    name: <span class=\"token builtin\">identifier</span>;\n&#125;</code>`}</pre>\n<p>The next section will explain the options for concept properties.</p>\n\n<PrevNextSection {prevLink} {nextLink} />\n","<script lang=\"ts\">\n\timport { mySections } from './SectionStore.js';\n\timport type { Section } from '$lib/section/SectionType.js';\n\timport PageContent from './PageContent.svelte';\n\timport Breadcrumb from '$lib/breadcrumbs/Breadcrumb.svelte';\n\n\tlet showDetails: boolean = false;\n\t$: current = getCurrent($mySections);\n\n\tfunction getCurrent(internalSections: Section[]): number {\n\t\tlet previous = current;\n\t\tfor (let i = 0; i < internalSections.length; i++) {\n\t\t\tif (internalSections[i].visible) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn previous;\n\t}\n\tfunction toggleTocDetails() {\n\t\tshowDetails = !showDetails;\n\t}\n</script>\n\n<div class=\"page-main\">\n\t<div class=\"page-toc-small\">\n\t\t<p class=\"page-toc-small-title\">On this page ...</p>\n\t\t<button\n\t\t\tclass=\"page-toc-small-expand-button\"\n\t\t\ton:click={() => {\n\t\t\t\ttoggleTocDetails();\n\t\t\t}}\n\t\t>\n\t\t\t{#if showDetails}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/upload.png\" alt=\"arrow up\" />\n\t\t\t{:else}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/down-arrow.png\" alt=\"arrow down\" />\n\t\t\t{/if}\n\t\t</button>\n\t</div>\n\t{#if showDetails}\n\t\t<div class=\"toc-details\">\n\t\t\t<ul class=\"page-ul\">\n\t\t\t\t{#each $mySections as sec, index}\n\t\t\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t\t\t{sec.title}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t{/each}\n\t\t\t</ul>\n\t\t</div>\n\t{/if}\n\n\t<Breadcrumb />\n\t<PageContent />\n</div>\n\n<nav class=\"page-toc\">\n\t<h3 class=\"page-toc-title\">On this page</h3>\n\t<ul class=\"page-ul\">\n\t\t{#each $mySections as sec, index}\n\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t{sec.title}\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n</nav>\n"],"names":["mySections","writable","insert_hydration","target","p0","anchor","p1","ctx","sectioncomponent0_props","sectioncomponent1_props","sectioncomponent2_props","sectioncomponent3_props","sectioncomponent4_props","sectioncomponent5_props","sectioncomponent6_props","sectioncomponent7_props","pre0","pre1","p2","p3","p4","pre2","pre3","p5","p6","pre4","p7","p8","p9","pre5","p10","p11","p12","pre6","p13","pre7","p14","sectioncomponent0_changes","sectioncomponent1_changes","sectioncomponent2_changes","sectioncomponent3_changes","sectioncomponent4_changes","sectioncomponent5_changes","sectioncomponent6_changes","sectioncomponent7_changes","prevLink","nextLink","$mySections","visible","onMount","block","copyPrompt","copyPromptText","copyIcon","evt","copy","$$self","value","set_store_value","img","i","div","append_hydration","ul","t0_value","attr","a","a_href_value","toggle_class","li","dirty","set_data","t0","create_if_block_1","create_if_block","div1","div0","p","button","nav","h3","showDetails","getCurrent","internalSections","previous","current","toggleTocDetails","$$invalidate"],"mappings":"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"}