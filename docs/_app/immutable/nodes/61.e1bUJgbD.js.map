{"version":3,"file":"61.e1bUJgbD.js","sources":["../../../../../../src/routes/Documentation/Under_the_Hood/FreTool_Interfaces/SectionStore.ts","../../../../../../src/routes/Documentation/Under_the_Hood/FreTool_Interfaces/PageContent.svelte","../../../../../../src/routes/Documentation/Under_the_Hood/FreTool_Interfaces/+page.svelte"],"sourcesContent":["import { writable, type Writable } from 'svelte/store';\nimport type { Section } from '$lib/section/SectionType';\n\nexport const mySections: Writable<Section[]> = writable<Section[]>([]);\n","<script lang=\"ts\">\n\timport SectionComponent from '$lib/section/SectionComponent.svelte';\n\timport { mySections } from './SectionStore.js';\n\t$mySections = [\n\t\t{ title: 'The Fre-tool Interfaces', visible: false, ref: '#the-fre-tool-interfaces-1' },\n\t\t{ title: 'FreEnvironment', visible: false, ref: '#freenvironment-2' },\n\t\t{ title: 'FreScoper', visible: false, ref: '#frescoper-3' },\n\t\t{ title: 'FreValidator', visible: false, ref: '#frevalidator-4' },\n\t\t{ title: 'FreTyper', visible: false, ref: '#fretyper-5' },\n\t\t{ title: 'FreReader', visible: false, ref: '#frereader-6' },\n\t\t{ title: 'FreWriter', visible: false, ref: '#frewriter-7' },\n\t\t{ title: 'FreStdlib', visible: false, ref: '#frestdlib-8' }\n\t];\n\tlet visible: boolean[] = [];\n\t$: $mySections[0].visible = visible[0];\n\t$: $mySections[1].visible = visible[1];\n\t$: $mySections[2].visible = visible[2];\n\t$: $mySections[3].visible = visible[3];\n\t$: $mySections[4].visible = visible[4];\n\t$: $mySections[5].visible = visible[5];\n\t$: $mySections[6].visible = visible[6];\n\t$: $mySections[7].visible = visible[7];\n\timport copy from 'copy-to-clipboard';\n\timport { onMount } from 'svelte';\n\n\t/**\n\t * This function will go through all the 'pre' elements\n\t * on the page and add a copy button to them.\n\t * Thanks to: https://slavbasharov.com/blog/adding-click-to-copy-code-markdown-blog\n\t */\n\tonMount(() => {\n\t\tconst codeBlocks = document.querySelectorAll('pre');\n\t\tcodeBlocks.forEach((block) => {\n\t\t\tconst copyPrompt = document.createElement('div');\n\t\t\tcopyPrompt.className = 'copy-prompt';\n\t\t\tconst copyPromptText = document.createElement('p');\n\t\t\tcopyPromptText.innerHTML = 'ðŸ‘† Click to copy';\n\t\t\tcopyPromptText.className = 'copy-prompt-p';\n\t\t\tconst copyIcon = document.createElement('img');\n\t\t\tcopyIcon.src = '/icons/copy-icon.svg';\n\t\t\tcopyIcon.className = 'copy-prompt-img';\n\t\t\tcopyPrompt.appendChild(copyIcon);\n\t\t\tcopyPrompt.appendChild(copyPromptText);\n\t\t\tblock.appendChild(copyPrompt);\n\t\t\tblock.querySelector('.copy-prompt > p').addEventListener('click', (evt) => {\n\t\t\t\tcopy(block.querySelector('code').textContent);\n\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'Copied!';\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'ðŸ‘† Click to copy';\n\t\t\t\t}, 1000);\n\t\t\t});\n\t\t});\n\t});\n\timport PrevNextSection from '$lib/prevNext/PrevNextSection.svelte';\n\n\tlet prevLink = '/Documentation/Under_the_Hood/Editor_Interfaces';\n\tlet nextLink = '/Documentation/Terminology';\n</script>\n\n<PrevNextSection {prevLink} {nextLink} />\n<SectionComponent tag=\"h1\" id=\"the-fre-tool-interfaces-1\" bind:intersecting={visible[0]}>The Fre-tool Interfaces</SectionComponent>\n<p>\n\tThere are two series of interfaces that make Freon and its generated code extensible and flexible. The first series are the interfaces\n\timplemented by the generated code:\n</p>\n<SectionComponent tag=\"h2\" id=\"freenvironment-2\" bind:intersecting={visible[1]}>FreEnvironment</SectionComponent>\n<p>\n\tAn object that implements <code>FreEnvironment</code> holds the information about where to find all parts of the language environment. It is\n\tusually a singleton object.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">/* File: core/src/environment/FreEnvironment.ts */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">FreEnvironment</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">/**\n\t * Creates a new model, an implementation of the language defined in the .ast file\n\t * @param name\n\t */</span>\n\t<span class=\"token function\">newModel</span><span class=\"token punctuation\">(</span>modelName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> FreModel<span class=\"token punctuation\">;</span>\n\n\tscoper<span class=\"token operator\">:</span> FreScoper<span class=\"token punctuation\">;</span>\n\ttyper<span class=\"token operator\">:</span> FreTyper<span class=\"token punctuation\">;</span>\n\tvalidator<span class=\"token operator\">:</span> FreValidator<span class=\"token punctuation\">;</span>\n\teditor<span class=\"token operator\">:</span> FreEditor<span class=\"token punctuation\">;</span>\n\tstdlib<span class=\"token operator\">:</span> FreStdlib<span class=\"token punctuation\">;</span>\n\twriter<span class=\"token operator\">:</span> FreWriter<span class=\"token punctuation\">;</span>\n\treader<span class=\"token operator\">:</span> FreReader<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// projectionalEditorComponent: ProjectionalEditor;</span>\n\tlanguageName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tunitNames<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tfileExtensions<span class=\"token operator\">:</span> Map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<SectionComponent tag=\"h2\" id=\"frescoper-3\" bind:intersecting={visible[2]}>FreScoper</SectionComponent>\n<p>\n\tAn object that implements <code>FreScoper</code> is able to return the named elements that are visible for a certain AST node. This node can\n\tbe a â€˜normalâ€™ model element, or it can be a namespace. If the node is a â€˜normalâ€™ element, the names visbible in its (lexical) surrounding namespace\n\tare returned.\n</p>\n<p>If you want to write your own scoper you will need to implement this interface.</p>\n<pre class=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">/* File: core/src/scoper/FreScoper.ts */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">FreScoper</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">/**\n\t * Returns the element to which the 'pathname' refers. If the elment cannot be found, or if the element is\n\t * not visible (private) from the location of 'modelelement', then null is returned.\n\t * If present, then the search is limited to elements which type is 'metatype'.\n\t *\n\t * @param modelelement: the containing element, where 'pathname' should be visible\n\t * @param doNotSearch: the role or property name of the element that we are searching for\n\t * @param pathname: the name or series of names of the element that we are searching for\n\t * @param metatype: the metatype of the element that we are searching for\n\t */</span>\n\t<span class=\"token function\">resolvePathName</span><span class=\"token punctuation\">(</span>modelelement<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">,</span> doNotSearch<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> pathname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> metatype<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> FreNamedElement<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t *   Returns true if 'name' is known in the namespace containing 'modelelement' or one\n\t *   of its surrounding namespaces.\n\t *\n\t *   When parameter 'metatype' is present, it returns true if the element named 'name'\n\t *   is an instance of 'metatype'. There is no default setting for this parameter.\n\t *\n\t *   When parameter 'excludeSurrounding' is present, it returns true if the element named 'name'\n\t *   is known in the namespace containing 'modelelement', without looking in surrounding namespaces.\n\t *\n\t * @param modelElement\n\t * @param name\n\t * @param metatype\n\t * @param excludeSurrounding\n\t */</span>\n\t<span class=\"token function\">isInScope</span><span class=\"token punctuation\">(</span>modelElement<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> metatype<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> excludeSurrounding<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t *   Returns all elements that are visible in the namespace containing 'modelelement' or one\n\t *   of its surrounding namespaces.\n\t *\n\t *   When parameter 'metatype' is present, it returns all elements that are an instance of 'metatype'.\n\t *   There is no default setting for this parameter.\n\t *\n\t *   When parameter 'excludeSurrounding' is present, it returns all elements that are visible in\n\t *   the namespace containing 'modelelement', without looking in surrounding namespaces. Elements in\n\t *   surrounding namespaces are normally shadowed by elements with the same name in an inner namespace.\n\t *\n\t * @param modelelement\n\t * @param metatype\n\t * @param excludeSurrounding\n\t */</span>\n\t<span class=\"token function\">getVisibleElements</span><span class=\"token punctuation\">(</span>modelelement<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">,</span> metatype<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> excludeSurrounding<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> FreNamedElement<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t *   Returns the element named 'name' which is visible in the namespace containing 'modelelement' or one\n\t *   of its surrounding namespaces.\n\t *\n\t *   When parameter 'metatype' is present, it returns the element that is an instance of 'metatype'.\n\t *   There is no default setting for this parameter.\n\t *\n\t *   When parameter 'excludeSurrounding' is present, it returns the element that is visible in\n\t *   the namespace containing 'modelelement', without looking in surrounding namespaces. Elements in\n\t *   surrounding namespaces are normally shadowed by elements with the same name in an inner namespace.\n\t *\n\t * @param modelelement\n\t * @param name\n\t * @param metatype\n\t * @param excludeSurrounding\n\t */</span>\n\t<span class=\"token function\">getFromVisibleElements</span><span class=\"token punctuation\">(</span>modelelement<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> metatype<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> excludeSurrounding<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> FreNamedElement<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t *   Does the same as getVisibleElements, only it does not return the elements,\n\t *   but the names of the elements.\n\t *\n\t * @param modelelement\n\t * @param metatype\n\t * @param excludeSurrounding\n\t */</span>\n\t<span class=\"token function\">getVisibleNames</span><span class=\"token punctuation\">(</span>modelelement<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">,</span> metatype<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> excludeSurrounding<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<SectionComponent tag=\"h2\" id=\"frevalidator-4\" bind:intersecting={visible[3]}>FreValidator</SectionComponent>\n<p>\n\tAn object that implements <code>FreValidator</code> is able to validate a node in the AST. The validation can be only on the node itself, or\n\tit can include all child-nodes recursively.\n</p>\n<p>\n\tThe errors that are found are returned in the form of a list of <code>FreError</code> objects. Every <code>FreError</code>\n\tholds a message, and a reference to the node that is faulty.\n</p>\n<p>If you want to write your own validator you will need to implement this interface.</p>\n<pre class=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">/* File: core/src/validator/FreValidator.ts */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">FreValidator</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">/**\n\t * Returns a list of errors on 'modelelement' according to the validation rules\n\t * stated in the validation definition. If 'includeChildren' is true, the child\n\t * nodes of 'modelelement' in the AST are also checked.\n\t *\n\t * @param modelelement\n\t * @param includeChildren\n\t */</span>\n\t<span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>modelelement<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">,</span> includeChildren<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> FreError<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<h3 id=\"freerror-1\">FreError</h3>\n<pre class=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">/* File: core/src/validator/FreValidator.ts */</span>\n\n<span class=\"token comment\">/**\n * An error consists of a message coupled to the faulty AST node, either a model\n * element or a list of model elements.\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FreError</span> <span class=\"token punctuation\">&#123;</span>\n\tmessage<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// human-readable error message</span>\n\treportedOn<span class=\"token operator\">:</span> FreElement <span class=\"token operator\">|</span> FreElement<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// the model element that does not comply</span>\n\tlocationdescription<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// human-readable indication of 'reportedOn'</span>\n\tseverity<span class=\"token operator\">:</span> FreErrorSeverity<span class=\"token punctuation\">;</span> <span class=\"token comment\">// indication of how serious the error is, default is 'ToDo'</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<SectionComponent tag=\"h1\" id=\"fretyper-5\" bind:intersecting={visible[4]}>FreTyper</SectionComponent>\n<p>An object that implements <code>FreTyper</code> is answer a set of question concerning the type of a node in the AST.</p>\n<p>If you want to write your own typer you will need to implement this interface.</p>\n<pre class=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">/* File: core/src/typer/FreTyper.ts */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">FreTyper</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">/**\n\t * Returns the type of 'modelelement' according to the type rules in the Typer Definition\n\t * @param modelelement\n\t */</span>\n\t<span class=\"token function\">inferType</span><span class=\"token punctuation\">(</span>modelelement<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Returns true if the type that inferType(elem1) returns equals the type inferType(elem2) returns.\n\t * This is a strict equal.\n\t * @param elem1\n\t * @param elem2\n\t */</span>\n\t<span class=\"token function\">equalsType</span><span class=\"token punctuation\">(</span>elem1<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">,</span> elem2<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Returns true if the type that inferType(elem1) returns conforms to the type inferType(elem2) returns, according to\n\t * the type rules in the Typer definition. The direction is elem2 conforms to elem1.\n\t * @param elem1\n\t * @param elem2\n\t */</span>\n\t<span class=\"token function\">conformsTo</span><span class=\"token punctuation\">(</span>elem1<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">,</span> elem2<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Returns true if all types in typelist1 conform to the types in typelist2, in the given order.\n\t * @param typelist1\n\t * @param typelist2\n\t */</span>\n\t<span class=\"token function\">conformList</span><span class=\"token punctuation\">(</span>typelist1<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> typelist2<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Returns true if 'elem' is marked as 'type' in the Typer definition\n\t * @param elem\n\t */</span>\n\t<span class=\"token function\">isType</span><span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * This interface is being used to implement the three-tier approach.\n * Both the generated and custom type providers should implement this interface.\n * The generated class that implement the FreTyper interface connects all the classes\n * that implement this interface and returns the correct value to the (external) user.\n *\n * When the implementor of this interface does not provide for a result of one of the methods,\n * this method should return 'null'.\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">FreTyperPart</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">/**\n\t * Returns the type of 'modelelement' according to the type rules in the Typer Definition.\n\t * @param modelelement\n\t */</span>\n\t<span class=\"token function\">inferType</span><span class=\"token punctuation\">(</span>modelelement<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> FreElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Returns true if the type that inferType(elem1) returns equals the type inferType(elem2) returns.\n\t * This is a strict equal.\n\t * @param elem1\n\t * @param elem2\n\t */</span>\n\t<span class=\"token function\">equalsType</span><span class=\"token punctuation\">(</span>elem1<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">,</span> elem2<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Returns true if the type that inferType(elem1) returns conforms to the type inferType(elem2) returns, according to\n\t * the type rules in the Typer definition. The direction is elem2 conforms to elem1.\n\t * @param elem1\n\t * @param elem2\n\t */</span>\n\t<span class=\"token function\">conformsTo</span><span class=\"token punctuation\">(</span>elem1<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">,</span> elem2<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Returns true if all types in typelist1 conform to the types in typelist2, in the given order.\n\t * @param typelist1\n\t * @param typelist2\n\t */</span>\n\t<span class=\"token function\">conformList</span><span class=\"token punctuation\">(</span>typelist1<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> typelist2<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Returns true if 'elem' is marked as 'type' in the Typer definition.\n\t * @param elem\n\t */</span>\n\t<span class=\"token function\">isType</span><span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<SectionComponent tag=\"h2\" id=\"frereader-6\" bind:intersecting={visible[5]}>FreReader</SectionComponent>\n<p>An object that implements <code>FreReader</code> is able to read a string representation of a node in the AST.</p>\n<p>If you want to write your own parser/filereader you will need to implement this interface.</p>\n<pre class=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">/* File: core/src/reader/FreReader.ts */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">FreReader</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">/**\n\t * Parses the 'input' into a model unit of type 'metatype'.\n\t * May throw an Error if a syntax error occurs.\n\t * @param input\n\t * @param metatype\n\t */</span>\n\t<span class=\"token function\">readFromString</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> metatype<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<SectionComponent tag=\"h2\" id=\"frewriter-7\" bind:intersecting={visible[6]}>FreWriter</SectionComponent>\n<p>An object that implements <code>FreWriter</code> is able to build a string representation of a node in the AST.</p>\n<p>If you want to write your own unparser/writer you will need to implement this interface.</p>\n<pre class=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">/* File: core/src/writer/FreWriter.ts */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">FreWriter</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">/**\n\t * Returns a string representation of 'modelelement'.\n\t * If 'short' is present and true, then a single-line result will be given.\n\t * Otherwise, the result is always a multi-line string.\n\t * Note that the single-line-string cannot be parsed into a correct model.\n\t *\n\t * @param modelelement\n\t * @param startIndent\n\t * @param short\n\t */</span>\n\t<span class=\"token function\">writeToString</span><span class=\"token punctuation\">(</span>modelelement<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">,</span> startIndent<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> short<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Returns a string representation of 'modelelement', divided into an array of strings,\n\t * each of which contain a single line (without newline).\n\t * If 'short' is present and true, then a single-line result will be given.\n\t * Otherwise, the result is always a multi-line string.\n\t *\n\t * @param modelelement\n\t * @param startIndent\n\t * @param short\n\t */</span>\n\t<span class=\"token function\">writeToLines</span><span class=\"token punctuation\">(</span>modelelement<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">,</span> startIndent<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> short<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Returns the name of 'modelelement' if it has one, else returns\n\t * a short unparsing of 'modelelement'.\n\t * Used by the validator to produce readable error messages.\n\t *\n\t * @param modelelement\n\t */</span>\n\t<span class=\"token function\">writeNameOnly</span><span class=\"token punctuation\">(</span>modelelement<span class=\"token operator\">:</span> FreElement<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<SectionComponent tag=\"h2\" id=\"frestdlib-8\" bind:intersecting={visible[7]}>FreStdlib</SectionComponent>\n<p>An object that implements <code>FreStdlib</code> holds a number of predefined AST nodes, which can be referred to in the model AST.</p>\n<p>If you want to write your own standard library you will need to implement this interface.</p>\n<pre class=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">/* File: core/src/stdlib/FreStdlib.ts  */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">FreStdlib</span> <span class=\"token punctuation\">&#123;</span>\n\telements<span class=\"token operator\">:</span> FreNamedElement<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Returns the element named 'name', if it can be found in this library.\n\t * When 'metatype' is provided, the element is only returned when it is\n\t * an instance of this metatype.\n\t * @param name\n\t * @param metatype\n\t */</span>\n\t<span class=\"token function\">find</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> metatype<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> FreNamedElement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<p>\n\tThe second series of interfaces are those that define parts of the\n\t<a href=\"/Documentation/Under_the_Hood/Editor_Framework\">Freon Editor Framework</a>.\n</p>\n\n<PrevNextSection {prevLink} {nextLink} />\n","<script lang=\"ts\">\n\timport { mySections } from './SectionStore.js';\n\timport type { Section } from '$lib/section/SectionType.js';\n\timport PageContent from './PageContent.svelte';\n\timport Breadcrumb from '$lib/breadcrumbs/Breadcrumb.svelte';\n\n\tlet showDetails: boolean = false;\n\t$: current = getCurrent($mySections);\n\n\tfunction getCurrent(internalSections: Section[]): number {\n\t\tlet previous = current;\n\t\tfor (let i = 0; i < internalSections.length; i++) {\n\t\t\tif (internalSections[i].visible) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn previous;\n\t}\n\tfunction toggleTocDetails() {\n\t\tshowDetails = !showDetails;\n\t}\n</script>\n\n<div class=\"page-main\">\n\t<div class=\"page-toc-small\">\n\t\t<p class=\"page-toc-small-title\">On this page ...</p>\n\t\t<button\n\t\t\tclass=\"page-toc-small-expand-button\"\n\t\t\ton:click={() => {\n\t\t\t\ttoggleTocDetails();\n\t\t\t}}\n\t\t>\n\t\t\t{#if showDetails}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/upload.png\" alt=\"arrow up\" />\n\t\t\t{:else}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/down-arrow.png\" alt=\"arrow down\" />\n\t\t\t{/if}\n\t\t</button>\n\t</div>\n\t{#if showDetails}\n\t\t<div class=\"toc-details\">\n\t\t\t<ul class=\"page-ul\">\n\t\t\t\t{#each $mySections as sec, index}\n\t\t\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t\t\t{sec.title}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t{/each}\n\t\t\t</ul>\n\t\t</div>\n\t{/if}\n\n\t<Breadcrumb />\n\t<PageContent />\n</div>\n\n<nav class=\"page-toc\">\n\t<h3 class=\"page-toc-title\">On this page</h3>\n\t<ul class=\"page-ul\">\n\t\t{#each $mySections as sec, index}\n\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t{sec.title}\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n</nav>\n"],"names":["mySections","writable","ctx","sectioncomponent0_props","sectioncomponent1_props","sectioncomponent2_props","sectioncomponent3_props","sectioncomponent4_props","sectioncomponent5_props","sectioncomponent6_props","sectioncomponent7_props","insert_hydration","target","p0","anchor","p1","pre0","p2","p3","pre1","p4","p5","p6","pre2","h3","pre3","p7","p8","pre4","p9","p10","pre5","p11","p12","pre6","p13","p14","pre7","p15","sectioncomponent0_changes","sectioncomponent1_changes","sectioncomponent2_changes","sectioncomponent3_changes","sectioncomponent4_changes","sectioncomponent5_changes","sectioncomponent6_changes","sectioncomponent7_changes","prevLink","nextLink","$mySections","visible","onMount","block","copyPrompt","copyPromptText","copyIcon","evt","copy","$$self","value","set_store_value","img","i","div","append_hydration","ul","t0_value","attr","a","a_href_value","toggle_class","li","dirty","set_data","t0","create_if_block_1","create_if_block","div1","div0","p","button","nav","showDetails","getCurrent","internalSections","previous","current","toggleTocDetails","$$invalidate"],"mappings":"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"}