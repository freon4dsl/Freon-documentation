{"version":3,"file":"29.bWx042eY.js","sources":["../../../../../../src/routes/Documentation/Customizations/Typer_Customization/SectionStore.ts","../../../../../../src/routes/Documentation/Customizations/Typer_Customization/PageContent.svelte","../../../../../../src/routes/Documentation/Customizations/Typer_Customization/+page.svelte"],"sourcesContent":["import { writable, type Writable } from 'svelte/store';\nimport type { Section } from '$lib/section/SectionType';\n\nexport const mySections: Writable<Section[]> = writable<Section[]>([]);\n","<script lang=\"ts\">\n\timport SectionComponent from '$lib/section/SectionComponent.svelte';\n\timport { mySections } from './SectionStore.js';\n\t$mySections = [\n\t\t{ title: 'Customization of the Typer', visible: false, ref: '#customization-of-the-typer-1' },\n\t\t{ title: 'Adding Typing Methods', visible: false, ref: '#adding-typing-methods-2' }\n\t];\n\tlet visible: boolean[] = [];\n\t$: $mySections[0].visible = visible[0];\n\t$: $mySections[1].visible = visible[1];\n\timport copy from 'copy-to-clipboard';\n\timport { onMount } from 'svelte';\n\n\t/**\n\t * This function will go through all the 'pre' elements\n\t * on the page and add a copy button to them.\n\t * Thanks to: https://slavbasharov.com/blog/adding-click-to-copy-code-markdown-blog\n\t */\n\tonMount(() => {\n\t\tconst codeBlocks = document.querySelectorAll('pre');\n\t\tcodeBlocks.forEach((block) => {\n\t\t\tconst copyPrompt = document.createElement('div');\n\t\t\tcopyPrompt.className = 'copy-prompt';\n\t\t\tconst copyPromptText = document.createElement('p');\n\t\t\tcopyPromptText.innerHTML = 'ðŸ‘† Click to copy';\n\t\t\tcopyPromptText.className = 'copy-prompt-p';\n\t\t\tconst copyIcon = document.createElement('img');\n\t\t\tcopyIcon.src = '/icons/copy-icon.svg';\n\t\t\tcopyIcon.className = 'copy-prompt-img';\n\t\t\tcopyPrompt.appendChild(copyIcon);\n\t\t\tcopyPrompt.appendChild(copyPromptText);\n\t\t\tblock.appendChild(copyPrompt);\n\t\t\tblock.querySelector('.copy-prompt > p').addEventListener('click', (evt) => {\n\t\t\t\tcopy(block.querySelector('code').textContent);\n\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'Copied!';\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'ðŸ‘† Click to copy';\n\t\t\t\t}, 1000);\n\t\t\t});\n\t\t});\n\t});\n\timport PrevNextSection from '$lib/prevNext/PrevNextSection.svelte';\n\n\tlet prevLink = '/Documentation/Customizations/Scoper_Customization';\n\tlet nextLink = '/Documentation/Customizations/Validator_Customization';\n</script>\n\n<PrevNextSection {prevLink} {nextLink} />\n<SectionComponent tag=\"h1\" id=\"customization-of-the-typer-1\" bind:intersecting={visible[0]}>Customization of the Typer</SectionComponent>\n<p>\n\tThe typer can be customized <strong>per concept</strong>. Your new typer needs to implement the\n\t<a href=\"/Documentation/Under_the_Hood/FreTool_Interfaces#fretyper-5\">FreTyper interface</a>.\n</p>\n<p>\n\tAs a convenience, Freon generates a file <code>~/freon/typer/CustomYourLanguageNameTyperPart.ts</code>, which will not be overwritten upon\n\tregeneration. It already contains a class that implements this interface.\n</p>\n<SectionComponent tag=\"h2\" id=\"adding-typing-methods-2\" bind:intersecting={visible[1]}>Adding Typing Methods</SectionComponent>\n<p>\n\tIn the new typer class add the code you want to add in one or more of the methods. Let the method return â€˜nullâ€™ to let Freon know that the\n\ttyper from the Freon Definition Level should be used instead.\n</p>\n<p>\n\tThe following code changes the <code>conformsList</code> method for lists of <code>Variables</code>. It checks the lists in reverse order:\n\tA-B-C conforms to C-B-A.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">// CustomizationsProject/src/custom/typer/CustomEntityModelTyperPart.ts</span>\n\n<span class=\"token comment\">// Generated by the Freon Language Generator.</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> FreNode<span class=\"token punctuation\">,</span> FreType<span class=\"token punctuation\">,</span> FreTyper <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@freon4dsl/core\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>Variable<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../language/gen/index.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>EntityModelEnvironment<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../config/gen/EntityModelEnvironment.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Class 'CustomEntityModelTyperPart' is meant to be a convient place to add any\n * custom code for type checking.\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomEntityModelTyperPart</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">FreTyper</span> <span class=\"token punctuation\">&#123;</span>\n    mainTyper<span class=\"token operator\">:</span> FreTyper<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">isType</span><span class=\"token punctuation\">(</span>modelelement<span class=\"token operator\">:</span> FreNode<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">inferType</span><span class=\"token punctuation\">(</span>modelelement<span class=\"token operator\">:</span> FreNode<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> FreType <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>type1<span class=\"token operator\">:</span> FreType<span class=\"token punctuation\">,</span> type2<span class=\"token operator\">:</span> FreType<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">conforms</span><span class=\"token punctuation\">(</span>type1<span class=\"token operator\">:</span> FreType<span class=\"token punctuation\">,</span> type2<span class=\"token operator\">:</span> FreType<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Example of custom typings: typelist2 conforms to typelist1 if the elements\n     * conform in the opposite direction, i.e. [A, B, C] conforms to [C, B, A]\n     * @param typelist1\n     * @param typelist2\n     */</span>\n    <span class=\"token function\">conformsList</span><span class=\"token punctuation\">(</span>typelist1<span class=\"token operator\">:</span> FreType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> typelist2<span class=\"token operator\">:</span> FreType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>typelist1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>typelist1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Variable</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>typelist1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> typelist2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> result<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> max_length <span class=\"token operator\">=</span> typelist1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> typelist1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result <span class=\"token operator\">=</span> EntityModelEnvironment<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>typer<span class=\"token punctuation\">.</span><span class=\"token function\">conforms</span><span class=\"token punctuation\">(</span>typelist1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> typelist2<span class=\"token punctuation\">[</span>max_length <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">commonSuper</span><span class=\"token punctuation\">(</span>typelist<span class=\"token operator\">:</span> FreType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> FreType <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getSuperTypes</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> FreType<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> FreType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code>`}</pre>\n\n<PrevNextSection {prevLink} {nextLink} />\n","<script lang=\"ts\">\n\timport { mySections } from './SectionStore.js';\n\timport type { Section } from '$lib/section/SectionType.js';\n\timport PageContent from './PageContent.svelte';\n\timport Breadcrumb from '$lib/breadcrumbs/Breadcrumb.svelte';\n\n\tlet showDetails: boolean = false;\n\t$: current = getCurrent($mySections);\n\n\tfunction getCurrent(internalSections: Section[]): number {\n\t\tlet previous = current;\n\t\tfor (let i = 0; i < internalSections.length; i++) {\n\t\t\tif (internalSections[i].visible) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn previous;\n\t}\n\tfunction toggleTocDetails() {\n\t\tshowDetails = !showDetails;\n\t}\n</script>\n\n<div class=\"page-main\">\n\t<div class=\"page-toc-small\">\n\t\t<p class=\"page-toc-small-title\">On this page ...</p>\n\t\t<button\n\t\t\tclass=\"page-toc-small-expand-button\"\n\t\t\ton:click={() => {\n\t\t\t\ttoggleTocDetails();\n\t\t\t}}\n\t\t>\n\t\t\t{#if showDetails}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/upload.png\" alt=\"arrow up\" />\n\t\t\t{:else}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/down-arrow.png\" alt=\"arrow down\" />\n\t\t\t{/if}\n\t\t</button>\n\t</div>\n\t{#if showDetails}\n\t\t<div class=\"toc-details\">\n\t\t\t<ul class=\"page-ul\">\n\t\t\t\t{#each $mySections as sec, index}\n\t\t\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t\t\t{sec.title}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t{/each}\n\t\t\t</ul>\n\t\t</div>\n\t{/if}\n\n\t<Breadcrumb />\n\t<PageContent />\n</div>\n\n<nav class=\"page-toc\">\n\t<h3 class=\"page-toc-title\">On this page</h3>\n\t<ul class=\"page-ul\">\n\t\t{#each $mySections as sec, index}\n\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t{sec.title}\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n</nav>\n"],"names":["mySections","writable","ctx","sectioncomponent0_props","sectioncomponent1_props","insert_hydration","target","p0","anchor","p1","p2","p3","pre","sectioncomponent0_changes","sectioncomponent1_changes","prevLink","nextLink","$mySections","visible","onMount","block","copyPrompt","copyPromptText","copyIcon","evt","copy","$$self","value","set_store_value","img","i","div","append_hydration","ul","t0_value","attr","a","a_href_value","toggle_class","li","dirty","set_data","t0","create_if_block_1","create_if_block","div1","div0","p","button","nav","h3","showDetails","getCurrent","internalSections","previous","current","toggleTocDetails","$$invalidate"],"mappings":"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"}