{"version":3,"file":"52.DReQ20a0.js","sources":["../../../../../../src/routes/Documentation/Scoping,_Typing,_and_Validating/Type_Provider/SectionStore.ts","../../../../../../src/routes/Documentation/Scoping,_Typing,_and_Validating/Type_Provider/PageContent.svelte","../../../../../../src/routes/Documentation/Scoping,_Typing,_and_Validating/Type_Provider/+page.svelte"],"sourcesContent":["import { writable, type Writable } from 'svelte/store';\nimport type { Section } from '$lib/section/SectionType';\n\nexport const mySections: Writable<Section[]> = writable<Section[]>([]);\n","<script lang=\"ts\">\n\timport SectionComponent from '$lib/section/SectionComponent.svelte';\n\timport { mySections } from './SectionStore.js';\n\t$mySections = [\n\t\t{ title: 'Type Provider', visible: false, ref: '#type-provider-1' },\n\t\t{ title: 'Typing Rules', visible: false, ref: '#typing-rules-2' },\n\t\t{ title: 'Types or Type Concepts', visible: false, ref: '#types-or-type-concepts-3' },\n\t\t{ title: 'Terms That Have a Type', visible: false, ref: '#terms-that-have-a-type-4' },\n\t\t{ title: 'Inference Rules', visible: false, ref: '#inference-rules-5' },\n\t\t{ title: 'Type Equals and Type Conformance Rules', visible: false, ref: '#type-equals-and-type-conformance-rules-6' },\n\t\t{ title: 'Use of conformsto', visible: false, ref: '#use-of-conformsto-7' },\n\t\t{ title: 'Rules That Apply to Any Concept', visible: false, ref: '#rules-that-apply-to-any-concept-8' }\n\t];\n\tlet visible: boolean[] = [];\n\t$: $mySections[0].visible = visible[0];\n\t$: $mySections[1].visible = visible[1];\n\t$: $mySections[2].visible = visible[2];\n\t$: $mySections[3].visible = visible[3];\n\t$: $mySections[4].visible = visible[4];\n\t$: $mySections[5].visible = visible[5];\n\t$: $mySections[6].visible = visible[6];\n\t$: $mySections[7].visible = visible[7];\n\timport copy from 'copy-to-clipboard';\n\timport { onMount } from 'svelte';\n\n\t/**\n\t * This function will go through all the 'pre' elements\n\t * on the page and add a copy button to them.\n\t * Thanks to: https://slavbasharov.com/blog/adding-click-to-copy-code-markdown-blog\n\t */\n\tonMount(() => {\n\t\tconst codeBlocks = document.querySelectorAll('pre');\n\t\tcodeBlocks.forEach((block) => {\n\t\t\tconst copyPrompt = document.createElement('div');\n\t\t\tcopyPrompt.className = 'copy-prompt';\n\t\t\tconst copyPromptText = document.createElement('p');\n\t\t\tcopyPromptText.innerHTML = 'ðŸ‘† Click to copy';\n\t\t\tcopyPromptText.className = 'copy-prompt-p';\n\t\t\tconst copyIcon = document.createElement('img');\n\t\t\tcopyIcon.src = '/icons/copy-icon.svg';\n\t\t\tcopyIcon.className = 'copy-prompt-img';\n\t\t\tcopyPrompt.appendChild(copyIcon);\n\t\t\tcopyPrompt.appendChild(copyPromptText);\n\t\t\tblock.appendChild(copyPrompt);\n\t\t\tblock.querySelector('.copy-prompt > p').addEventListener('click', (evt) => {\n\t\t\t\tcopy(block.querySelector('code').textContent);\n\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'Copied!';\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'ðŸ‘† Click to copy';\n\t\t\t\t}, 1000);\n\t\t\t});\n\t\t});\n\t});\n\timport PrevNextSection from '$lib/prevNext/PrevNextSection.svelte';\n\n\tlet prevLink = '/Documentation/Scoping,_Typing,_and_Validating/Scope_Provider';\n\tlet nextLink = '/Documentation/Scoping,_Typing,_and_Validating/Validator';\n\n\timport Note from '$lib/notes/Note.svelte';\n</script>\n\n<PrevNextSection {prevLink} {nextLink} />\n\n<SectionComponent tag=\"h1\" id=\"type-provider-1\" bind:intersecting={visible[0]}>Type Provider</SectionComponent>\n<p>\n\tTyping determines which elements are permissible in specific locations within a model or Abstract Syntax Tree (AST). For example, in the\n\texpression <code>a + 6</code>, it is generally expected that <code>a</code> represents a numeric value, as other types of values would not\n\tbe valid in this context.\n</p>\n<p>\n\tFreon addresses many potential typing issues by enforcing the use of a typed metamodel. This ensures that when a certain type, such as a\n\tboolean, is required, only a boolean value can be provided. However, there are scenarios where the metamodel permits a broader range of\n\tvalues than desired, which can lead to unintended flexibility.\n</p>\n<p>\n\tThe <strong>type provider</strong> (or <strong>typer</strong>, for short) definition provides the information necessary to determine the\n\ttype of element. Any part of the typer definition must be included in a file with the extension <code>.type</code>. All files with this\n\textension in the <a href=\"/Documentation/Overview/Getting_Started#template-project-startup-3\"><em>defs</em> folder</a>\n\t(i.e. the folder were you keep your definition files) are combined into one typer definition.\n</p>\n<SectionComponent tag=\"h1\" id=\"typing-rules-2\" bind:intersecting={visible[1]}>Typing Rules</SectionComponent>\n<p>\n\tIn the typer definition file you can indicate typing rules for every\n\t<em>concept</em> or <em>interface</em> in your language. The typing rules come in four categories. Each category is there to answer one of\n\tthe following questions.\n</p>\n<ol>\n\t<li>Which <em>concepts</em> or <em>interfaces</em> are considered to be types?</li>\n\t<li>Which <em>concepts</em> or <em>interfaces</em> are considered to have a type?</li>\n\t<li>How to determine the type of a <em>concept</em> or <em>interface</em>?</li>\n\t<li>Which types are considered to be equal or conforming?</li>\n</ol>\n<p>Note that these sections need to be in the <code>.type</code> file in this order.</p>\n<SectionComponent tag=\"h2\" id=\"types-or-type-concepts-3\" bind:intersecting={visible[2]}>Types or Type Concepts</SectionComponent>\n<p>\n\tIn Freon all types are completely separate from the elements of your AST. These are called <strong>type concepts</strong>, which all\n\timplements the interface <strong>FreType</strong> from the <code>@freon4dsl/core</code> package. Type concepts can be defined in two ways.\n\tEither they are specified in the <code>.type</code> file, or some AST nodes are declared to be types. In the latter case, Freon generates a\n\ttype concept which holds a reference to the AST node.\n</p>\n<p>\n\tTo indicate which AST concepts are considered to be types in your language, the keyword <code>isType</code> is used, followed by all types\n\tin your language between curly brackets, and separated by commas.\n</p>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// Insurance/src/defs/typer-docu.type#L4-L4\n</span>\n<span class=\"token class-name\">istype</span> &#123; NamedType &#125;</code>`}</pre>\n<p>\n\tTo define new type concepts you can use a simplified version of the concept definition in the .ast files. The properties may only be\n\tinstances of other type concepts, or references to limited concepts. The property\n\t<code>base</code> in the next example is an instance of the interface <code>FreType</code>, whereas the property <code>kind</code> refers\n\tto the limited concept <code>GenericKind</code>.\n</p>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// Insurance/src/defs/typer-docu.type#L6-L9\n</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">GenericType</span> &#123;\n    <span class=\"token keyword\">base</span>: <span class=\"token class-name\">FreType</span>;\n    kind: <span class=\"token class-name\">GenericKind</span>;\n&#125;</code>`}</pre>\n<p>Note that is it often good practise to have a common superclass or interface for all your types, but this is not necessary.</p>\n<SectionComponent tag=\"h2\" id=\"terms-that-have-a-type-4\" bind:intersecting={visible[3]}>Terms That Have a Type</SectionComponent>\n<p>\n\tNot all AST nodes need to have a type associated to it. Only those nodes for which you need a validation rule, or have another reason to\n\trequire a type, need to be marked as having a type. We refer to those AST nodes as <strong>terms</strong>, so as not to confuse these with\n\t<a href=\"/Documentation/Creating_the_Metamodel/Language_Structure#expression-concept-5\"><code>expression concepts</code></a>, which have a\n\tdifferent meaning.\n</p>\n<p>\n\tYou can indicate which AST nodes are terms by the keyword <code>hasType</code> followed by all terms in your language between curly brackets,\n\tand separated by commas.\n</p>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// Insurance/src/defs/typer-docu.type#L12-L12\n</span>\n<span class=\"token class-name\">hastype</span> &#123; DocuExpression, DocuType, CalcFunction, Parameter, RiskRef, PayoutRef &#125;</code>`}</pre>\n<SectionComponent tag=\"h2\" id=\"inference-rules-5\" bind:intersecting={visible[4]}>Inference Rules</SectionComponent>\n<p>\n\tIn order to determine the type of a term, there needs to be a rule, called an <strong>inference rule</strong>, for each concept or\n\tinterface that is marked <code>hasType</code>. Each of these rules should result in a type concept.\n</p>\n<p>\n\tThe following example gives an inference rule that states that the type of calculation function is the value of its attribute <code\n\t\t>declaredType</code\n\t>. This value is an instance of <code>DocuType</code>, which indeed was declared to represent a type by the above declaration. First, we\n\tshow the metamodel definition.\n</p>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// Insurance/src/defs/language-main.ast#L68-L74\n</span>\n<span class=\"token keyword\">concept</span> <span class=\"token class-name\">CalcFunction</span> &#123;\n    name: <span class=\"token builtin\">identifier</span>;                   <span class=\"token comment\">// the name\n</span>    description?: <span class=\"token class-name\">Description</span>;          <span class=\"token comment\">// an optional description\n</span>    declaredType : <span class=\"token class-name\">DocuType</span>;            <span class=\"token comment\">// the type\n</span>    body: <span class=\"token class-name\">DocuExpression</span>;               <span class=\"token comment\">// the actual calculation definition\n</span>    parameters: <span class=\"token class-name\">Parameter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>;            <span class=\"token comment\">// any parameters\n</span>&#125;</code>`}</pre>\n<p>And, the typer definition looks like this.</p>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// Insurance/src/defs/typer-docu.type#L18-L20\n</span>\n<span class=\"token class-name\">CalcFunction</span> &#123;\n    <span class=\"token keyword\">infertype</span> <span class=\"token variable\">self</span>.declaredType;\n&#125;</code>`}</pre>\n<Note>\n\t<svelte:fragment slot=\"content\"\n\t\t>This is a valid inference rule, only if 'declaredType' is an instance of a concept that is marked 'isType'.\n\t</svelte:fragment>\n</Note>\n<p>\n\tConcepts that are types (as indicated by <code>isType</code>) can also be terms. If an inference rule is present, this rule will determine\n\tthe type of such a term. If no rule is present, the type of the AST node is the <em>type concept</em> generated for this AST node.\n</p>\n<p>\n\tIn an inference rule, as in other definition files, it is possible to use the predefined instances of a <strong>limited concept</strong>.\n</p>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// Insurance/src/defs/typer-docu.type#L27-L29\n</span>\n<span class=\"token class-name\">RiskAdjustmentRef</span> &#123;\n    <span class=\"token keyword\">infertype</span> PercentageType:<span class=\"token class-name\">Percentage</span>;\n&#125;</code>`}</pre>\n<SectionComponent tag=\"h2\" id=\"type-equals-and-type-conformance-rules-6\" bind:intersecting={visible[5]}\n\t>Type Equals and Type Conformance Rules</SectionComponent\n>\n<p>\n\tThe last section in the type definition is where rules are given that state which types are considered equal or conforming. Each rule can\n\thave two entries: the <code>conformsto</code> and the <code>equalsto</code> entries. Within these entries it is also possible to use the predefined\n\tinstances of a limited concept.\n</p>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// Insurance/src/defs/typer-docu.type#L81-L89\n</span>\n<span class=\"token comment\">// Which types are 'equal' to each other?\n</span><span class=\"token class-name\">NamedType</span> &#123;\n    <span class=\"token keyword\">equalsto</span> aa:<span class=\"token class-name\">NamedType</span> <span class=\"token class-name\">where</span> &#123;\n            aa.name <span class=\"token keyword\">equalsto</span> <span class=\"token variable\">self</span>.name;\n        &#125;;\n    <span class=\"token keyword\">conformsto</span> other:<span class=\"token class-name\">NamedType</span> <span class=\"token class-name\">where</span> &#123;\n            other.name <span class=\"token keyword\">equalsto</span> <span class=\"token variable\">self</span>.name;\n        &#125;;\n&#125;</code>`}</pre>\n<p>\n\tThe <code>where</code> clause in the above example can be used when a type has some structure. For every property in the type concept a\n\tcondition is given. If all conditions evaluate to true then the <code>where</code> clause results in true.\n</p>\n<Note>\n\t<svelte:fragment slot=\"content\">\n\t\tType concept instances can not be compared based on their identity, instead you will need to use an <code>equalsto</code> entry.\n\t</svelte:fragment>\n</Note>\n<SectionComponent tag=\"h2\" id=\"use-of-conformsto-7\" bind:intersecting={visible[6]}>Use of <strong>conformsto</strong></SectionComponent>\n<p>\n\tIn a condition of a <code>where</code> clause you may use <code>conformsto</code>. In that case, invocation of the rule will produce the\n\tcartesian product of all super concepts of the properties in the conditions. For an example, see\n\t<a href=\"/Examples/Generic_Types\">Typer Example</a>.\n</p>\n<Note>\n\t<svelte:fragment slot=\"content\">\n\t\tBe careful with the use of <code>conformsto</code> within <code>where</code> clauses because this can lead to an explosion of newly created\n\t\ttype concept instances.\n\t</svelte:fragment>\n</Note>\n<SectionComponent tag=\"h2\" id=\"rules-that-apply-to-any-concept-8\" bind:intersecting={visible[7]}\n\t>Rules That Apply to Any Concept</SectionComponent\n>\n<p>\n\tConformance and other rules can also be defined to apply to <strong>any</strong> concept. Obviously, this means that any instance of any concept\n\tconforms to the given value.\n</p>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// TyperExample/src/defs/projectY.type#L21-L28\n</span>\n    <span class=\"token keyword\">conformsto</span> PredefinedType:<span class=\"token class-name\">ANY</span>; <span class=\"token comment\">// PredefinedType:ANY is the least specific type\n</span>&#125;\n\n<span class=\"token class-name\">PredefinedType</span> &#123;\n    PredefinedType:<span class=\"token class-name\">NULL</span> <span class=\"token keyword\">conformsto</span> anytype; <span class=\"token comment\">// PredefinedType:NULL is the most specific type\n</span>    NUMBER <span class=\"token keyword\">conformsto</span> STRING;\n&#125;\n</code>`}</pre>\n<Note>\n\t<svelte:fragment slot=\"content\">Anytype rules must be included after the 'hasType' rules and before the inference rules.</svelte:fragment>\n</Note>\n\n<PrevNextSection {prevLink} {nextLink} />\n","<script lang=\"ts\">\n\timport { mySections } from './SectionStore.js';\n\timport type { Section } from '$lib/section/SectionType.js';\n\timport PageContent from './PageContent.svelte';\n\timport Breadcrumb from '$lib/breadcrumbs/Breadcrumb.svelte';\n\n\tlet showDetails: boolean = false;\n\t$: current = getCurrent($mySections);\n\n\tfunction getCurrent(internalSections: Section[]): number {\n\t\tlet previous = current;\n\t\tfor (let i = 0; i < internalSections.length; i++) {\n\t\t\tif (internalSections[i].visible) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn previous;\n\t}\n\tfunction toggleTocDetails() {\n\t\tshowDetails = !showDetails;\n\t}\n</script>\n\n<div class=\"page-main\">\n\t<div class=\"page-toc-small\">\n\t\t<p class=\"page-toc-small-title\">On this page ...</p>\n\t\t<button\n\t\t\tclass=\"page-toc-small-expand-button\"\n\t\t\ton:click={() => {\n\t\t\t\ttoggleTocDetails();\n\t\t\t}}\n\t\t>\n\t\t\t{#if showDetails}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/upload.png\" alt=\"arrow up\" />\n\t\t\t{:else}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/down-arrow.png\" alt=\"arrow down\" />\n\t\t\t{/if}\n\t\t</button>\n\t</div>\n\t{#if showDetails}\n\t\t<div class=\"toc-details\">\n\t\t\t<ul class=\"page-ul\">\n\t\t\t\t{#each $mySections as sec, index}\n\t\t\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t\t\t{sec.title}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t{/each}\n\t\t\t</ul>\n\t\t</div>\n\t{/if}\n\n\t<Breadcrumb />\n\t<PageContent />\n</div>\n\n<nav class=\"page-toc\">\n\t<h3 class=\"page-toc-title\">On this page</h3>\n\t<ul class=\"page-ul\">\n\t\t{#each $mySections as sec, index}\n\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t{sec.title}\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n</nav>\n"],"names":["mySections","writable","insert_hydration","target","code","anchor","strong","code0","code1","ctx","sectioncomponent0_props","sectioncomponent1_props","sectioncomponent2_props","sectioncomponent3_props","sectioncomponent4_props","sectioncomponent5_props","sectioncomponent6_props","sectioncomponent7_props","p0","p1","p2","p3","ol","p4","p5","p6","pre0","p7","pre1","p8","p9","p10","pre2","p11","p12","pre3","p13","pre4","p14","p15","pre5","p16","pre6","p17","p18","p19","pre7","sectioncomponent0_changes","sectioncomponent1_changes","sectioncomponent2_changes","sectioncomponent3_changes","sectioncomponent4_changes","sectioncomponent5_changes","sectioncomponent6_changes","sectioncomponent7_changes","prevLink","nextLink","$mySections","visible","onMount","block","copyPrompt","copyPromptText","copyIcon","evt","copy","$$self","value","set_store_value","img","i","div","append_hydration","ul","t0_value","attr","a","a_href_value","toggle_class","li","dirty","set_data","t0","create_if_block_1","create_if_block","div1","div0","p","button","nav","h3","showDetails","getCurrent","internalSections","previous","current","toggleTocDetails","$$invalidate"],"mappings":"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"}