{"version":3,"file":"64.Dk4LYwNw.js","sources":["../../../../../../src/routes/Examples/Building_an_Interpreter/Basic_Evaluation_Functions/SectionStore.ts","../../../../../../src/routes/Examples/Building_an_Interpreter/Basic_Evaluation_Functions/PageContent.svelte","../../../../../../src/routes/Examples/Building_an_Interpreter/Basic_Evaluation_Functions/+page.svelte"],"sourcesContent":["import { writable, type Writable } from 'svelte/store';\nimport type { Section } from '$lib/section/SectionType';\n\nexport const mySections: Writable<Section[]> = writable<Section[]>([]);\n","<script lang=\"ts\">\n\timport SectionComponent from '$lib/section/SectionComponent.svelte';\n\timport { mySections } from './SectionStore.js';\n\t$mySections = [\n\t\t{ title: 'More Basic Evaluation Functions', visible: false, ref: '#more-basic-evaluation-functions-1' },\n\t\t{ title: 'The AST of the Test Model Unit', visible: false, ref: '#the-ast-of-the-test-model-unit-2' },\n\t\t{ title: 'Evaluations of LastStep and Answer', visible: false, ref: '#evaluations-of-laststep-and-answer-3' },\n\t\t{ title: 'Evaluation of Page', visible: false, ref: '#evaluation-of-page-4' },\n\t\t{ title: 'Evaluation of ScoreExpressions', visible: false, ref: '#evaluation-of-scoreexpressions-5' },\n\t\t{ title: 'More About Evaluation of Pages', visible: false, ref: '#more-about-evaluation-of-pages-6' }\n\t];\n\tlet visible: boolean[] = [];\n\t$: $mySections[0].visible = visible[0];\n\t$: $mySections[1].visible = visible[1];\n\t$: $mySections[2].visible = visible[2];\n\t$: $mySections[3].visible = visible[3];\n\t$: $mySections[4].visible = visible[4];\n\t$: $mySections[5].visible = visible[5];\n\timport copy from 'copy-to-clipboard';\n\timport { onMount } from 'svelte';\n\n\t/**\n\t * This function will go through all the 'pre' elements\n\t * on the page and add a copy button to them.\n\t * Thanks to: https://slavbasharov.com/blog/adding-click-to-copy-code-markdown-blog\n\t */\n\tonMount(() => {\n\t\tconst codeBlocks = document.querySelectorAll('pre');\n\t\tcodeBlocks.forEach((block) => {\n\t\t\tconst copyPrompt = document.createElement('div');\n\t\t\tcopyPrompt.className = 'copy-prompt';\n\t\t\tconst copyPromptText = document.createElement('p');\n\t\t\tcopyPromptText.innerHTML = 'ðŸ‘† Click to copy';\n\t\t\tcopyPromptText.className = 'copy-prompt-p';\n\t\t\tconst copyIcon = document.createElement('img');\n\t\t\tcopyIcon.src = '/icons/copy-icon.svg';\n\t\t\tcopyIcon.className = 'copy-prompt-img';\n\t\t\tcopyPrompt.appendChild(copyIcon);\n\t\t\tcopyPrompt.appendChild(copyPromptText);\n\t\t\tblock.appendChild(copyPrompt);\n\t\t\tblock.querySelector('.copy-prompt > p').addEventListener('click', (evt) => {\n\t\t\t\tcopy(block.querySelector('code').textContent);\n\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'Copied!';\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'ðŸ‘† Click to copy';\n\t\t\t\t}, 1000);\n\t\t\t});\n\t\t});\n\t});\n\timport PrevNextSection from '$lib/prevNext/PrevNextSection.svelte';\n\n\tlet prevLink = '/Examples/Building_an_Interpreter';\n\tlet nextLink = '/Examples/Building_an_Interpreter/Using_the_Context';\n\n\timport Note from '$lib/notes/Note.svelte';\n</script>\n\n<PrevNextSection {prevLink} {nextLink} />\n\n<SectionComponent tag=\"h1\" id=\"more-basic-evaluation-functions-1\" bind:intersecting={visible[0]}\n\t>More Basic Evaluation Functions</SectionComponent\n>\n<p>With the simplest evaluation functions done, we can turn to the actual test that needs to be done.</p>\n<SectionComponent tag=\"h2\" id=\"the-ast-of-the-test-model-unit-2\" bind:intersecting={visible[1]}\n\t>The AST of the Test Model Unit</SectionComponent\n>\n<p>Letâ€™s refresh your memory and have a look at the AST of the <code>Test</code> model unit.</p>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// Education/lesson9-defs/edu-tests.ast\n</span>\nlanguage Education\n\n<span class=\"token keyword\">modelunit</span> <span class=\"token class-name\">Test</span> &#123;\n    name: <span class=\"token builtin\">identifier</span>;\n    scenarios: <span class=\"token class-name\">Scenario</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>;\n    <span class=\"token keyword\">reference</span> main: <span class=\"token class-name\">SiteGroup</span>;\n    <span class=\"token keyword\">reference</span> flow: <span class=\"token class-name\">Flow</span>;\n&#125;\n\n<span class=\"token keyword\">concept</span> <span class=\"token class-name\">Scenario</span> &#123;\n    description: <span class=\"token builtin\">string</span>;\n    testFlow: <span class=\"token class-name\">TestFlow</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>;\n    steps: <span class=\"token class-name\">Step</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>; <span class=\"token comment\">/* Note that the order is of importance */</span>\n&#125;\n\n<span class=\"token keyword\">concept</span> <span class=\"token class-name\">TestFlow</span> &#123;\n    steps: <span class=\"token class-name\">Step</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>; <span class=\"token comment\">/* Note that the order is of importance */</span>\n&#125;\n\n<span class=\"token keyword\">concept</span> <span class=\"token class-name\">Step</span> &#123;\n    <span class=\"token keyword\">reference</span> fromPage: <span class=\"token class-name\">Page</span>;\n    answerSeries: <span class=\"token class-name\">Answer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>;\n&#125;\n\n<span class=\"token keyword\">concept</span> <span class=\"token class-name\">LastStep</span> <span class=\"token keyword\">base</span> <span class=\"token class-name\">Step</span> &#123;\n&#125;\n\n<span class=\"token keyword\">concept</span> <span class=\"token class-name\">Answer</span> &#123;\n    <span class=\"token keyword\">reference</span> question: <span class=\"token class-name\">Question</span>;\n    value: <span class=\"token class-name\">NumberConcept</span>;\n&#125;\n</code>`}</pre>\n<SectionComponent tag=\"h2\" id=\"evaluations-of-laststep-and-answer-3\" bind:intersecting={visible[2]}\n\t>Evaluations of <code>LastStep</code> and <code>Answer</code></SectionComponent\n>\n<p>\n\tThe simplest concept in the model unit is <code>LastStep</code>. The runtime value of each of its instances should be <code>true</code>,\n\tbecause a last step does not have a next page and therefore does not put any restrictions on the correctness of the step. The evaluation\n\tfunction is implemented as follows:\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">// EducationInterpreter/src/custom/interpreter/EducationInterpreter.ts#L212-L214</span>\n\noverride <span class=\"token function\">evalLastStep</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> LastStep<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> RtBoolean<span class=\"token punctuation\">.</span><span class=\"token constant\">TRUE</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<p>\n\tNext, we are going to determine the runtime value for an <code>Answer</code>. Here, we need to compare the answer that is given with the\n\tone that is defined as being the correct answer to the question. The first is found by evaluating the <code>value</code> of the answer,\n\twhich is either a simple number or a fraction. For both the evaluation functions are already defined. The second is found by evaluating\n\tthe correct answer from the question, but because <code>question</code> is defined in the .ast file as a reference, we need to use\n\t<code>.referred</code>\n\tto obtain its value and check whether the reference was found.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">// EducationInterpreter/src/custom/interpreter/EducationInterpreter.ts#L202-L210</span>\n\noverride <span class=\"token function\">evalAnswer</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> Answer<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">&#96;</span><span class=\"token string\">evalAnswer.node </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>node<span class=\"token operator\">?.</span>$question<span class=\"token punctuation\">.</span>content<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">&#96;</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> actualAnswer <span class=\"token operator\">=</span> main<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>question<span class=\"token punctuation\">.</span>referred <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>question<span class=\"token punctuation\">.</span>referred <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> expectedAnswer <span class=\"token operator\">=</span> main<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>question<span class=\"token punctuation\">.</span>referred<span class=\"token punctuation\">.</span>correctAnswer<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> actualAnswer<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>expectedAnswer<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RtError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"evalAnswer: question not found\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<SectionComponent tag=\"h2\" id=\"evaluation-of-page-4\" bind:intersecting={visible[3]}>Evaluation of Page</SectionComponent>\n<p>\n\tThe next concept up in the AST is <code>Step</code>, but we havenâ€™t determined yet how to evaluate one of its parts:\n\t<code>reference fromPage: Page</code>. So, we first have to define the evaluation function for pages. However, the concept\n\t<code>Page</code> is an abstract concept.\n</p>\n<pre\n\tclass=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// Education/lesson9-defs/edu-topics.ast#L10-L14\n</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">concept</span> <span class=\"token class-name\">Page</span> &#123;\n    name: <span class=\"token builtin\">identifier</span>;\n    questions: <span class=\"token class-name\">Question</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>;\n    grading: <span class=\"token class-name\">GradeScore</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>; <span class=\"token comment\">/* concept from 'edu-scoring.ast' */</span>\n&#125;</code>`}</pre>\n<p>\n\tFor abstract concepts no evaluation functions are defined. But there are evaluation functions for the concrete children of <code\n\t\t>Page</code\n\t>: <code>Theory</code>, <code>Video</code>, <code>WorkSheet</code>, <code>ExamplePage</code>, and <code>InDepthMaterial</code>, so these\n\tare the ones that we will implement.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">// EducationInterpreter/src/custom/interpreter/EducationInterpreter.ts#L153-L182</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token function\">evalPage</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> Page<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// Find grade for given answers</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">&#96;</span><span class=\"token string\">Evaluating Page </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>node<span class=\"token operator\">?.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">&#96;</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> score <span class=\"token keyword\">of</span> node<span class=\"token punctuation\">.</span>grading<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> scoreValue <span class=\"token operator\">=</span> main<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">.</span>expr<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRtBoolean</span><span class=\"token punctuation\">(</span>scoreValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scoreValue<span class=\"token punctuation\">.</span><span class=\"token function\">asBoolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">&#96;</span><span class=\"token string\">Evaluating Page returning </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>score<span class=\"token punctuation\">.</span>$grade<span class=\"token operator\">?.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">&#96;</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RtGrade</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">.</span>$grade<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RtError</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">&#96;</span><span class=\"token string\">No grade found for current answers in page </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>node<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">&#96;</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\noverride <span class=\"token function\">evalTheory</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> Theory<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> EducationInterpreter<span class=\"token punctuation\">.</span><span class=\"token function\">evalPage</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\noverride <span class=\"token function\">evalVideo</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> Video<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> EducationInterpreter<span class=\"token punctuation\">.</span><span class=\"token function\">evalPage</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\noverride <span class=\"token function\">evalWorkSheet</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> WorkSheet<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> EducationInterpreter<span class=\"token punctuation\">.</span><span class=\"token function\">evalPage</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\noverride <span class=\"token function\">evalInDepthMaterial</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> InDepthMaterial<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> EducationInterpreter<span class=\"token punctuation\">.</span><span class=\"token function\">evalPage</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\noverride <span class=\"token function\">evalExamplePage</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> ExamplePage<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> EducationInterpreter<span class=\"token punctuation\">.</span><span class=\"token function\">evalPage</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<SectionComponent tag=\"h2\" id=\"evaluation-of-scoreexpressions-5\" bind:intersecting={visible[4]}\n\t>Evaluation of ScoreExpressions</SectionComponent\n>\n<p>\n\tWhen you look at the function <code>evalPage</code> you can see that we are missing yet another evaluation function, the one that\n\tcalculates the value of <code>score.expr</code>. Remember what it looks like in the model:\n</p>\n<pre class=\"language-txt\">{@html `<code class=\"language-txt\">GradeC: Answer to questionX is correct AND the Number of Correct Answers = 3\n\nGradeD: Answer to questionY is correct OR Answer to questionZ is correct AND the Number of Correct Answers > 2</code>`}</pre>\n<p>\n\tThe type of <code>score.expr</code> is <code>ScoreExpression</code>, but again this is an abstract concept. Its children are\n\t<code>QuestionReference</code>, <code>NrOfCorrectAnswers</code>, a bunch of binary expressions and <code>NumberLiteralExpression</code>,\n\tfor which we have already defined evaluation functions. So what is left is to implement evaluations for <code>QuestionReference</code> and\n\t<code>NrOfCorrectAnswers</code>.\n</p>\n<p>\n\tThe value of the latter needs to be calculated for the complete page, thus we will search for it in the context. Note, that we have to\n\tremember to put this value in the context somewhere higher up the chain.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">// EducationInterpreter/src/custom/interpreter/EducationInterpreter.ts#L198-L200</span>\n\noverride <span class=\"token function\">evalNrOfCorrectAnswers</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> NrOfCorrectAnswers<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NR_OF_CORRECT_ANSWERS\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<p>\n\tThe implementation of the evaluation of a <code>QuestionReference</code> is a bit more complicated. Remember what it looks like in the model:\n</p>\n<pre class=\"language-txt\">{@html `<code class=\"language-txt\">Answer to questionX is correct</code>`}</pre>\n<p>\n\tThe evaluation should result in a boolean value based on the comparison between the correct answer to the question, and the answer given\n\tby the pupil. The correct answer can be found in the model. We just need to evaluate <code>question.correctAnswer</code>. The answer given\n\tby the pupil is present in the test, and should be found in the context.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">// EducationInterpreter/src/custom/interpreter/EducationInterpreter.ts#L184-L196</span>\n\noverride <span class=\"token function\">evalQuestionReference</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> QuestionReference<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> question <span class=\"token operator\">=</span> node<span class=\"token operator\">?.</span>question<span class=\"token operator\">?.</span>referred\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>question <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> question <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RtError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"evalQuestionReference: Question is not found\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">const</span> expected <span class=\"token operator\">=</span> main<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>question<span class=\"token punctuation\">.</span>correctAnswer<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> givenAnswer <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>question<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>givenAnswer <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> givenAnswer <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RtError</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">&#96;</span><span class=\"token string\">evalQuestionReference: Question '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>question<span class=\"token punctuation\">.</span>content<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">' does not have a result value</span><span class=\"token template-punctuation string\">&#96;</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">&#96;</span><span class=\"token string\">evalQuestionReference for '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>question<span class=\"token punctuation\">.</span>content<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">', given answer is '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>givenAnswer<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">', expected '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>expected<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">'</span><span class=\"token template-punctuation string\">&#96;</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> givenAnswer<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<SectionComponent tag=\"h2\" id=\"more-about-evaluation-of-pages-6\" bind:intersecting={visible[5]}\n\t>More About Evaluation of Pages</SectionComponent\n>\n<p>\n\tNow we can return to the <code>evalPage</code> function. We know how to determine the runtime value of a single ScoreExpression, but how\n\tdo we determine the runtime value of the complete page? We have chosen to go over all grades and see for which the score expression\n\treturns true. The first one that we find will be the pageâ€™s grade. But wait, there is no runtime object that represents a grade. We could\n\treturn an M1 object (of type <code>Grade</code>), but we want to make a clear distinction between the M1 and M0 levels. So we make a new\n\truntime class: <code>RtGrade</code>.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">// EducationInterpreter/src/custom/interpreter/EducationInterpreter.ts#L153-L166</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token function\">evalPage</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> Page<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// Find grade for given answers</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">&#96;</span><span class=\"token string\">Evaluating Page </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>node<span class=\"token operator\">?.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">&#96;</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> score <span class=\"token keyword\">of</span> node<span class=\"token punctuation\">.</span>grading<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> scoreValue <span class=\"token operator\">=</span> main<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">.</span>expr<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRtBoolean</span><span class=\"token punctuation\">(</span>scoreValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scoreValue<span class=\"token punctuation\">.</span><span class=\"token function\">asBoolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">&#96;</span><span class=\"token string\">Evaluating Page returning </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>score<span class=\"token punctuation\">.</span>$grade<span class=\"token operator\">?.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">&#96;</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RtGrade</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">.</span>$grade<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RtError</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">&#96;</span><span class=\"token string\">No grade found for current answers in page </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>node<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">&#96;</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<Note>\n\t<svelte:fragment slot=\"header\">Meta Levels</svelte:fragment>\n\t<svelte:fragment slot=\"content\">\n\t\tIn Domain Specific language we distinguish the following levels:\n\t\t<ol>\n\t\t\t<li>\n\t\t\t\tThe language definition, defining which concepts are available. Often called the M2 level. In Freon this is represented by the\n\t\t\t\tlanguage definition in the .ast files. In Java this would be the Java Language Definition.\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\tThe model, which contains instances of the language concepts, called the M1 level. In Freon this is what you edit in a Freon\n\t\t\t\tapplication. In Java this would be a Java program consisting of Java classes.\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\tThe runtime level, values resulting from executing or interpreting the model, called the M0 level. In Freon this is the result of\n\t\t\t\tthe interpreter running, or it would be the result of executing code generated from the model (M1) level. For Java this is the\n\t\t\t\texecution of a Java program.\n\t\t\t</li>\n\t\t</ol>\n\t</svelte:fragment></Note\n>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">// EducationInterpreter/src/custom/interpreter/runtime/RtGrade.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> RtBoolean<span class=\"token punctuation\">,</span> RtObject <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@freon4dsl/core\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Grade <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../language/gen/index.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RtGrade</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RtObject</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">readonly</span> _type<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"RtGrade\"</span><span class=\"token punctuation\">;</span>\n    grade<span class=\"token operator\">:</span> Grade<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>grade<span class=\"token operator\">:</span> Grade<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grade <span class=\"token operator\">=</span> grade<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> RtObject<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtBoolean <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRtGrade</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> RtBoolean<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grade <span class=\"token operator\">===</span> other<span class=\"token punctuation\">.</span>grade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> RtBoolean<span class=\"token punctuation\">.</span><span class=\"token constant\">FALSE</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    override <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">&#96;</span><span class=\"token string\">Grade: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grade<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">&#96;</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isRtGrade</span><span class=\"token punctuation\">(</span>object<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> object <span class=\"token keyword\">is</span> RtGrade <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> _type <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?.</span>_type<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>_type <span class=\"token operator\">&amp;&amp;</span> _type <span class=\"token operator\">===</span> <span class=\"token string\">\"RtGrade\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code>`}</pre>\n\n<PrevNextSection {prevLink} {nextLink} />\n","<script lang=\"ts\">\n\timport { mySections } from './SectionStore.js';\n\timport type { Section } from '$lib/section/SectionType.js';\n\timport PageContent from './PageContent.svelte';\n\timport Breadcrumb from '$lib/breadcrumbs/Breadcrumb.svelte';\n\n\tlet showDetails: boolean = false;\n\t$: current = getCurrent($mySections);\n\n\tfunction getCurrent(internalSections: Section[]): number {\n\t\tlet previous = current;\n\t\tfor (let i = 0; i < internalSections.length; i++) {\n\t\t\tif (internalSections[i].visible) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn previous;\n\t}\n\tfunction toggleTocDetails() {\n\t\tshowDetails = !showDetails;\n\t}\n</script>\n\n<div class=\"page-main\">\n\t<div class=\"page-toc-small\">\n\t\t<p class=\"page-toc-small-title\">On this page ...</p>\n\t\t<button\n\t\t\tclass=\"page-toc-small-expand-button\"\n\t\t\ton:click={() => {\n\t\t\t\ttoggleTocDetails();\n\t\t\t}}\n\t\t>\n\t\t\t{#if showDetails}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/upload.png\" alt=\"arrow up\" />\n\t\t\t{:else}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/down-arrow.png\" alt=\"arrow down\" />\n\t\t\t{/if}\n\t\t</button>\n\t</div>\n\t{#if showDetails}\n\t\t<div class=\"toc-details\">\n\t\t\t<ul class=\"page-ul\">\n\t\t\t\t{#each $mySections as sec, index}\n\t\t\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t\t\t{sec.title}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t{/each}\n\t\t\t</ul>\n\t\t</div>\n\t{/if}\n\n\t<Breadcrumb />\n\t<PageContent />\n</div>\n\n<nav class=\"page-toc\">\n\t<h3 class=\"page-toc-title\">On this page</h3>\n\t<ul class=\"page-ul\">\n\t\t{#each $mySections as sec, index}\n\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t{sec.title}\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n</nav>\n"],"names":["mySections","writable","insert_hydration","target","code0","anchor","code1","ol","ctx","sectioncomponent0_props","sectioncomponent1_props","sectioncomponent2_props","sectioncomponent3_props","sectioncomponent4_props","sectioncomponent5_props","p0","p1","pre0","p2","pre1","p3","pre2","p4","pre3","p5","pre4","p6","pre5","p7","p8","pre6","p9","pre7","p10","pre8","p11","pre9","pre10","sectioncomponent0_changes","sectioncomponent1_changes","sectioncomponent2_changes","sectioncomponent3_changes","sectioncomponent4_changes","sectioncomponent5_changes","prevLink","nextLink","$mySections","visible","onMount","block","copyPrompt","copyPromptText","copyIcon","evt","copy","$$self","value","set_store_value","img","i","div","append_hydration","ul","t0_value","attr","a","a_href_value","toggle_class","li","dirty","set_data","t0","create_if_block_1","create_if_block","div1","div0","p","button","nav","h3","showDetails","getCurrent","internalSections","previous","current","toggleTocDetails","$$invalidate"],"mappings":"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"}