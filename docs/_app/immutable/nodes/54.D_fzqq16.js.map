{"version":3,"file":"54.D_fzqq16.js","sources":["../../../../../../src/routes/Documentation/Terminology/SectionStore.ts","../../../../../../src/routes/Documentation/Terminology/PageContent.svelte","../../../../../../src/routes/Documentation/Terminology/+page.svelte"],"sourcesContent":["import { writable, type Writable } from 'svelte/store';\nimport type { Section } from '$lib/section/SectionType';\n\nexport const mySections: Writable<Section[]> = writable<Section[]>([]);\n","<script lang=\"ts\">\n\timport SectionComponent from '$lib/section/SectionComponent.svelte';\n\timport { mySections } from './SectionStore.js';\n\t$mySections = [{ title: 'Freon Terminology', visible: false, ref: '#freon-terminology-1' }];\n\tlet visible: boolean[] = [];\n\t$: $mySections[0].visible = visible[0];\n\timport copy from 'copy-to-clipboard';\n\timport { onMount } from 'svelte';\n\n\t/**\n\t * This function will go through all the 'pre' elements\n\t * on the page and add a copy button to them.\n\t * Thanks to: https://slavbasharov.com/blog/adding-click-to-copy-code-markdown-blog\n\t */\n\tonMount(() => {\n\t\tconst codeBlocks = document.querySelectorAll('pre');\n\t\tcodeBlocks.forEach((block) => {\n\t\t\tconst copyPrompt = document.createElement('div');\n\t\t\tcopyPrompt.className = 'copy-prompt';\n\t\t\tconst copyPromptText = document.createElement('p');\n\t\t\tcopyPromptText.innerHTML = 'ðŸ‘† Click to copy';\n\t\t\tcopyPromptText.className = 'copy-prompt-p';\n\t\t\tconst copyIcon = document.createElement('img');\n\t\t\tcopyIcon.src = '/icons/copy-icon.svg';\n\t\t\tcopyIcon.className = 'copy-prompt-img';\n\t\t\tcopyPrompt.appendChild(copyIcon);\n\t\t\tcopyPrompt.appendChild(copyPromptText);\n\t\t\tblock.appendChild(copyPrompt);\n\t\t\tblock.querySelector('.copy-prompt > p').addEventListener('click', (evt) => {\n\t\t\t\tcopy(block.querySelector('code').textContent);\n\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'Copied!';\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'ðŸ‘† Click to copy';\n\t\t\t\t}, 1000);\n\t\t\t});\n\t\t});\n\t});\n\timport PrevNextSection from '$lib/prevNext/PrevNextSection.svelte';\n\n\tlet prevLink = '/Documentation/Under_the_Hood/FreTool_Interfaces';\n\tlet nextLink = '/Tutorial';\n</script>\n\n<PrevNextSection {prevLink} {nextLink} />\n<SectionComponent tag=\"h1\" id=\"freon-terminology-1\" bind:intersecting={visible[0]}>Freon Terminology</SectionComponent>\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Phrase</th>\n\t\t\t<th>Description</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>abstract syntax tree</td>\n\t\t\t<td>An internal representation the model, a tree of nodes, each of which is an instance of a structural element of the language.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>action</td>\n\t\t\t<td>Certain behaviour of the editor, for instance, the reaction to a key stroke.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>AST</td>\n\t\t\t<td>Abstract Syntax Tree</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>ast file</td>\n\t\t\t<td>File containing the definition of the metamodel of the language. The extension must be â€˜.astâ€™.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>box</td>\n\t\t\t<td>A TypeScript class that represents a rectangle on the editor screen.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>box tree / box model</td>\n\t\t\t<td>A tree of boxes that represent the appearance of a model in the editor</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>concept</td>\n\t\t\t<td>A structural element in the language.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>concrete syntax tree</td>\n\t\t\t<td>A tree of elements that represent the appearance of a model. In Freon, it is equal to the box model.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>conformsto</td>\n\t\t\t<td\n\t\t\t\t>A predefined function in the typer, which defines that a certain type conforms to another type. The function can also be used in\n\t\t\t\tthe validator.</td\n\t\t\t>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>CST</td>\n\t\t\t<td>Concrete Syntax Tree</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>custom scoper</td>\n\t\t\t<td>A scoper that is written in TypeScript and either augments or replaces the Freon scoper.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>custom typer</td>\n\t\t\t<td>A typer that is written in TypeScript and either augments or replaces the Freon typer.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>edit file</td>\n\t\t\t<td>File containing the definition of the editors, or projection sets of the language. The extension must be â€˜.editâ€™.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>editor</td>\n\t\t\t<td>A loosely used term to refer to the runtime tool in the browser, or to a certain projection set.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>enumeration</td>\n\t\t\t<td>See limited concept.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>equalsto</td>\n\t\t\t<td\n\t\t\t\t>A predefined function in the typer, which defines that a certain type is considered to be equal to another type. The function can\n\t\t\t\talso be used in the validator.</td\n\t\t\t>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>expression concept</td>\n\t\t\t<td>A structural element in the language that can be used as an expression.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>external component</td>\n\t\t\t<td>A Svelte component that is added by the language engineer to the Freon projection(s).</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>fragment</td>\n\t\t\t<td>A part of a projection definition.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>inference rule</td>\n\t\t\t<td>A built-in function in the typer definition that defines the type of a term.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>interpreter</td>\n\t\t\t<td\n\t\t\t\t>A tool that takes the AST (the represeantation of the model) and calculates a value to be associated with certain terms in the\n\t\t\t\tmodel.</td\n\t\t\t>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>is-unique rule</td>\n\t\t\t<td\n\t\t\t\t>A built-in function in the validator definition that defines a check on whether all elements in a list are unique. (Making the list\n\t\t\t\ta strict set.)</td\n\t\t\t>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>language engineer</td>\n\t\t\t<td>The person using Freon to create a DSL and the tools to use the DSL.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>limited concept</td>\n\t\t\t<td\n\t\t\t\t>A structural element in the language, that can only have a limited number of predefined instances. A more extensive version of an\n\t\t\t\tenumeration.</td\n\t\t\t>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>metamodel</td>\n\t\t\t<td>The definition of the structure of the language, i.e. which kind of elements are part of the language and how they relate.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>model</td>\n\t\t\t<td>An instance of the language metamodel, like an object is an instance of a class. The model is what the user is interested in.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>model unit</td>\n\t\t\t<td>Part of a model that can be edited, or otherwise handled, separately from the rest of the model.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>named editor</td>\n\t\t\t<td>A projection set.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>named property projection</td>\n\t\t\t<td>A single projection in a (named) projection set.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>namespace</td>\n\t\t\t<td>A structural element that is the container for a set of names of parts of the model.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>namespace addition</td>\n\t\t\t<td>A built-in function in the scoper definition that adds the set of names from one namespace to another namespace.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>not-empty rule</td>\n\t\t\t<td>A built-in function in the validator definition that defines a check on whether a list is empty.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>precedence of projections</td>\n\t\t\t<td>In a set of projections for the same concept, the priority of one projection sover the other.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>projection</td>\n\t\t\t<td>A definition of how a single structural element in the language should appear on the screen or in text.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>projection set</td>\n\t\t\t<td>A named set of projection definitions, one per structural element in the language.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>scope provider</td>\n\t\t\t<td>A piece of code that is able to determine for each term in the model which names of other elements of the model are visible.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>scoper</td>\n\t\t\t<td>The Freon name for scope provider.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>scoper file</td>\n\t\t\t<td>File containing the definition of the scope provider for the language. The extension must be â€˜.scopeâ€™.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>symbol</td>\n\t\t\t<td>The concrete syntax to be used for the operator in a binary expression. For instance the â€™+â€™ in â€˜4+5â€™.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>term</td>\n\t\t\t<td>Part of a model that can be associated with a type (using a typer), or with a value (using an interpreter).</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>trigger</td>\n\t\t\t<td>The key stroke, or series of key strokes, that the user must enter to let the editor perform a certain function.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>type checking rule</td>\n\t\t\t<td>A built-in function in the validator definition that defines a check on whether a term has a certain type.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>type concept</td>\n\t\t\t<td>A concept that is not part of the AST, but is needed to provide the type of a term.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>type provider</td>\n\t\t\t<td>A piece of code that is able to determine for each term in the model which type to associate with that term.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>typer</td>\n\t\t\t<td>The Freon name for type provider.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>typer file</td>\n\t\t\t<td>File containing the definition of the type provider for the language. The extension must be â€˜.typeâ€™.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>user</td>\n\t\t\t<td>The person using the tools, i.e. editor, scoper, etc, to create models in a certain DSL.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>valid file</td>\n\t\t\t<td>File containing the definition of the validator for the language. The extension must be â€˜.validâ€™.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>validator</td>\n\t\t\t<td>A piece of code that is able to determine for each term in the model whether the term is correct or erroneous.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>valid-identifier-rule</td>\n\t\t\t<td>A built-in function in the validator definition that defines a check on whether a string is a valid identifier.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>where-clause</td>\n\t\t\t<td\n\t\t\t\t>A part of a typer definition that defines conditions for all properties of a concept. It is used in â€˜equalstoâ€™ and â€˜conformstoâ€™\n\t\t\t\tdefinitions.</td\n\t\t\t>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<PrevNextSection {prevLink} {nextLink} />\n","<script lang=\"ts\">\n\timport { mySections } from './SectionStore.js';\n\timport type { Section } from '$lib/section/SectionType.js';\n\timport PageContent from './PageContent.svelte';\n\timport Breadcrumb from '$lib/breadcrumbs/Breadcrumb.svelte';\n\n\tlet showDetails: boolean = false;\n\t$: current = getCurrent($mySections);\n\n\tfunction getCurrent(internalSections: Section[]): number {\n\t\tlet previous = current;\n\t\tfor (let i = 0; i < internalSections.length; i++) {\n\t\t\tif (internalSections[i].visible) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn previous;\n\t}\n\tfunction toggleTocDetails() {\n\t\tshowDetails = !showDetails;\n\t}\n</script>\n\n<div class=\"page-main\">\n\t<div class=\"page-toc-small\">\n\t\t<p class=\"page-toc-small-title\">On this page ...</p>\n\t\t<button\n\t\t\tclass=\"page-toc-small-expand-button\"\n\t\t\ton:click={() => {\n\t\t\t\ttoggleTocDetails();\n\t\t\t}}\n\t\t>\n\t\t\t{#if showDetails}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/upload.png\" alt=\"arrow up\" />\n\t\t\t{:else}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/down-arrow.png\" alt=\"arrow down\" />\n\t\t\t{/if}\n\t\t</button>\n\t</div>\n\t{#if showDetails}\n\t\t<div class=\"toc-details\">\n\t\t\t<ul class=\"page-ul\">\n\t\t\t\t{#each $mySections as sec, index}\n\t\t\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t\t\t{sec.title}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t{/each}\n\t\t\t</ul>\n\t\t</div>\n\t{/if}\n\n\t<Breadcrumb />\n\t<PageContent />\n</div>\n\n<nav class=\"page-toc\">\n\t<h3 class=\"page-toc-title\">On this page</h3>\n\t<ul class=\"page-ul\">\n\t\t{#each $mySections as sec, index}\n\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t{sec.title}\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n</nav>\n"],"names":["mySections","writable","ctx","sectioncomponent_props","insert_hydration","target","table","anchor","sectioncomponent_changes","prevLink","nextLink","$mySections","visible","onMount","block","copyPrompt","copyPromptText","copyIcon","evt","copy","$$self","value","set_store_value","img","i","div","append_hydration","ul","t0_value","attr","a","a_href_value","toggle_class","li","dirty","set_data","t0","create_if_block_1","create_if_block","div1","div0","p","button","nav","h3","showDetails","getCurrent","internalSections","previous","current","toggleTocDetails","$$invalidate"],"mappings":"ueAGa,MAAAA,EAAkCC,GAAoB,EAAE,sCCyCc,mBAAiB,cAAjB,mBAAiB;;;;;;6LAA7B,OAAAC,KAAQ,CAAC,IAAA,SAATC,EAAA,aAAAD,KAAQ,CAAC,yZAChFE,EAuOOC,EAAAC,EAAAC,CAAA,8FAxOgEC,EAAA,aAAAN,KAAQ,CAAC,iOAL3EO,GAAW,mDACXC,GAAW,8DArCfC,EAAA,EAAiB,MAAO,oBAAqB,QAAS,GAAO,IAAK,4BAC9D,IAAAC,EAAA,CAAA,EAUJC,GAAA,IAAA,CACoB,SAAS,iBAAiB,KAAK,EACvC,QAASC,GAAA,OACbC,EAAa,SAAS,cAAc,KAAK,EAC/CA,EAAW,UAAY,oBACjBC,EAAiB,SAAS,cAAc,GAAG,EACjDA,EAAe,UAAY,mBAC3BA,EAAe,UAAY,sBACrBC,EAAW,SAAS,cAAc,KAAK,EAC7CA,EAAS,IAAM,uBACfA,EAAS,UAAY,kBACrBF,EAAW,YAAYE,CAAQ,EAC/BF,EAAW,YAAYC,CAAc,EACrCF,EAAM,YAAYC,CAAU,EAC5BD,EAAM,cAAc,kBAAkB,EAAE,iBAAiB,QAAUI,GAAA,CAClEC,GAAKL,EAAM,cAAc,MAAM,EAAE,WAAW,EAC5CA,EAAM,cAAc,kBAAkB,EAAE,UAAY,UACpD,gBACCA,EAAM,cAAc,kBAAkB,EAAE,UAAY,oBAClD,yBAWgEM,EAAA,GAAA,UAAAR,EAAQ,CAAC,EAAAS,CAAA,IAATT,EAAQ,CAAC,EAAAS,gDAvC/EC,GAAAtB,EAAGW,EAAY,CAAC,EAAE,QAAUC,EAAQ,CAAC,EAAAD,CAAA,8aC8BlCP,EAA8EC,EAAAkB,EAAAhB,CAAA,gPAF9EH,EAAwEC,EAAAkB,EAAAhB,CAAA,6CASjEL,EAAW,CAAA,CAAA,uBAAhB,OAAIsB,GAAA,sTAFRpB,EAUKC,EAAAoB,EAAAlB,CAAA,EATJmB,EAQID,EAAAE,CAAA,uEAPIzB,EAAW,CAAA,CAAA,oBAAhB,OAAIsB,GAAA,EAAA,mHAAJ,uDAGEI,EAAA1B,KAAI,MAAK,6LAD+E2B,EAAAC,EAAA,OAAAC,EAAA7B,KAAI,GAAG,EAA1E8B,EAAAF,EAAA,eAAA5B,OAAUA,EAAO,CAAA,CAAA,EAAyB8B,EAAAF,EAAA,kBAAA5B,OAAUA,EAAO,CAAA,CAAA,uCADnFE,EAIIC,EAAA4B,EAAA1B,CAAA,EAHHmB,EAEGO,EAAAH,CAAA,wBADDI,EAAA,GAAAN,KAAAA,EAAA1B,KAAI,MAAK,KAAAiC,GAAAC,EAAAR,CAAA,EAD+EM,EAAA,GAAAH,KAAAA,EAAA7B,KAAI,yBAAvE8B,EAAAF,EAAA,eAAA5B,OAAUA,EAAO,CAAA,CAAA,OAAyB8B,EAAAF,EAAA,kBAAA5B,OAAUA,EAAO,CAAA,CAAA,yCAmBlF0B,EAAA1B,KAAI,MAAK,6LAD+E2B,EAAAC,EAAA,OAAAC,EAAA7B,KAAI,GAAG,EAA1E8B,EAAAF,EAAA,eAAA5B,OAAUA,EAAO,CAAA,CAAA,EAAyB8B,EAAAF,EAAA,kBAAA5B,OAAUA,EAAO,CAAA,CAAA,uCADnFE,EAIIC,EAAA4B,EAAA1B,CAAA,EAHHmB,EAEGO,EAAAH,CAAA,wBADDI,EAAA,GAAAN,KAAAA,EAAA1B,KAAI,MAAK,KAAAiC,GAAAC,EAAAR,CAAA,EAD+EM,EAAA,GAAAH,KAAAA,EAAA7B,KAAI,yBAAvE8B,EAAAF,EAAA,eAAA5B,OAAUA,EAAO,CAAA,CAAA,OAAyB8B,EAAAF,EAAA,kBAAA5B,OAAUA,EAAO,CAAA,CAAA,sIA9B9EA,EAAW,CAAA,EAAAmC,0BAObnC,EAAW,CAAA,GAAAoC,GAAApC,CAAA,oCAqBRA,EAAW,CAAA,CAAA,uBAAhB,OAAIsB,GAAA,oiCArCRpB,EAgCKC,EAAAkC,EAAAhC,CAAA,EA/BJmB,EAcKa,EAAAC,CAAA,EAbJd,EAAmDc,EAAAC,CAAA,SACnDf,EAWQc,EAAAE,CAAA,mFAoBVtC,EAWKC,EAAAsC,EAAApC,CAAA,EAVJmB,EAA2CiB,EAAAC,CAAA,SAC3ClB,EAQIiB,EAAAhB,CAAA,yJA5BCzB,EAAW,CAAA,kEAqBRA,EAAW,CAAA,CAAA,oBAAhB,OAAIsB,GAAA,EAAA,mHAAJ,wOAtDCqB,EAAuB,YAGlBC,EAAWC,EAAA,KACfC,EAAWC,UACNzB,EAAI,EAAGA,EAAIuB,EAAiB,OAAQvB,IACxC,GAAAuB,EAAiBvB,CAAC,EAAE,QAChB,OAAAA,EAGF,OAAAwB,EAEC,SAAAE,GAAA,KACRL,EAAe,CAAAA,CAAA,eAUbK,EAAgB,yCAtBhBC,EAAA,EAAAF,EAAUH,EAAWnC,CAAW,CAAA"}