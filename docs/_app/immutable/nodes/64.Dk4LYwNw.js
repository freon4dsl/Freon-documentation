import{s as Ds,A as Mn,a as m,e as k,H as O,f as g,b as f,m as R,d as E,F as N,g as t,h as w,i as l,B as An,v as Vs,x as xn,w as ka,t as Q,o as W,n as Qs,j as P,C as fa,D as Ws,E as on,q as Us,p as Js}from"../chunks/scheduler.CIEH-92L.js";import{S as Xs,i as zs,e as qn,c as j,a as B,m as F,t as G,b as D,d as V}from"../chunks/index.HLF2pGCU.js";import{e as ds}from"../chunks/each.BLebZWAa.js";import{w as da}from"../chunks/index.bxqR-5-s.js";import{P as qs,S as Hn,c as ma,B as ga}from"../chunks/index.CLjbMqgA.js";import{N as ha}from"../chunks/Note.DEjaTDAW.js";const sn=da([]);function va(p){let a;return{c(){a=Q("More Basic Evaluation Functions")},l(s){a=W(s,"More Basic Evaluation Functions")},m(s,e){l(s,a,e)},d(s){s&&t(a)}}}function wa(p){let a;return{c(){a=Q("The AST of the Test Model Unit")},l(s){a=W(s,"The AST of the Test Model Unit")},m(s,e){l(s,a,e)},d(s){s&&t(a)}}}function _a(p){let a,s,e="LastStep",c,u,d="Answer";return{c(){a=Q("Evaluations of "),s=k("code"),s.textContent=e,c=Q(" and "),u=k("code"),u.textContent=d},l(i){a=W(i,"Evaluations of "),s=f(i,"CODE",{"data-svelte-h":!0}),R(s)!=="svelte-xjacni"&&(s.textContent=e),c=W(i," and "),u=f(i,"CODE",{"data-svelte-h":!0}),R(u)!=="svelte-ans46i"&&(u.textContent=d)},m(i,r){l(i,a,r),l(i,s,r),l(i,c,r),l(i,u,r)},p:Qs,d(i){i&&(t(a),t(s),t(c),t(u))}}}function $a(p){let a;return{c(){a=Q("Evaluation of Page")},l(s){a=W(s,"Evaluation of Page")},m(s,e){l(s,a,e)},d(s){s&&t(a)}}}function ba(p){let a;return{c(){a=Q("Evaluation of ScoreExpressions")},l(s){a=W(s,"Evaluation of ScoreExpressions")},m(s,e){l(s,a,e)},d(s){s&&t(a)}}}function ya(p){let a;return{c(){a=Q("More About Evaluation of Pages")},l(s){a=W(s,"More About Evaluation of Pages")},m(s,e){l(s,a,e)},d(s){s&&t(a)}}}function Ea(p){let a;return{c(){a=Q("Meta Levels")},l(s){a=W(s,"Meta Levels")},m(s,e){l(s,a,e)},d(s){s&&t(a)}}}function xa(p){let a,s,e=`<li>The language definition, defining which concepts are available. Often called the M2 level. In Freon this is represented by the
				language definition in the .ast files. In Java this would be the Java Language Definition.</li> <li>The model, which contains instances of the language concepts, called the M1 level. In Freon this is what you edit in a Freon
				application. In Java this would be a Java program consisting of Java classes.</li> <li>The runtime level, values resulting from executing or interpreting the model, called the M0 level. In Freon this is the result of
				the interpreter running, or it would be the result of executing code generated from the model (M1) level. For Java this is the
				execution of a Java program.</li>`;return{c(){a=Q(`In Domain Specific language we distinguish the following levels:
		`),s=k("ol"),s.innerHTML=e},l(c){a=W(c,`In Domain Specific language we distinguish the following levels:
		`),s=f(c,"OL",{"data-svelte-h":!0}),R(s)!=="svelte-1nwh40i"&&(s.innerHTML=e)},m(c,u){l(c,a,u),l(c,s,u)},p:Qs,d(c){c&&(t(a),t(s))}}}function Ta(p){let a,s,e,c,u,d,i="With the simplest evaluation functions done, we can turn to the actual test that needs to be done.",r,_,H,h,T,C="Letâ€™s refresh your memory and have a look at the AST of the <code>Test</code> model unit.",L,I,J,X=`<code class="language-freon"><span class="token comment">// Education/lesson9-defs/edu-tests.ast
</span>
language Education

<span class="token keyword">modelunit</span> <span class="token class-name">Test</span> &#123;
    name: <span class="token builtin">identifier</span>;
    scenarios: <span class="token class-name">Scenario</span><span class="token punctuation">[</span><span class="token punctuation">]</span>;
    <span class="token keyword">reference</span> main: <span class="token class-name">SiteGroup</span>;
    <span class="token keyword">reference</span> flow: <span class="token class-name">Flow</span>;
&#125;

<span class="token keyword">concept</span> <span class="token class-name">Scenario</span> &#123;
    description: <span class="token builtin">string</span>;
    testFlow: <span class="token class-name">TestFlow</span><span class="token punctuation">[</span><span class="token punctuation">]</span>;
    steps: <span class="token class-name">Step</span><span class="token punctuation">[</span><span class="token punctuation">]</span>; <span class="token comment">/* Note that the order is of importance */</span>
&#125;

<span class="token keyword">concept</span> <span class="token class-name">TestFlow</span> &#123;
    steps: <span class="token class-name">Step</span><span class="token punctuation">[</span><span class="token punctuation">]</span>; <span class="token comment">/* Note that the order is of importance */</span>
&#125;

<span class="token keyword">concept</span> <span class="token class-name">Step</span> &#123;
    <span class="token keyword">reference</span> fromPage: <span class="token class-name">Page</span>;
    answerSeries: <span class="token class-name">Answer</span><span class="token punctuation">[</span><span class="token punctuation">]</span>;
&#125;

<span class="token keyword">concept</span> <span class="token class-name">LastStep</span> <span class="token keyword">base</span> <span class="token class-name">Step</span> &#123;
&#125;

<span class="token keyword">concept</span> <span class="token class-name">Answer</span> &#123;
    <span class="token keyword">reference</span> question: <span class="token class-name">Question</span>;
    value: <span class="token class-name">NumberConcept</span>;
&#125;
</code>`,z,M,Tn,pn,A,q=`The simplest concept in the model unit is <code>LastStep</code>. The runtime value of each of its instances should be <code>true</code>,
	because a last step does not have a next page and therefore does not put any restrictions on the correctness of the step. The evaluation
	function is implemented as follows:`,x,S,b,v=`<code class="language-ts"><span class="token comment">// EducationInterpreter/src/custom/interpreter/EducationInterpreter.ts#L212-L214</span>

override <span class="token function">evalLastStep</span><span class="token punctuation">(</span>node<span class="token operator">:</span> LastStep<span class="token punctuation">,</span> ctx<span class="token operator">:</span> InterpreterContext<span class="token punctuation">)</span><span class="token operator">:</span> RtObject <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> RtBoolean<span class="token punctuation">.</span><span class="token constant">TRUE</span>
<span class="token punctuation">&#125;</span></code>`,y,$,an=`Next, we are going to determine the runtime value for an <code>Answer</code>. Here, we need to compare the answer that is given with the
	one that is defined as being the correct answer to the question. The first is found by evaluating the <code>value</code> of the answer,
	which is either a simple number or a fraction. For both the evaluation functions are already defined. The second is found by evaluating
	the correct answer from the question, but because <code>question</code> is defined in the .ast file as a reference, we need to use
	<code>.referred</code>
	to obtain its value and check whether the reference was found.`,Y,U,tn,Ys=`<code class="language-ts"><span class="token comment">// EducationInterpreter/src/custom/interpreter/EducationInterpreter.ts#L202-L210</span>

override <span class="token function">evalAnswer</span><span class="token punctuation">(</span>node<span class="token operator">:</span> Answer<span class="token punctuation">,</span> ctx<span class="token operator">:</span> InterpreterContext<span class="token punctuation">)</span><span class="token operator">:</span> RtObject <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">evalAnswer.node </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token operator">?.</span>$question<span class="token punctuation">.</span>content<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> actualAnswer <span class="token operator">=</span> main<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>question<span class="token punctuation">.</span>referred <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>question<span class="token punctuation">.</span>referred <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> expectedAnswer <span class="token operator">=</span> main<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>question<span class="token punctuation">.</span>referred<span class="token punctuation">.</span>correctAnswer<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span>
        <span class="token keyword">return</span> actualAnswer<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>expectedAnswer<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RtError</span><span class="token punctuation">(</span><span class="token string">"evalAnswer: question not found"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Nn,Z,ms,jn,cn,vs=`The next concept up in the AST is <code>Step</code>, but we havenâ€™t determined yet how to evaluate one of its parts:
	<code>reference fromPage: Page</code>. So, we first have to define the evaluation function for pages. However, the concept
	<code>Page</code> is an abstract concept.`,Bn,ln,Fn,Zs=`<code class="language-freon"><span class="token comment">// Education/lesson9-defs/edu-topics.ast#L10-L14
</span>
<span class="token keyword">abstract</span> <span class="token keyword">concept</span> <span class="token class-name">Page</span> &#123;
    name: <span class="token builtin">identifier</span>;
    questions: <span class="token class-name">Question</span><span class="token punctuation">[</span><span class="token punctuation">]</span>;
    grading: <span class="token class-name">GradeScore</span><span class="token punctuation">[</span><span class="token punctuation">]</span>; <span class="token comment">/* concept from 'edu-scoring.ast' */</span>
&#125;</code>`,Gn,un,ws=`For abstract concepts no evaluation functions are defined. But there are evaluation functions for the concrete children of <code>Page</code>: <code>Theory</code>, <code>Video</code>, <code>WorkSheet</code>, <code>ExamplePage</code>, and <code>InDepthMaterial</code>, so these
	are the ones that we will implement.`,Dn,rn,Vn,Ks=`<code class="language-ts"><span class="token comment">// EducationInterpreter/src/custom/interpreter/EducationInterpreter.ts#L153-L182</span>

<span class="token keyword">static</span> <span class="token function">evalPage</span><span class="token punctuation">(</span>node<span class="token operator">:</span> Page<span class="token punctuation">,</span> ctx<span class="token operator">:</span> InterpreterContext<span class="token punctuation">)</span><span class="token operator">:</span> RtObject <span class="token punctuation">&#123;</span>
    <span class="token comment">// Find grade for given answers</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Evaluating Page </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token operator">?.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> score <span class="token keyword">of</span> node<span class="token punctuation">.</span>grading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> scoreValue <span class="token operator">=</span> main<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>score<span class="token punctuation">.</span>expr<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRtBoolean</span><span class="token punctuation">(</span>scoreValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>scoreValue<span class="token punctuation">.</span><span class="token function">asBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Evaluating Page returning </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>score<span class="token punctuation">.</span>$grade<span class="token operator">?.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RtGrade</span><span class="token punctuation">(</span>score<span class="token punctuation">.</span>$grade<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RtError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">No grade found for current answers in page </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

override <span class="token function">evalTheory</span><span class="token punctuation">(</span>node<span class="token operator">:</span> Theory<span class="token punctuation">,</span> ctx<span class="token operator">:</span> InterpreterContext<span class="token punctuation">)</span><span class="token operator">:</span> RtObject <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> EducationInterpreter<span class="token punctuation">.</span><span class="token function">evalPage</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
override <span class="token function">evalVideo</span><span class="token punctuation">(</span>node<span class="token operator">:</span> Video<span class="token punctuation">,</span> ctx<span class="token operator">:</span> InterpreterContext<span class="token punctuation">)</span><span class="token operator">:</span> RtObject <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> EducationInterpreter<span class="token punctuation">.</span><span class="token function">evalPage</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
override <span class="token function">evalWorkSheet</span><span class="token punctuation">(</span>node<span class="token operator">:</span> WorkSheet<span class="token punctuation">,</span> ctx<span class="token operator">:</span> InterpreterContext<span class="token punctuation">)</span><span class="token operator">:</span> RtObject <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> EducationInterpreter<span class="token punctuation">.</span><span class="token function">evalPage</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
override <span class="token function">evalInDepthMaterial</span><span class="token punctuation">(</span>node<span class="token operator">:</span> InDepthMaterial<span class="token punctuation">,</span> ctx<span class="token operator">:</span> InterpreterContext<span class="token punctuation">)</span><span class="token operator">:</span> RtObject <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> EducationInterpreter<span class="token punctuation">.</span><span class="token function">evalPage</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
override <span class="token function">evalExamplePage</span><span class="token punctuation">(</span>node<span class="token operator">:</span> ExamplePage<span class="token punctuation">,</span> ctx<span class="token operator">:</span> InterpreterContext<span class="token punctuation">)</span><span class="token operator">:</span> RtObject <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> EducationInterpreter<span class="token punctuation">.</span><span class="token function">evalPage</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Qn,K,gs,Wn,kn,_s=`When you look at the function <code>evalPage</code> you can see that we are missing yet another evaluation function, the one that
	calculates the value of <code>score.expr</code>. Remember what it looks like in the model:`,Un,fn,Jn,na=`<code class="language-txt">GradeC: Answer to questionX is correct AND the Number of Correct Answers = 3

GradeD: Answer to questionY is correct OR Answer to questionZ is correct AND the Number of Correct Answers > 2</code>`,Xn,dn,$s=`The type of <code>score.expr</code> is <code>ScoreExpression</code>, but again this is an abstract concept. Its children are
	<code>QuestionReference</code>, <code>NrOfCorrectAnswers</code>, a bunch of binary expressions and <code>NumberLiteralExpression</code>,
	for which we have already defined evaluation functions. So what is left is to implement evaluations for <code>QuestionReference</code> and
	<code>NrOfCorrectAnswers</code>.`,zn,mn,bs=`The value of the latter needs to be calculated for the complete page, thus we will search for it in the context. Note, that we have to
	remember to put this value in the context somewhere higher up the chain.`,Yn,gn,Zn,sa=`<code class="language-ts"><span class="token comment">// EducationInterpreter/src/custom/interpreter/EducationInterpreter.ts#L198-L200</span>

override <span class="token function">evalNrOfCorrectAnswers</span><span class="token punctuation">(</span>node<span class="token operator">:</span> NrOfCorrectAnswers<span class="token punctuation">,</span> ctx<span class="token operator">:</span> InterpreterContext<span class="token punctuation">)</span><span class="token operator">:</span> RtObject <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"NR_OF_CORRECT_ANSWERS"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Kn,hn,ys="The implementation of the evaluation of a <code>QuestionReference</code> is a bit more complicated. Remember what it looks like in the model:",ns,vn,ss,aa='<code class="language-txt">Answer to questionX is correct</code>',as,wn,Es=`The evaluation should result in a boolean value based on the comparison between the correct answer to the question, and the answer given
	by the pupil. The correct answer can be found in the model. We just need to evaluate <code>question.correctAnswer</code>. The answer given
	by the pupil is present in the test, and should be found in the context.`,ts,_n,es,ta=`<code class="language-ts"><span class="token comment">// EducationInterpreter/src/custom/interpreter/EducationInterpreter.ts#L184-L196</span>

override <span class="token function">evalQuestionReference</span><span class="token punctuation">(</span>node<span class="token operator">:</span> QuestionReference<span class="token punctuation">,</span> ctx<span class="token operator">:</span> InterpreterContext<span class="token punctuation">)</span><span class="token operator">:</span> RtObject <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> question <span class="token operator">=</span> node<span class="token operator">?.</span>question<span class="token operator">?.</span>referred
    <span class="token keyword">if</span> <span class="token punctuation">(</span>question <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> question <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RtError</span><span class="token punctuation">(</span><span class="token string">"evalQuestionReference: Question is not found"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">const</span> expected <span class="token operator">=</span> main<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>question<span class="token punctuation">.</span>correctAnswer<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span>
    <span class="token keyword">const</span> givenAnswer <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>question<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>givenAnswer <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> givenAnswer <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RtError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">evalQuestionReference: Question '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>question<span class="token punctuation">.</span>content<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">' does not have a result value</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">evalQuestionReference for '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>question<span class="token punctuation">.</span>content<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">', given answer is '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>givenAnswer<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">', expected '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>expected<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> givenAnswer<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,os,nn,hs,ps,$n,xs=`Now we can return to the <code>evalPage</code> function. We know how to determine the runtime value of a single ScoreExpression, but how
	do we determine the runtime value of the complete page? We have chosen to go over all grades and see for which the score expression
	returns true. The first one that we find will be the pageâ€™s grade. But wait, there is no runtime object that represents a grade. We could
	return an M1 object (of type <code>Grade</code>), but we want to make a clear distinction between the M1 and M0 levels. So we make a new
	runtime class: <code>RtGrade</code>.`,cs,bn,ls,ea=`<code class="language-ts"><span class="token comment">// EducationInterpreter/src/custom/interpreter/EducationInterpreter.ts#L153-L166</span>

<span class="token keyword">static</span> <span class="token function">evalPage</span><span class="token punctuation">(</span>node<span class="token operator">:</span> Page<span class="token punctuation">,</span> ctx<span class="token operator">:</span> InterpreterContext<span class="token punctuation">)</span><span class="token operator">:</span> RtObject <span class="token punctuation">&#123;</span>
    <span class="token comment">// Find grade for given answers</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Evaluating Page </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token operator">?.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> score <span class="token keyword">of</span> node<span class="token punctuation">.</span>grading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> scoreValue <span class="token operator">=</span> main<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>score<span class="token punctuation">.</span>expr<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRtBoolean</span><span class="token punctuation">(</span>scoreValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>scoreValue<span class="token punctuation">.</span><span class="token function">asBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Evaluating Page returning </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>score<span class="token punctuation">.</span>$grade<span class="token operator">?.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RtGrade</span><span class="token punctuation">(</span>score<span class="token punctuation">.</span>$grade<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RtError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">No grade found for current answers in page </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,is,en,us,yn,rs,oa=`<code class="language-ts"><span class="token comment">// EducationInterpreter/src/custom/interpreter/runtime/RtGrade.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RtBoolean<span class="token punctuation">,</span> RtObject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@freon4dsl/core"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Grade <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../language/gen/index.js"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RtGrade</span> <span class="token keyword">extends</span> <span class="token class-name">RtObject</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">readonly</span> _type<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"RtGrade"</span><span class="token punctuation">;</span>
    grade<span class="token operator">:</span> Grade<span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span>grade<span class="token operator">:</span> Grade<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token operator">:</span> RtObject<span class="token punctuation">)</span><span class="token operator">:</span> RtBoolean <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRtGrade</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> RtBoolean<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">===</span> other<span class="token punctuation">.</span>grade<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> RtBoolean<span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    override <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Grade: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isRtGrade</span><span class="token punctuation">(</span>object<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> object <span class="token keyword">is</span> RtGrade <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> _type <span class="token operator">=</span> <span class="token punctuation">(</span>object <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">?.</span>_type<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>_type <span class="token operator">&amp;&amp;</span> _type <span class="token operator">===</span> <span class="token string">"RtGrade"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</code>`,ks,En,fs;a=new qs({props:{prevLink:Hs,nextLink:Os}});function pa(n){p[1](n)}let Ts={tag:"h1",id:"more-basic-evaluation-functions-1",$$slots:{default:[va]},$$scope:{ctx:p}};p[0][0]!==void 0&&(Ts.intersecting=p[0][0]),e=new Hn({props:Ts}),Mn.push(()=>qn(e,"intersecting",pa));function ca(n){p[2](n)}let Cs={tag:"h2",id:"the-ast-of-the-test-model-unit-2",$$slots:{default:[wa]},$$scope:{ctx:p}};p[0][1]!==void 0&&(Cs.intersecting=p[0][1]),_=new Hn({props:Cs}),Mn.push(()=>qn(_,"intersecting",ca));function la(n){p[3](n)}let Rs={tag:"h2",id:"evaluations-of-laststep-and-answer-3",$$slots:{default:[_a]},$$scope:{ctx:p}};p[0][2]!==void 0&&(Rs.intersecting=p[0][2]),M=new Hn({props:Rs}),Mn.push(()=>qn(M,"intersecting",la));function ia(n){p[4](n)}let Ps={tag:"h2",id:"evaluation-of-page-4",$$slots:{default:[$a]},$$scope:{ctx:p}};p[0][3]!==void 0&&(Ps.intersecting=p[0][3]),Z=new Hn({props:Ps}),Mn.push(()=>qn(Z,"intersecting",ia));function ua(n){p[5](n)}let Ls={tag:"h2",id:"evaluation-of-scoreexpressions-5",$$slots:{default:[ba]},$$scope:{ctx:p}};p[0][4]!==void 0&&(Ls.intersecting=p[0][4]),K=new Hn({props:Ls}),Mn.push(()=>qn(K,"intersecting",ua));function ra(n){p[6](n)}let Is={tag:"h2",id:"more-about-evaluation-of-pages-6",$$slots:{default:[ya]},$$scope:{ctx:p}};return p[0][5]!==void 0&&(Is.intersecting=p[0][5]),nn=new Hn({props:Is}),Mn.push(()=>qn(nn,"intersecting",ra)),en=new ha({props:{$$slots:{content:[xa],header:[Ea]},$$scope:{ctx:p}}}),En=new qs({props:{prevLink:Hs,nextLink:Os}}),{c(){j(a.$$.fragment),s=m(),j(e.$$.fragment),u=m(),d=k("p"),d.textContent=i,r=m(),j(_.$$.fragment),h=m(),T=k("p"),T.innerHTML=C,L=m(),I=k("pre"),J=new O(!1),z=m(),j(M.$$.fragment),pn=m(),A=k("p"),A.innerHTML=q,x=m(),S=k("pre"),b=new O(!1),y=m(),$=k("p"),$.innerHTML=an,Y=m(),U=k("pre"),tn=new O(!1),Nn=m(),j(Z.$$.fragment),jn=m(),cn=k("p"),cn.innerHTML=vs,Bn=m(),ln=k("pre"),Fn=new O(!1),Gn=m(),un=k("p"),un.innerHTML=ws,Dn=m(),rn=k("pre"),Vn=new O(!1),Qn=m(),j(K.$$.fragment),Wn=m(),kn=k("p"),kn.innerHTML=_s,Un=m(),fn=k("pre"),Jn=new O(!1),Xn=m(),dn=k("p"),dn.innerHTML=$s,zn=m(),mn=k("p"),mn.textContent=bs,Yn=m(),gn=k("pre"),Zn=new O(!1),Kn=m(),hn=k("p"),hn.innerHTML=ys,ns=m(),vn=k("pre"),ss=new O(!1),as=m(),wn=k("p"),wn.innerHTML=Es,ts=m(),_n=k("pre"),es=new O(!1),os=m(),j(nn.$$.fragment),ps=m(),$n=k("p"),$n.innerHTML=xs,cs=m(),bn=k("pre"),ls=new O(!1),is=m(),j(en.$$.fragment),us=m(),yn=k("pre"),rs=new O(!1),ks=m(),j(En.$$.fragment),this.h()},l(n){B(a.$$.fragment,n),s=g(n),B(e.$$.fragment,n),u=g(n),d=f(n,"P",{"data-svelte-h":!0}),R(d)!=="svelte-ubqrme"&&(d.textContent=i),r=g(n),B(_.$$.fragment,n),h=g(n),T=f(n,"P",{"data-svelte-h":!0}),R(T)!=="svelte-1ohcthx"&&(T.innerHTML=C),L=g(n),I=f(n,"PRE",{class:!0});var o=E(I);J=N(o,!1),o.forEach(t),z=g(n),B(M.$$.fragment,n),pn=g(n),A=f(n,"P",{"data-svelte-h":!0}),R(A)!=="svelte-1g6wnyw"&&(A.innerHTML=q),x=g(n),S=f(n,"PRE",{class:!0});var Cn=E(S);b=N(Cn,!1),Cn.forEach(t),y=g(n),$=f(n,"P",{"data-svelte-h":!0}),R($)!=="svelte-10txob1"&&($.innerHTML=an),Y=g(n),U=f(n,"PRE",{class:!0});var Rn=E(U);tn=N(Rn,!1),Rn.forEach(t),Nn=g(n),B(Z.$$.fragment,n),jn=g(n),cn=f(n,"P",{"data-svelte-h":!0}),R(cn)!=="svelte-85en4v"&&(cn.innerHTML=vs),Bn=g(n),ln=f(n,"PRE",{class:!0});var Pn=E(ln);Fn=N(Pn,!1),Pn.forEach(t),Gn=g(n),un=f(n,"P",{"data-svelte-h":!0}),R(un)!=="svelte-184k1i2"&&(un.innerHTML=ws),Dn=g(n),rn=f(n,"PRE",{class:!0});var Ln=E(rn);Vn=N(Ln,!1),Ln.forEach(t),Qn=g(n),B(K.$$.fragment,n),Wn=g(n),kn=f(n,"P",{"data-svelte-h":!0}),R(kn)!=="svelte-1gub6ma"&&(kn.innerHTML=_s),Un=g(n),fn=f(n,"PRE",{class:!0});var In=E(fn);Jn=N(In,!1),In.forEach(t),Xn=g(n),dn=f(n,"P",{"data-svelte-h":!0}),R(dn)!=="svelte-at255o"&&(dn.innerHTML=$s),zn=g(n),mn=f(n,"P",{"data-svelte-h":!0}),R(mn)!=="svelte-e22320"&&(mn.textContent=bs),Yn=g(n),gn=f(n,"PRE",{class:!0});var Sn=E(gn);Zn=N(Sn,!1),Sn.forEach(t),Kn=g(n),hn=f(n,"P",{"data-svelte-h":!0}),R(hn)!=="svelte-9ky6jm"&&(hn.innerHTML=ys),ns=g(n),vn=f(n,"PRE",{class:!0});var On=E(vn);ss=N(On,!1),On.forEach(t),as=g(n),wn=f(n,"P",{"data-svelte-h":!0}),R(wn)!=="svelte-107czwe"&&(wn.innerHTML=Es),ts=g(n),_n=f(n,"PRE",{class:!0});var Ss=E(_n);es=N(Ss,!1),Ss.forEach(t),os=g(n),B(nn.$$.fragment,n),ps=g(n),$n=f(n,"P",{"data-svelte-h":!0}),R($n)!=="svelte-pl9e8n"&&($n.innerHTML=xs),cs=g(n),bn=f(n,"PRE",{class:!0});var Ms=E(bn);ls=N(Ms,!1),Ms.forEach(t),is=g(n),B(en.$$.fragment,n),us=g(n),yn=f(n,"PRE",{class:!0});var As=E(yn);rs=N(As,!1),As.forEach(t),ks=g(n),B(En.$$.fragment,n),this.h()},h(){J.a=null,w(I,"class","language-freon"),b.a=null,w(S,"class","language-ts"),tn.a=null,w(U,"class","language-ts"),Fn.a=null,w(ln,"class","language-freon"),Vn.a=null,w(rn,"class","language-ts"),Jn.a=null,w(fn,"class","language-txt"),Zn.a=null,w(gn,"class","language-ts"),ss.a=null,w(vn,"class","language-txt"),es.a=null,w(_n,"class","language-ts"),ls.a=null,w(bn,"class","language-ts"),rs.a=null,w(yn,"class","language-ts")},m(n,o){F(a,n,o),l(n,s,o),F(e,n,o),l(n,u,o),l(n,d,o),l(n,r,o),F(_,n,o),l(n,h,o),l(n,T,o),l(n,L,o),l(n,I,o),J.m(X,I),l(n,z,o),F(M,n,o),l(n,pn,o),l(n,A,o),l(n,x,o),l(n,S,o),b.m(v,S),l(n,y,o),l(n,$,o),l(n,Y,o),l(n,U,o),tn.m(Ys,U),l(n,Nn,o),F(Z,n,o),l(n,jn,o),l(n,cn,o),l(n,Bn,o),l(n,ln,o),Fn.m(Zs,ln),l(n,Gn,o),l(n,un,o),l(n,Dn,o),l(n,rn,o),Vn.m(Ks,rn),l(n,Qn,o),F(K,n,o),l(n,Wn,o),l(n,kn,o),l(n,Un,o),l(n,fn,o),Jn.m(na,fn),l(n,Xn,o),l(n,dn,o),l(n,zn,o),l(n,mn,o),l(n,Yn,o),l(n,gn,o),Zn.m(sa,gn),l(n,Kn,o),l(n,hn,o),l(n,ns,o),l(n,vn,o),ss.m(aa,vn),l(n,as,o),l(n,wn,o),l(n,ts,o),l(n,_n,o),es.m(ta,_n),l(n,os,o),F(nn,n,o),l(n,ps,o),l(n,$n,o),l(n,cs,o),l(n,bn,o),ls.m(ea,bn),l(n,is,o),F(en,n,o),l(n,us,o),l(n,yn,o),rs.m(oa,yn),l(n,ks,o),F(En,n,o),fs=!0},p(n,[o]){const Cn={};o&256&&(Cn.$$scope={dirty:o,ctx:n}),!c&&o&1&&(c=!0,Cn.intersecting=n[0][0],An(()=>c=!1)),e.$set(Cn);const Rn={};o&256&&(Rn.$$scope={dirty:o,ctx:n}),!H&&o&1&&(H=!0,Rn.intersecting=n[0][1],An(()=>H=!1)),_.$set(Rn);const Pn={};o&256&&(Pn.$$scope={dirty:o,ctx:n}),!Tn&&o&1&&(Tn=!0,Pn.intersecting=n[0][2],An(()=>Tn=!1)),M.$set(Pn);const Ln={};o&256&&(Ln.$$scope={dirty:o,ctx:n}),!ms&&o&1&&(ms=!0,Ln.intersecting=n[0][3],An(()=>ms=!1)),Z.$set(Ln);const In={};o&256&&(In.$$scope={dirty:o,ctx:n}),!gs&&o&1&&(gs=!0,In.intersecting=n[0][4],An(()=>gs=!1)),K.$set(In);const Sn={};o&256&&(Sn.$$scope={dirty:o,ctx:n}),!hs&&o&1&&(hs=!0,Sn.intersecting=n[0][5],An(()=>hs=!1)),nn.$set(Sn);const On={};o&256&&(On.$$scope={dirty:o,ctx:n}),en.$set(On)},i(n){fs||(G(a.$$.fragment,n),G(e.$$.fragment,n),G(_.$$.fragment,n),G(M.$$.fragment,n),G(Z.$$.fragment,n),G(K.$$.fragment,n),G(nn.$$.fragment,n),G(en.$$.fragment,n),G(En.$$.fragment,n),fs=!0)},o(n){D(a.$$.fragment,n),D(e.$$.fragment,n),D(_.$$.fragment,n),D(M.$$.fragment,n),D(Z.$$.fragment,n),D(K.$$.fragment,n),D(nn.$$.fragment,n),D(en.$$.fragment,n),D(En.$$.fragment,n),fs=!1},d(n){n&&(t(s),t(u),t(d),t(r),t(h),t(T),t(L),t(I),t(z),t(pn),t(A),t(x),t(S),t(y),t($),t(Y),t(U),t(Nn),t(jn),t(cn),t(Bn),t(ln),t(Gn),t(un),t(Dn),t(rn),t(Qn),t(Wn),t(kn),t(Un),t(fn),t(Xn),t(dn),t(zn),t(mn),t(Yn),t(gn),t(Kn),t(hn),t(ns),t(vn),t(as),t(wn),t(ts),t(_n),t(os),t(ps),t($n),t(cs),t(bn),t(is),t(us),t(yn),t(ks)),V(a,n),V(e,n),V(_,n),V(M,n),V(Z,n),V(K,n),V(nn,n),V(en,n),V(En,n)}}}let Hs="/Examples/Building_an_Interpreter",Os="/Examples/Building_an_Interpreter/Using_the_Context";function Ca(p,a,s){let e;Vs(p,sn,h=>s(7,e=h)),xn(sn,e=[{title:"More Basic Evaluation Functions",visible:!1,ref:"#more-basic-evaluation-functions-1"},{title:"The AST of the Test Model Unit",visible:!1,ref:"#the-ast-of-the-test-model-unit-2"},{title:"Evaluations of LastStep and Answer",visible:!1,ref:"#evaluations-of-laststep-and-answer-3"},{title:"Evaluation of Page",visible:!1,ref:"#evaluation-of-page-4"},{title:"Evaluation of ScoreExpressions",visible:!1,ref:"#evaluation-of-scoreexpressions-5"},{title:"More About Evaluation of Pages",visible:!1,ref:"#more-about-evaluation-of-pages-6"}],e);let c=[];ka(()=>{document.querySelectorAll("pre").forEach(T=>{const C=document.createElement("div");C.className="copy-prompt";const L=document.createElement("p");L.innerHTML="ðŸ‘† Click to copy",L.className="copy-prompt-p";const I=document.createElement("img");I.src="/icons/copy-icon.svg",I.className="copy-prompt-img",C.appendChild(I),C.appendChild(L),T.appendChild(C),T.querySelector(".copy-prompt > p").addEventListener("click",J=>{ma(T.querySelector("code").textContent),T.querySelector(".copy-prompt > p").innerHTML="Copied!",setTimeout(()=>{T.querySelector(".copy-prompt > p").innerHTML="ðŸ‘† Click to copy"},1e3)})})});function u(h){p.$$.not_equal(c[0],h)&&(c[0]=h,s(0,c))}function d(h){p.$$.not_equal(c[1],h)&&(c[1]=h,s(0,c))}function i(h){p.$$.not_equal(c[2],h)&&(c[2]=h,s(0,c))}function r(h){p.$$.not_equal(c[3],h)&&(c[3]=h,s(0,c))}function _(h){p.$$.not_equal(c[4],h)&&(c[4]=h,s(0,c))}function H(h){p.$$.not_equal(c[5],h)&&(c[5]=h,s(0,c))}return p.$$.update=()=>{p.$$.dirty&1&&xn(sn,e[0].visible=c[0],e),p.$$.dirty&1&&xn(sn,e[1].visible=c[1],e),p.$$.dirty&1&&xn(sn,e[2].visible=c[2],e),p.$$.dirty&1&&xn(sn,e[3].visible=c[3],e),p.$$.dirty&1&&xn(sn,e[4].visible=c[4],e),p.$$.dirty&1&&xn(sn,e[5].visible=c[5],e)},[c,u,d,i,r,_,H]}class Ra extends Xs{constructor(a){super(),zs(this,a,Ca,Ta,Ds,{})}}function Ns(p,a,s){const e=p.slice();return e[6]=a[s],e[8]=s,e}function js(p,a,s){const e=p.slice();return e[6]=a[s],e[8]=s,e}function Pa(p){let a,s;return{c(){a=k("img"),this.h()},l(e){a=f(e,"IMG",{class:!0,src:!0,alt:!0}),this.h()},h(){w(a,"class","page-toc-small-img"),Js(a.src,s="/icons/down-arrow.png")||w(a,"src",s),w(a,"alt","arrow down")},m(e,c){l(e,a,c)},d(e){e&&t(a)}}}function La(p){let a,s;return{c(){a=k("img"),this.h()},l(e){a=f(e,"IMG",{class:!0,src:!0,alt:!0}),this.h()},h(){w(a,"class","page-toc-small-img"),Js(a.src,s="/icons/upload.png")||w(a,"src",s),w(a,"alt","arrow up")},m(e,c){l(e,a,c)},d(e){e&&t(a)}}}function Bs(p){let a,s,e=ds(p[0]),c=[];for(let u=0;u<e.length;u+=1)c[u]=Fs(js(p,e,u));return{c(){a=k("div"),s=k("ul");for(let u=0;u<c.length;u+=1)c[u].c();this.h()},l(u){a=f(u,"DIV",{class:!0});var d=E(a);s=f(d,"UL",{class:!0});var i=E(s);for(let r=0;r<c.length;r+=1)c[r].l(i);i.forEach(t),d.forEach(t),this.h()},h(){w(s,"class","page-ul"),w(a,"class","toc-details")},m(u,d){l(u,a,d),P(a,s);for(let i=0;i<c.length;i+=1)c[i]&&c[i].m(s,null)},p(u,d){if(d&5){e=ds(u[0]);let i;for(i=0;i<e.length;i+=1){const r=js(u,e,i);c[i]?c[i].p(r,d):(c[i]=Fs(r),c[i].c(),c[i].m(s,null))}for(;i<c.length;i+=1)c[i].d(1);c.length=e.length}},d(u){u&&t(a),Ws(c,u)}}}function Fs(p){let a,s,e=p[6].title+"",c,u,d;return{c(){a=k("li"),s=k("a"),c=Q(e),d=m(),this.h()},l(i){a=f(i,"LI",{class:!0});var r=E(a);s=f(r,"A",{href:!0});var _=E(s);c=W(_,e),_.forEach(t),d=g(r),r.forEach(t),this.h()},h(){w(s,"href",u=p[6].ref),on(s,"page-visible",p[8]===p[2]),on(s,"page-nonvisible",p[8]!==p[2]),w(a,"class","page-toc-text")},m(i,r){l(i,a,r),P(a,s),P(s,c),P(a,d)},p(i,r){r&1&&e!==(e=i[6].title+"")&&Us(c,e),r&1&&u!==(u=i[6].ref)&&w(s,"href",u),r&4&&on(s,"page-visible",i[8]===i[2]),r&4&&on(s,"page-nonvisible",i[8]!==i[2])},d(i){i&&t(a)}}}function Gs(p){let a,s,e=p[6].title+"",c,u,d;return{c(){a=k("li"),s=k("a"),c=Q(e),d=m(),this.h()},l(i){a=f(i,"LI",{class:!0});var r=E(a);s=f(r,"A",{href:!0});var _=E(s);c=W(_,e),_.forEach(t),d=g(r),r.forEach(t),this.h()},h(){w(s,"href",u=p[6].ref),on(s,"page-visible",p[8]===p[2]),on(s,"page-nonvisible",p[8]!==p[2]),w(a,"class","page-toc-text")},m(i,r){l(i,a,r),P(a,s),P(s,c),P(a,d)},p(i,r){r&1&&e!==(e=i[6].title+"")&&Us(c,e),r&1&&u!==(u=i[6].ref)&&w(s,"href",u),r&4&&on(s,"page-visible",i[8]===i[2]),r&4&&on(s,"page-nonvisible",i[8]!==i[2])},d(i){i&&t(a)}}}function Ia(p){let a,s,e,c="On this page ...",u,d,i,r,_,H,h,T,C,L,I="On this page",J,X,z,M,Tn;function pn(v,y){return v[1]?La:Pa}let A=pn(p),q=A(p),x=p[1]&&Bs(p);_=new ga({}),h=new Ra({});let S=ds(p[0]),b=[];for(let v=0;v<S.length;v+=1)b[v]=Gs(Ns(p,S,v));return{c(){a=k("div"),s=k("div"),e=k("p"),e.textContent=c,u=m(),d=k("button"),q.c(),i=m(),x&&x.c(),r=m(),j(_.$$.fragment),H=m(),j(h.$$.fragment),T=m(),C=k("nav"),L=k("h3"),L.textContent=I,J=m(),X=k("ul");for(let v=0;v<b.length;v+=1)b[v].c();this.h()},l(v){a=f(v,"DIV",{class:!0});var y=E(a);s=f(y,"DIV",{class:!0});var $=E(s);e=f($,"P",{class:!0,"data-svelte-h":!0}),R(e)!=="svelte-1929lhs"&&(e.textContent=c),u=g($),d=f($,"BUTTON",{class:!0});var an=E(d);q.l(an),an.forEach(t),$.forEach(t),i=g(y),x&&x.l(y),r=g(y),B(_.$$.fragment,y),H=g(y),B(h.$$.fragment,y),y.forEach(t),T=g(v),C=f(v,"NAV",{class:!0});var Y=E(C);L=f(Y,"H3",{class:!0,"data-svelte-h":!0}),R(L)!=="svelte-1hgt7fi"&&(L.textContent=I),J=g(Y),X=f(Y,"UL",{class:!0});var U=E(X);for(let tn=0;tn<b.length;tn+=1)b[tn].l(U);U.forEach(t),Y.forEach(t),this.h()},h(){w(e,"class","page-toc-small-title"),w(d,"class","page-toc-small-expand-button"),w(s,"class","page-toc-small"),w(a,"class","page-main"),w(L,"class","page-toc-title"),w(X,"class","page-ul"),w(C,"class","page-toc")},m(v,y){l(v,a,y),P(a,s),P(s,e),P(s,u),P(s,d),q.m(d,null),P(a,i),x&&x.m(a,null),P(a,r),F(_,a,null),P(a,H),F(h,a,null),l(v,T,y),l(v,C,y),P(C,L),P(C,J),P(C,X);for(let $=0;$<b.length;$+=1)b[$]&&b[$].m(X,null);z=!0,M||(Tn=fa(d,"click",p[4]),M=!0)},p(v,[y]){if(A!==(A=pn(v))&&(q.d(1),q=A(v),q&&(q.c(),q.m(d,null))),v[1]?x?x.p(v,y):(x=Bs(v),x.c(),x.m(a,r)):x&&(x.d(1),x=null),y&5){S=ds(v[0]);let $;for($=0;$<S.length;$+=1){const an=Ns(v,S,$);b[$]?b[$].p(an,y):(b[$]=Gs(an),b[$].c(),b[$].m(X,null))}for(;$<b.length;$+=1)b[$].d(1);b.length=S.length}},i(v){z||(G(_.$$.fragment,v),G(h.$$.fragment,v),z=!0)},o(v){D(_.$$.fragment,v),D(h.$$.fragment,v),z=!1},d(v){v&&(t(a),t(T),t(C)),q.d(),x&&x.d(),V(_),V(h),Ws(b,v),M=!1,Tn()}}}function Sa(p,a,s){let e,c;Vs(p,sn,_=>s(0,c=_));let u=!1;function d(_){let H=e;for(let h=0;h<_.length;h++)if(_[h].visible)return h;return H}function i(){s(1,u=!u)}const r=()=>{i()};return p.$$.update=()=>{p.$$.dirty&1&&s(2,e=d(c))},[c,u,e,i,r]}class ja extends Xs{constructor(a){super(),zs(this,a,Sa,Ia,Ds,{})}}export{ja as component};
//# sourceMappingURL=64.Dk4LYwNw.js.map
