{"version":3,"file":"63.Colk8Dzm.js","sources":["../../../../../../src/routes/Examples/Building_an_Interpreter/SectionStore.ts","../../../../../../src/routes/Examples/Building_an_Interpreter/PageContent.svelte","../../../../../../src/routes/Examples/Building_an_Interpreter/+page.svelte"],"sourcesContent":["import { writable, type Writable } from 'svelte/store';\nimport type { Section } from '$lib/section/SectionType';\n\nexport const mySections: Writable<Section[]> = writable<Section[]>([]);\n","<script lang=\"ts\">\n\timport SectionComponent from '$lib/section/SectionComponent.svelte';\n\timport { mySections } from './SectionStore.js';\n\t$mySections = [\n\t\t{ title: 'Building an Interpreter', visible: false, ref: '#building-an-interpreter-1' },\n\t\t{ title: 'The Computer Aided Learning DSL', visible: false, ref: '#the-computer-aided-learning-dsl-2' },\n\t\t{ title: 'Values for the Literals', visible: false, ref: '#values-for-the-literals-3' },\n\t\t{ title: 'Values for Binary Expressions', visible: false, ref: '#values-for-binary-expressions-4' }\n\t];\n\tlet visible: boolean[] = [];\n\t$: $mySections[0].visible = visible[0];\n\t$: $mySections[1].visible = visible[1];\n\t$: $mySections[2].visible = visible[2];\n\t$: $mySections[3].visible = visible[3];\n\timport copy from 'copy-to-clipboard';\n\timport { onMount } from 'svelte';\n\n\t/**\n\t * This function will go through all the 'pre' elements\n\t * on the page and add a copy button to them.\n\t * Thanks to: https://slavbasharov.com/blog/adding-click-to-copy-code-markdown-blog\n\t */\n\tonMount(() => {\n\t\tconst codeBlocks = document.querySelectorAll('pre');\n\t\tcodeBlocks.forEach((block) => {\n\t\t\tconst copyPrompt = document.createElement('div');\n\t\t\tcopyPrompt.className = 'copy-prompt';\n\t\t\tconst copyPromptText = document.createElement('p');\n\t\t\tcopyPromptText.innerHTML = 'ðŸ‘† Click to copy';\n\t\t\tcopyPromptText.className = 'copy-prompt-p';\n\t\t\tconst copyIcon = document.createElement('img');\n\t\t\tcopyIcon.src = '/icons/copy-icon.svg';\n\t\t\tcopyIcon.className = 'copy-prompt-img';\n\t\t\tcopyPrompt.appendChild(copyIcon);\n\t\t\tcopyPrompt.appendChild(copyPromptText);\n\t\t\tblock.appendChild(copyPrompt);\n\t\t\tblock.querySelector('.copy-prompt > p').addEventListener('click', (evt) => {\n\t\t\t\tcopy(block.querySelector('code').textContent);\n\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'Copied!';\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'ðŸ‘† Click to copy';\n\t\t\t\t}, 1000);\n\t\t\t});\n\t\t});\n\t});\n\timport PrevNextSection from '$lib/prevNext/PrevNextSection.svelte';\n\n\tlet prevLink = '/Examples/Overview';\n\tlet nextLink = '/Examples/Building_an_Interpreter/Basic_Evaluation_Functions';\n\n\timport Note from '$lib/notes/Note.svelte';\n</script>\n\n<PrevNextSection {prevLink} {nextLink} />\n\n<SectionComponent tag=\"h1\" id=\"building-an-interpreter-1\" bind:intersecting={visible[0]}>Building an Interpreter</SectionComponent>\n<p>This example shows how to create an interpreter.</p>\n<SectionComponent tag=\"h2\" id=\"the-computer-aided-learning-dsl-2\" bind:intersecting={visible[1]}\n\t>The Computer Aided Learning DSL</SectionComponent\n>\n<p>\n\tThe language used in this extended example is the one that is in depth explained in the <a href=\"/Tutorial/Overview\">tutorial</a>. When\n\tyou take another look at the requirements for this DSL, you see that our hypothetical client wants a means to test the page flow. We are\n\tgoing to build an interpreter to do just that.\n</p>\n<p>\n\tTo follow the example use the <code>npm create freon@latest</code> command and choose the language called\n\t<code>EducationInterpreter</code>. Build the project (<code>npm run build</code>). Start the editor and select the model named\n\tâ€˜Model4Interpreterâ€™, which is basically the same as the model called â€˜Lesson6â€™ that was used in the tutorial. Open the model unit â€˜TestBâ€™\n\tand run the interpreter from the <code>Edit</code> menu on the complete test (i.e. by selecting the test as current node).\n</p>\n<Note>\n\t<svelte:fragment slot=\"header\">The selected node is the one that is interpreted</svelte:fragment>\n\t<svelte:fragment slot=\"content\">\n\t\tWhen running the interpreter from the <code>Edit</code> menu, the interpreter will try to evaluate the currently selected node. You will\n\t\tsee a different result in the Interpreter tab for different nodes. Often the interpretation cannot be done completely, because some context\n\t\tis needed. It is up to the creator of the interpreter to augment this.\n\t</svelte:fragment></Note\n>\n<SectionComponent tag=\"h2\" id=\"values-for-the-literals-3\" bind:intersecting={visible[2]}>Values for the Literals</SectionComponent>\n<p>\n\tAs explained in <a href=\"/Documentation/Interpreter_Framework\">Interpreter Framework</a> there is only one file that we need to change:\n\t<code>/src/freon/interpreter/EducationInterpreter.ts</code>.\n</p>\n<p>\n\tBecause this is the easiest manner, we are going to build the evaluation from the bottom up. This means that we are first going to\n\timplement the evaluation functions for the literal expressions, i.e. <code>SimpleNumber</code>, <code>NumberLiteralExpression</code>, and\n\t<code>Fraction</code>.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">// EducationInterpreter/src/custom/interpreter/EducationInterpreter.ts#L216-L228</span>\n\n<span class=\"token comment\">/////////////////// Literals</span>\n\noverride <span class=\"token function\">evalSimpleNumber</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> SimpleNumber<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RtNumber</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\noverride <span class=\"token function\">evalNumberLiteralExpression</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> NumberLiteralExpression<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RtNumber</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\noverride <span class=\"token function\">evalFraction</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> Fraction<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RtFraction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RtNumber</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>numerator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RtNumber</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>denominator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<p>\n\tAs you see, the first two functions simply return a runtime object of type <code>RtNumber</code> which holds the current\n\t<code>value</code>\n\tof the node. The third function returns a runtime object of type <code>RtFraction</code>, which is defined as follows:\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">// EducationInterpreter/src/custom/interpreter/runtime/RtFraction.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> RtBoolean<span class=\"token punctuation\">,</span> RtNumber<span class=\"token punctuation\">,</span> RtObject <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@freon4dsl/core\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RtFraction</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RtObject</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">readonly</span> _type<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"RtFraction\"</span><span class=\"token punctuation\">;</span>\n\n    nominator<span class=\"token operator\">:</span> RtNumber<span class=\"token punctuation\">;</span>\n    denumerator<span class=\"token operator\">:</span> RtNumber<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">:</span> RtNumber<span class=\"token punctuation\">,</span> den<span class=\"token operator\">:</span> RtNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nominator <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>denumerator <span class=\"token operator\">=</span> den<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    override <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> RtObject<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtBoolean <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRtFraction</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nominator<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>nominator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>denumerator<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>denumerator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> RtBoolean<span class=\"token punctuation\">.</span><span class=\"token constant\">FALSE</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    override <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nominator<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>denumerator<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isRtFraction</span><span class=\"token punctuation\">(</span>object<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> object <span class=\"token keyword\">is</span> RtFraction <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> _type <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?.</span>_type<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>_type <span class=\"token operator\">&amp;&amp;</span> _type <span class=\"token operator\">===</span> <span class=\"token string\">\"RtFraction\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code>`}</pre>\n<p>\n\tWhat makes things easy is that we do not actually need the result of a fraction, that is, if the fraction is 6/3, we do not need the\n\tnumber 2. All we have to do, when building the test for our customer, is to compare one fraction with another. Therefore, the only\n\tfunction we need to define for the <code>RtFraction</code> class is the <code>equals</code> function.\n</p>\n<SectionComponent tag=\"h2\" id=\"values-for-binary-expressions-4\" bind:intersecting={visible[3]}\n\t>Values for Binary Expressions</SectionComponent\n>\n<p>\n\tThe next step is to create the evaluation functions for the binary expressions. They are all similar, so here we focus on the evaluation\n\tof an <code>OrExpression</code>.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">// EducationInterpreter/src/custom/interpreter/EducationInterpreter.ts#L244-L248</span>\n\noverride <span class=\"token function\">evalOrExpression</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> OrExpression<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> main<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> RtBoolean\n    <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> main<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> RtBoolean\n    <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<p>\n\tFirst we evaluate the left and right hand side of the expression. Note that we use the <code>main</code> interpreter from the file\n\t<code>MainEducationInterpreter.ts</code>. The <code>main</code> interpreter is able to obtain the runtime value for any node type. Next we\n\tuse the predefined <code>or</code> function of the class\n\t<code>RtBoolean</code>, which is defined as follows.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RtBoolean</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RtObject</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token constant\">TRUE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RtBoolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token constant\">FALSE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RtBoolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span>bool<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtBoolean <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> bool <span class=\"token operator\">?</span> RtBoolean<span class=\"token punctuation\">.</span><span class=\"token constant\">TRUE</span> <span class=\"token operator\">:</span> RtBoolean<span class=\"token punctuation\">.</span><span class=\"token constant\">FALSE</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token function\">or</span><span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> RtBoolean<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtBoolean <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> RtBoolean<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_value <span class=\"token operator\">||</span> other<span class=\"token punctuation\">.</span><span class=\"token function\">asBoolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token operator\">...</span>  \n<span class=\"token punctuation\">&#125;</span>\t\t</code>`}</pre>\n<p>\n\tThe other comparison expressions, like <code>AndExpression</code>, and <code>EqualsExpression</code>, are implemented in a similar\n\tfashion. For example, this is the implementation of the <code>GreaterOrEqualsExpression</code>:\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">// EducationInterpreter/src/custom/interpreter/EducationInterpreter.ts#L256-L260</span>\n\noverride <span class=\"token function\">evalGreaterOrEqualsExpression</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> GreaterOrEqualsExpression<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> main<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> RtNumber\n    <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> main<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> RtNumber\n    <span class=\"token keyword\">return</span> RtBoolean<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>value <span class=\"token operator\">>=</span> right<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n\n<PrevNextSection {prevLink} {nextLink} />\n","<script lang=\"ts\">\n\timport { mySections } from './SectionStore.js';\n\timport type { Section } from '$lib/section/SectionType.js';\n\timport PageContent from './PageContent.svelte';\n\timport Breadcrumb from '$lib/breadcrumbs/Breadcrumb.svelte';\n\n\tlet showDetails: boolean = false;\n\t$: current = getCurrent($mySections);\n\n\tfunction getCurrent(internalSections: Section[]): number {\n\t\tlet previous = current;\n\t\tfor (let i = 0; i < internalSections.length; i++) {\n\t\t\tif (internalSections[i].visible) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn previous;\n\t}\n\tfunction toggleTocDetails() {\n\t\tshowDetails = !showDetails;\n\t}\n</script>\n\n<div class=\"page-main\">\n\t<div class=\"page-toc-small\">\n\t\t<p class=\"page-toc-small-title\">On this page ...</p>\n\t\t<button\n\t\t\tclass=\"page-toc-small-expand-button\"\n\t\t\ton:click={() => {\n\t\t\t\ttoggleTocDetails();\n\t\t\t}}\n\t\t>\n\t\t\t{#if showDetails}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/upload.png\" alt=\"arrow up\" />\n\t\t\t{:else}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/down-arrow.png\" alt=\"arrow down\" />\n\t\t\t{/if}\n\t\t</button>\n\t</div>\n\t{#if showDetails}\n\t\t<div class=\"toc-details\">\n\t\t\t<ul class=\"page-ul\">\n\t\t\t\t{#each $mySections as sec, index}\n\t\t\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t\t\t{sec.title}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t{/each}\n\t\t\t</ul>\n\t\t</div>\n\t{/if}\n\n\t<Breadcrumb />\n\t<PageContent />\n</div>\n\n<nav class=\"page-toc\">\n\t<h3 class=\"page-toc-title\">On this page</h3>\n\t<ul class=\"page-ul\">\n\t\t{#each $mySections as sec, index}\n\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t{sec.title}\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n</nav>\n"],"names":["mySections","writable","insert_hydration","target","code","anchor","ctx","sectioncomponent0_props","sectioncomponent1_props","sectioncomponent2_props","sectioncomponent3_props","p0","p1","p2","p3","p4","pre0","p5","pre1","p6","p7","pre2","p8","pre3","p9","pre4","sectioncomponent0_changes","sectioncomponent1_changes","sectioncomponent2_changes","sectioncomponent3_changes","prevLink","nextLink","$mySections","visible","onMount","block","copyPrompt","copyPromptText","copyIcon","evt","copy","$$self","value","set_store_value","img","i","div","append_hydration","ul","t0_value","attr","a","a_href_value","toggle_class","li","dirty","set_data","t0","create_if_block_1","create_if_block","div1","div0","p","button","nav","h3","showDetails","getCurrent","internalSections","previous","current","toggleTocDetails","$$invalidate"],"mappings":"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"}