import{s as fa,A as Vn,a as k,e as u,H as Sn,f as d,b as r,m as w,d as T,F as Ln,g as a,h as _,i as p,j as $,B as Dn,r as ma,w as qn,v as Ha,t as An,o as Hn,C as Ea,D as ha,E as sn,q as ga,p as _a}from"../chunks/scheduler.Cra-n4xf.js";import{S as va,i as ba,e as Wn,c as O,a as R,m as j,t as q,b as z,d as V}from"../chunks/index.Bm95Nbrf.js";import{e as Ss}from"../chunks/stores.DIt-NjBs.js";import{w as Ma}from"../chunks/index.B9cI0ado.js";import{P as oa,S as Un,c as Ba,B as Ia}from"../chunks/index.NO_ZQ_dD.js";import{F as pa}from"../chunks/Figure.DKZMymJr.js";const nn=Ma([]);function Fa(c){let s;return{c(){s=An("Replacing a Part List")},l(t){s=Hn(t,"Replacing a Part List")},m(t,o){p(t,s,o)},d(t){t&&a(s)}}}function Na(c){let s;return{c(){s=An("Step 1: Create the Svelte Component")},l(t){s=Hn(t,"Step 1: Create the Svelte Component")},m(t,o){p(t,s,o)},d(t){t&&a(s)}}}function Oa(c){let s;return{c(){s=An("Step 2: Include in the Projection")},l(t){s=Hn(t,"Step 2: Include in the Projection")},m(t,o){p(t,s,o)},d(t){t&&a(s)}}}function Ra(c){let s;return{c(){s=An("Step 3: Do the Admin")},l(t){s=Hn(t,"Step 3: Do the Admin")},m(t,o){p(t,s,o)},d(t){t&&a(s)}}}function ja(c){let s;return{c(){s=An("Final Result")},l(t){s=Hn(t,"Final Result")},m(t,o){p(t,s,o)},d(t){t&&a(s)}}}function qa(c){let s,t,o,l,f,g,i="In this part of the extended example, you’ll learn how to replace a part list in your application by creating a custom Svelte component, <code>StaffAccordion.svelte</code>, to display and manage a list of teachers within an accordion. Let’s dive in step by step.",m,v,b,P,L,A=`We’ll start by creating the <code>StaffAccordion.svelte</code> component. This component will replace the default projection of the
	<code>teachers</code>
	property in the <code>Staff</code> model unit.`,H,M,En="The Script Section",B,I,Mn="Begin by defining the component’s parameters and the necessary state management functions:",an,D,U,N=`<code class="language-ts"><span class="token comment">// CourseSchedule/phase4/src/external/StaffAccordion.svelte#L9-L55</span>

<span class="token comment">// This component replaces the component for "teachers: Person[];" from model unit "Staff".</span>
<span class="token comment">// This property is a parts list, therefore the external box to use is an ExternalPartListBox.</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> box<span class="token operator">:</span> ExternalPartListBox<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> editor<span class="token operator">:</span> FreEditor<span class="token punctuation">;</span>

<span class="token keyword">let</span> panelOpen<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// List of booleans to indicate which panel is open (true) and closed (false).</span>
<span class="token keyword">let</span> multiplePar<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment">// Indicates whether multiple panels may be open at the same time.</span>

<span class="token comment">/*
    Sets all panels in the state 'closed',
    and sets the length of 'panelOpen'.
 */</span>
<span class="token keyword">function</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> param<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> box<span class="token punctuation">.</span><span class="token function">findParam</span><span class="token punctuation">(</span><span class="token string">"multi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token operator">===</span> <span class="token string">"multiple"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        multiplePar <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    panelOpen <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> box<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// this also sets the length of panelOpen!</span>
        panelOpen<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        box<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// the child boxes are not currently shown</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// The following four functions need to be included for the editor to function properly.</span>
<span class="token comment">// Please, set the focus to the first editable/selectable element in this component.</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> box<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>panelOpen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            box<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> refresh <span class="token operator">=</span> <span class="token punctuation">(</span>why<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// do whatever needs to be done to refresh the elements that show information from the model</span>
    <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">onMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    box<span class="token punctuation">.</span>setFocus <span class="token operator">=</span> setFocus<span class="token punctuation">;</span>
    box<span class="token punctuation">.</span>refreshComponent <span class="token operator">=</span> refresh<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">afterUpdate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    box<span class="token punctuation">.</span>setFocus <span class="token operator">=</span> setFocus<span class="token punctuation">;</span>
    box<span class="token punctuation">.</span>refreshComponent <span class="token operator">=</span> refresh<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,C,E,S=`We have implemented the <code>setFocus</code> function such that when the focus is programmatically set to the list, it is redirected to
	the element in the first panel that is open. Furthermore, we have added an <code>initialize</code> function, which does two things. It
	finds the parameter that is given in the .edit file under the name <code>multi</code>, and it initializes the <code>panelOpen</code> variable.`,h,y,x=`Also, we need to take care of adding to and removing from the list. Therefore, we add two functions
	<code>addPerson</code> and <code>removePerson</code>. Because the reactivity of the AST model is implemented using the
	<a href="https://mobx.js.org/" target="_blank">MobX</a>
	state management library, we need to put any changes to the AST inside a MobX action. Freon provides two methods for this purpose:
	<code>AST.change</code>
	and
	<code>AST.changeNamed</code>. The latter is only useful for logging purposes, and will not be used in this example. The rest of the
	implementation of both functions is straightforward. We get the list of AST nodes from the box using <code>Box.getPropertyValue()</code>,
	and change it.`,W,F,tn,zn=`<code class="language-ts"><span class="token comment">// CourseSchedule/phase4/src/external/StaffAccordion.svelte#L57-L72</span>

<span class="token keyword">const</span> <span class="token function-variable function">addPerson</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Note that you need to put any changes to the actual model in a 'AST.change or AST.changeNamed',</span>
    <span class="token comment">// because all elements in the model are reactive using mobx.</span>
    <span class="token constant">AST</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> newPerson<span class="token operator">:</span> Person <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        box<span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token function-variable function">removePerson</span> <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Note that you need to put any changes to the actual model in a 'AST.change' or</span>
    <span class="token comment">// 'AST.changeNamed', because all elements in the AST model are reactive using mobx.</span>
    <span class="token constant">AST</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        box<span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Gn,en,Is="That done, we need to call both functions somewhere in the HTML section of the component.",Xn,J,Fs="The HTML Section",Yn,on,Ns=`The actual HTML in the component consists of a <code>div</code> with the <code>Accordion</code>, and an icon button to add an element to
	the list. We have added some inline styling, just to make things look a little bit better, but the focus of this example is not on
	styling, therefore it is kept to a minimum.`,Jn,pn,Os=`In the <code>Accordion</code> component we loop over the children of the box, using both the child box and its index in the list. We
	create a <code>Panel</code> for each childBox, setting it to <code>open</code> based the value in <code>panelOpen[index]</code>. Take a
	look at the header of each <code>Panel</code>, which contains information from the AST model. Every box is associated with the AST node
	that it represents. This AST node can be accessed using <code>childBox.node</code>, which returns an object of type <code>FreNode</code>.
	Also, every AST node knows its meta type, i.e. the concept from the .edit file that is used to instantiate the node. We can access this
	name using
	<code>childBox.node.freLanguageConcept()</code>. Here the result is a string with the value ‘Person’.`,Kn,cn,Rs=`We can do even more with the AST, but because its type is <code>FreNode</code> and not <code>Person</code>, this is a little bit more
	complex. We could use a different variable, and cast the node to the right type, but that would mean that we have a lot more admin to do
	in the <code>initialize</code> function. Therefore, we have chosen to access the information using a generic TypeScript manner called
	<a href="https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html" target="_blank">typed index accessing</a>
	to look up a specific property on another type: <code>childBox.node[&quot;name&quot;]</code>. This results in the name of the <code>Person</code> object.`,Qn,ln,js=`The content of each panel is defined as the native Freon component for the child box coupled with an icon button that calls the <code>removePerson</code>
	function for that specific element in the list. The native Freon component is rendered by the Freon
	<code>RenderComponent</code> as in the <code>PhoneButton.svelte</code> component.`,Zn,un,ns,wa=`<code class="language-ts"><span class="token comment">// CourseSchedule/phase4/src/external/StaffAccordion.svelte#L78-L96</span>

<span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"display: flex; align-items: flex-end;"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>Accordion multiple<span class="token operator">=</span><span class="token string">"&#123;multiplePar&#125;"</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>#each box<span class="token punctuation">.</span>children <span class="token keyword">as</span> childBox<span class="token punctuation">,</span> index<span class="token punctuation">&#125;</span>
            <span class="token operator">&lt;</span>Panel bind<span class="token operator">:</span>open<span class="token operator">=</span><span class="token punctuation">&#123;</span>panelOpen<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>Header<span class="token operator">></span>
                    <span class="token punctuation">&#123;</span>childBox<span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">freLanguageConcept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>childBox<span class="token punctuation">.</span>node<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>Header<span class="token operator">></span>
                <span class="token operator">&lt;</span>Content<span class="token operator">></span>
                    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"display: flex; align-items: flex-end;"</span><span class="token operator">></span>
                        <span class="token operator">&lt;</span>RenderComponent box<span class="token operator">=</span><span class="token punctuation">&#123;</span>childBox<span class="token punctuation">&#125;</span> editor<span class="token operator">=</span><span class="token punctuation">&#123;</span>editor<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
                        <span class="token operator">&lt;</span>IconButton <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"material-icons"</span> on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">removePerson</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>remove<span class="token operator">&lt;</span><span class="token operator">/</span>IconButton<span class="token operator">></span>
                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>Content<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>Panel<span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token operator">/</span>each<span class="token punctuation">&#125;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Accordion<span class="token operator">></span>

    <span class="token operator">&lt;</span>IconButton <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"material-icons"</span> on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">addPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>add<span class="token operator">&lt;</span><span class="token operator">/</span>IconButton<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code>`,ss,K,qs="The Complete Component",as,rn,zs="Now that we’ve defined the script and HTML sections, here’s the full component:",ts,kn,es,ya=`<code class="language-ts"><span class="token comment">// CourseSchedule/phase4/src/external/StaffAccordion.svelte</span>

<span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>
    <span class="token keyword">import</span> Accordion<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>Panel<span class="token punctuation">,</span> Header<span class="token punctuation">,</span> Content<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@smui-extra/accordion'</span><span class="token punctuation">;</span>
    <span class="token keyword">import</span> IconButton <span class="token keyword">from</span> <span class="token string">'@smui/icon-button'</span><span class="token punctuation">;</span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span><span class="token constant">AST</span><span class="token punctuation">,</span> ExternalPartListBox<span class="token punctuation">,</span> FreEditor<span class="token punctuation">,</span> FreNodeReference<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@freon4dsl/core"</span><span class="token punctuation">;</span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span>RenderComponent<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@freon4dsl/core-svelte"</span><span class="token punctuation">;</span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span>afterUpdate<span class="token punctuation">,</span> onMount<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"svelte"</span><span class="token punctuation">;</span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Person<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../freon/language/gen/index.js"</span><span class="token punctuation">;</span>

    <span class="token comment">// This component replaces the component for "teachers: Person[];" from model unit "Staff".</span>
    <span class="token comment">// This property is a parts list, therefore the external box to use is an ExternalPartListBox.</span>
    <span class="token keyword">export</span> <span class="token keyword">let</span> box<span class="token operator">:</span> ExternalPartListBox<span class="token punctuation">;</span>
    <span class="token keyword">export</span> <span class="token keyword">let</span> editor<span class="token operator">:</span> FreEditor<span class="token punctuation">;</span>

    <span class="token keyword">let</span> panelOpen<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// List of booleans to indicate which panel is open (true) and closed (false).</span>
    <span class="token keyword">let</span> multiplePar<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment">// Indicates whether multiple panels may be open at the same time.</span>

    <span class="token comment">/*
        Sets all panels in the state 'closed',
        and sets the length of 'panelOpen'.
     */</span>
    <span class="token keyword">function</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> param<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> box<span class="token punctuation">.</span><span class="token function">findParam</span><span class="token punctuation">(</span><span class="token string">"multi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token operator">===</span> <span class="token string">"multiple"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            multiplePar <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        panelOpen <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> box<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// this also sets the length of panelOpen!</span>
            panelOpen<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            box<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// the child boxes are not currently shown</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// The following four functions need to be included for the editor to function properly.</span>
    <span class="token comment">// Please, set the focus to the first editable/selectable element in this component.</span>
    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> box<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>panelOpen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                box<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">const</span> refresh <span class="token operator">=</span> <span class="token punctuation">(</span>why<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// do whatever needs to be done to refresh the elements that show information from the model</span>
        <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">onMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        box<span class="token punctuation">.</span>setFocus <span class="token operator">=</span> setFocus<span class="token punctuation">;</span>
        box<span class="token punctuation">.</span>refreshComponent <span class="token operator">=</span> refresh<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">afterUpdate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        box<span class="token punctuation">.</span>setFocus <span class="token operator">=</span> setFocus<span class="token punctuation">;</span>
        box<span class="token punctuation">.</span>refreshComponent <span class="token operator">=</span> refresh<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">addPerson</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// Note that you need to put any changes to the actual model in a 'AST.change or AST.changeNamed',</span>
        <span class="token comment">// because all elements in the model are reactive using mobx.</span>
        <span class="token constant">AST</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> newPerson<span class="token operator">:</span> Person <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            box<span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">removePerson</span> <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// Note that you need to put any changes to the actual model in a 'AST.change' or</span>
        <span class="token comment">// 'AST.changeNamed', because all elements in the AST model are reactive using mobx.</span>
        <span class="token constant">AST</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            box<span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// Run the initialization</span>
    <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>

<span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"display: flex; align-items: flex-end;"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>Accordion multiple<span class="token operator">=</span><span class="token string">"&#123;multiplePar&#125;"</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>#each box<span class="token punctuation">.</span>children <span class="token keyword">as</span> childBox<span class="token punctuation">,</span> index<span class="token punctuation">&#125;</span>
            <span class="token operator">&lt;</span>Panel bind<span class="token operator">:</span>open<span class="token operator">=</span><span class="token punctuation">&#123;</span>panelOpen<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>Header<span class="token operator">></span>
                    <span class="token punctuation">&#123;</span>childBox<span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">freLanguageConcept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>childBox<span class="token punctuation">.</span>node<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>Header<span class="token operator">></span>
                <span class="token operator">&lt;</span>Content<span class="token operator">></span>
                    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"display: flex; align-items: flex-end;"</span><span class="token operator">></span>
                        <span class="token operator">&lt;</span>RenderComponent box<span class="token operator">=</span><span class="token punctuation">&#123;</span>childBox<span class="token punctuation">&#125;</span> editor<span class="token operator">=</span><span class="token punctuation">&#123;</span>editor<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
                        <span class="token operator">&lt;</span>IconButton <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"material-icons"</span> on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">removePerson</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>remove<span class="token operator">&lt;</span><span class="token operator">/</span>IconButton<span class="token operator">></span>
                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>Content<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>Panel<span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token operator">/</span>each<span class="token punctuation">&#125;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Accordion<span class="token operator">></span>

    <span class="token operator">&lt;</span>IconButton <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"material-icons"</span> on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">addPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>add<span class="token operator">&lt;</span><span class="token operator">/</span>IconButton<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
</code>`,os,G,Ls,ps,dn,Vs=`To integrate our new accordion component into the projection, we need to modify the <code>.edit</code> file. Specifically, we’ll replace
	the <code>teachers</code> property with the <code>StaffAccordion</code> component and pass the <code>multi</code> parameter to allow multiple
	panels to be open. Note that parameter passing is string based. Any parameter is a key-value pair, where both the key and the value are strings.
	There are no checks on any types or values.`,cs,fn,Ds="In your <code>.edit</code> file:",ls,mn,is,xa=`<code class="language-freon"><span class="token comment">// CourseSchedule/phase4/defs/externals.edit#L14-L18
</span>
<span class="token class-name">Staff</span> &#123;<span class="token punctuation">[</span>
Staff <span class="token keyword">in</span> the category: $&#123;<span class="token function"><span class="token variable">self</span>.name</span>&#125;

    $&#123;<span class="token variable">self</span>.teachers <span class="token keyword">replace</span>=StaffAccordion multi=<span class="token string">"multiple"</span>&#125;
<span class="token punctuation">]</span>&#125;</code>`,us,X,As,rs,hn,Ws=`All that is left to do, is the familiar admin. Add <code>StaffAccordion</code> to the global section of your editor’s definition and ensure
	it’s recognized as a custom component.`,ks,gn,Us="In the <code>global</code> section of the <code>main.edit</code> file:",ds,_n,fs,$a=`<code class="language-freon"><span class="token comment">// CourseSchedule/phase4/defs/main.edit#L3-L9
</span>
<span class="token class-name">global</span> &#123;
    <span class="token class-name">external</span> &#123;
        PersonIcon,
        PhoneButton,
        StaffAccordion
    &#125;
&#125;</code>`,ms,vn,Gs=`In the <code>externals.ts</code>, register <code>StaffAccordion</code> as a custom component. Don’t forget to update your
	<code>package.json</code> file to include any library components.`,hs,bn,gs,Pa=`<code class="language-ts"><span class="token comment">// CourseSchedule/phase4/src/external/externals.ts#L9-L15</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">configureExternals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setCustomComponents</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span> component<span class="token operator">:</span> PersonIcon<span class="token punctuation">,</span> knownAs<span class="token operator">:</span> <span class="token string">"PersonIcon"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span> component<span class="token operator">:</span> PhoneButton<span class="token punctuation">,</span> knownAs<span class="token operator">:</span> <span class="token string">"PhoneButton"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span> component<span class="token operator">:</span> StaffAccordion<span class="token punctuation">,</span> knownAs<span class="token operator">:</span> <span class="token string">"StaffAccordion"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,_s,Y,Hs,vs,wn,Xs="After following these steps, your editor will display the staff list in an accordion format. Here’s what the result will look like:",bs,Q,yn,Bn,Ys="<strong>All panels closed:</strong>",Es,xn,Ms,$n,In,Js="<strong>A panel open:</strong>",Bs,Pn,ws,Z,Ks="Conclusion",ys,Cn,Qs=`And that’s it! You’ve successfully replaced the <code>teachers</code> list with an accordion in Svelte. Next up, you will learn how to manipulate
	AST nodes and display them in a different order.`,xs,Tn,$s;s=new oa({props:{prevLink:ca,nextLink:la}});function Ca(n){c[1](n)}let Zs={tag:"h1",id:"replacing-a-part-list-1",$$slots:{default:[Fa]},$$scope:{ctx:c}};c[0][0]!==void 0&&(Zs.intersecting=c[0][0]),o=new Un({props:Zs}),Vn.push(()=>Wn(o,"intersecting",Ca));function Ta(n){c[2](n)}let na={tag:"h2",id:"step-1-create-the-svelte-component-2",$$slots:{default:[Na]},$$scope:{ctx:c}};c[0][1]!==void 0&&(na.intersecting=c[0][1]),v=new Un({props:na}),Vn.push(()=>Wn(v,"intersecting",Ta));function Sa(n){c[3](n)}let sa={tag:"h2",id:"step-2-include-in-the-projection-3",$$slots:{default:[Oa]},$$scope:{ctx:c}};c[0][2]!==void 0&&(sa.intersecting=c[0][2]),G=new Un({props:sa}),Vn.push(()=>Wn(G,"intersecting",Sa));function La(n){c[4](n)}let aa={tag:"h2",id:"step-3-do-the-admin-4",$$slots:{default:[Ra]},$$scope:{ctx:c}};c[0][3]!==void 0&&(aa.intersecting=c[0][3]),X=new Un({props:aa}),Vn.push(()=>Wn(X,"intersecting",La));function Aa(n){c[5](n)}let ta={tag:"h2",id:"final-result-5",$$slots:{default:[ja]},$$scope:{ctx:c}};return c[0][4]!==void 0&&(ta.intersecting=c[0][4]),Y=new Un({props:ta}),Vn.push(()=>Wn(Y,"intersecting",Aa)),xn=new pa({props:{imageName:"examples/CourseSchedule/Screenshot-step4a.png",caption:"Staff model unit with Accordion",figureNumber:1}}),Pn=new pa({props:{imageName:"examples/CourseSchedule/Screenshot-step4b.png",caption:"Accordion with open panel",figureNumber:2}}),Tn=new oa({props:{prevLink:ca,nextLink:la}}),{c(){O(s.$$.fragment),t=k(),O(o.$$.fragment),f=k(),g=u("p"),g.innerHTML=i,m=k(),O(v.$$.fragment),P=k(),L=u("p"),L.innerHTML=A,H=k(),M=u("h3"),M.textContent=En,B=k(),I=u("p"),I.textContent=Mn,an=k(),D=u("pre"),U=new Sn(!1),C=k(),E=u("p"),E.innerHTML=S,h=k(),y=u("p"),y.innerHTML=x,W=k(),F=u("pre"),tn=new Sn(!1),Gn=k(),en=u("p"),en.textContent=Is,Xn=k(),J=u("h3"),J.textContent=Fs,Yn=k(),on=u("p"),on.innerHTML=Ns,Jn=k(),pn=u("p"),pn.innerHTML=Os,Kn=k(),cn=u("p"),cn.innerHTML=Rs,Qn=k(),ln=u("p"),ln.innerHTML=js,Zn=k(),un=u("pre"),ns=new Sn(!1),ss=k(),K=u("h3"),K.textContent=qs,as=k(),rn=u("p"),rn.textContent=zs,ts=k(),kn=u("pre"),es=new Sn(!1),os=k(),O(G.$$.fragment),ps=k(),dn=u("p"),dn.innerHTML=Vs,cs=k(),fn=u("p"),fn.innerHTML=Ds,ls=k(),mn=u("pre"),is=new Sn(!1),us=k(),O(X.$$.fragment),rs=k(),hn=u("p"),hn.innerHTML=Ws,ks=k(),gn=u("p"),gn.innerHTML=Us,ds=k(),_n=u("pre"),fs=new Sn(!1),ms=k(),vn=u("p"),vn.innerHTML=Gs,hs=k(),bn=u("pre"),gs=new Sn(!1),_s=k(),O(Y.$$.fragment),vs=k(),wn=u("p"),wn.textContent=Xs,bs=k(),Q=u("ul"),yn=u("li"),Bn=u("p"),Bn.innerHTML=Ys,Es=k(),O(xn.$$.fragment),Ms=k(),$n=u("li"),In=u("p"),In.innerHTML=Js,Bs=k(),O(Pn.$$.fragment),ws=k(),Z=u("h3"),Z.textContent=Ks,ys=k(),Cn=u("p"),Cn.innerHTML=Qs,xs=k(),O(Tn.$$.fragment),this.h()},l(n){R(s.$$.fragment,n),t=d(n),R(o.$$.fragment,n),f=d(n),g=r(n,"P",{"data-svelte-h":!0}),w(g)!=="svelte-611puh"&&(g.innerHTML=i),m=d(n),R(v.$$.fragment,n),P=d(n),L=r(n,"P",{"data-svelte-h":!0}),w(L)!=="svelte-7m8x1d"&&(L.innerHTML=A),H=d(n),M=r(n,"H3",{id:!0,"data-svelte-h":!0}),w(M)!=="svelte-7fcyeo"&&(M.textContent=En),B=d(n),I=r(n,"P",{"data-svelte-h":!0}),w(I)!=="svelte-12jwucu"&&(I.textContent=Mn),an=d(n),D=r(n,"PRE",{class:!0});var e=T(D);U=Ln(e,!1),e.forEach(a),C=d(n),E=r(n,"P",{"data-svelte-h":!0}),w(E)!=="svelte-mbjj39"&&(E.innerHTML=S),h=d(n),y=r(n,"P",{"data-svelte-h":!0}),w(y)!=="svelte-1iyo8kx"&&(y.innerHTML=x),W=d(n),F=r(n,"PRE",{class:!0});var Fn=T(F);tn=Ln(Fn,!1),Fn.forEach(a),Gn=d(n),en=r(n,"P",{"data-svelte-h":!0}),w(en)!=="svelte-ffsu9k"&&(en.textContent=Is),Xn=d(n),J=r(n,"H3",{id:!0,"data-svelte-h":!0}),w(J)!=="svelte-qiim4l"&&(J.textContent=Fs),Yn=d(n),on=r(n,"P",{"data-svelte-h":!0}),w(on)!=="svelte-xblu5m"&&(on.innerHTML=Ns),Jn=d(n),pn=r(n,"P",{"data-svelte-h":!0}),w(pn)!=="svelte-g34wqd"&&(pn.innerHTML=Os),Kn=d(n),cn=r(n,"P",{"data-svelte-h":!0}),w(cn)!=="svelte-1lh3uxt"&&(cn.innerHTML=Rs),Qn=d(n),ln=r(n,"P",{"data-svelte-h":!0}),w(ln)!=="svelte-1b1s96d"&&(ln.innerHTML=js),Zn=d(n),un=r(n,"PRE",{class:!0});var Nn=T(un);ns=Ln(Nn,!1),Nn.forEach(a),ss=d(n),K=r(n,"H3",{id:!0,"data-svelte-h":!0}),w(K)!=="svelte-4abf0a"&&(K.textContent=qs),as=d(n),rn=r(n,"P",{"data-svelte-h":!0}),w(rn)!=="svelte-1rxals7"&&(rn.textContent=zs),ts=d(n),kn=r(n,"PRE",{class:!0});var On=T(kn);es=Ln(On,!1),On.forEach(a),os=d(n),R(G.$$.fragment,n),ps=d(n),dn=r(n,"P",{"data-svelte-h":!0}),w(dn)!=="svelte-zno3yv"&&(dn.innerHTML=Vs),cs=d(n),fn=r(n,"P",{"data-svelte-h":!0}),w(fn)!=="svelte-1ak0v71"&&(fn.innerHTML=Ds),ls=d(n),mn=r(n,"PRE",{class:!0});var Rn=T(mn);is=Ln(Rn,!1),Rn.forEach(a),us=d(n),R(X.$$.fragment,n),rs=d(n),hn=r(n,"P",{"data-svelte-h":!0}),w(hn)!=="svelte-x6ts09"&&(hn.innerHTML=Ws),ks=d(n),gn=r(n,"P",{"data-svelte-h":!0}),w(gn)!=="svelte-iproxv"&&(gn.innerHTML=Us),ds=d(n),_n=r(n,"PRE",{class:!0});var jn=T(_n);fs=Ln(jn,!1),jn.forEach(a),ms=d(n),vn=r(n,"P",{"data-svelte-h":!0}),w(vn)!=="svelte-tw11p4"&&(vn.innerHTML=Gs),hs=d(n),bn=r(n,"PRE",{class:!0});var ea=T(bn);gs=Ln(ea,!1),ea.forEach(a),_s=d(n),R(Y.$$.fragment,n),vs=d(n),wn=r(n,"P",{"data-svelte-h":!0}),w(wn)!=="svelte-1d683lj"&&(wn.textContent=Xs),bs=d(n),Q=r(n,"UL",{});var Ps=T(Q);yn=r(Ps,"LI",{});var Cs=T(yn);Bn=r(Cs,"P",{"data-svelte-h":!0}),w(Bn)!=="svelte-5z7pz5"&&(Bn.innerHTML=Ys),Es=d(Cs),R(xn.$$.fragment,Cs),Cs.forEach(a),Ms=d(Ps),$n=r(Ps,"LI",{});var Ts=T($n);In=r(Ts,"P",{"data-svelte-h":!0}),w(In)!=="svelte-1is337e"&&(In.innerHTML=Js),Bs=d(Ts),R(Pn.$$.fragment,Ts),Ts.forEach(a),Ps.forEach(a),ws=d(n),Z=r(n,"H3",{id:!0,"data-svelte-h":!0}),w(Z)!=="svelte-1m2dhh1"&&(Z.textContent=Ks),ys=d(n),Cn=r(n,"P",{"data-svelte-h":!0}),w(Cn)!=="svelte-k4knqb"&&(Cn.innerHTML=Qs),xs=d(n),R(Tn.$$.fragment,n),this.h()},h(){_(M,"id","the-script-section-1"),U.a=null,_(D,"class","language-ts"),tn.a=null,_(F,"class","language-ts"),_(J,"id","the-html-section-2"),ns.a=null,_(un,"class","language-ts"),_(K,"id","the-complete-component-3"),es.a=null,_(kn,"class","language-ts"),is.a=null,_(mn,"class","language-freon"),fs.a=null,_(_n,"class","language-freon"),gs.a=null,_(bn,"class","language-ts"),_(Z,"id","conclusion-4")},m(n,e){j(s,n,e),p(n,t,e),j(o,n,e),p(n,f,e),p(n,g,e),p(n,m,e),j(v,n,e),p(n,P,e),p(n,L,e),p(n,H,e),p(n,M,e),p(n,B,e),p(n,I,e),p(n,an,e),p(n,D,e),U.m(N,D),p(n,C,e),p(n,E,e),p(n,h,e),p(n,y,e),p(n,W,e),p(n,F,e),tn.m(zn,F),p(n,Gn,e),p(n,en,e),p(n,Xn,e),p(n,J,e),p(n,Yn,e),p(n,on,e),p(n,Jn,e),p(n,pn,e),p(n,Kn,e),p(n,cn,e),p(n,Qn,e),p(n,ln,e),p(n,Zn,e),p(n,un,e),ns.m(wa,un),p(n,ss,e),p(n,K,e),p(n,as,e),p(n,rn,e),p(n,ts,e),p(n,kn,e),es.m(ya,kn),p(n,os,e),j(G,n,e),p(n,ps,e),p(n,dn,e),p(n,cs,e),p(n,fn,e),p(n,ls,e),p(n,mn,e),is.m(xa,mn),p(n,us,e),j(X,n,e),p(n,rs,e),p(n,hn,e),p(n,ks,e),p(n,gn,e),p(n,ds,e),p(n,_n,e),fs.m($a,_n),p(n,ms,e),p(n,vn,e),p(n,hs,e),p(n,bn,e),gs.m(Pa,bn),p(n,_s,e),j(Y,n,e),p(n,vs,e),p(n,wn,e),p(n,bs,e),p(n,Q,e),$(Q,yn),$(yn,Bn),$(yn,Es),j(xn,yn,null),$(Q,Ms),$(Q,$n),$($n,In),$($n,Bs),j(Pn,$n,null),p(n,ws,e),p(n,Z,e),p(n,ys,e),p(n,Cn,e),p(n,xs,e),j(Tn,n,e),$s=!0},p(n,[e]){const Fn={};e&128&&(Fn.$$scope={dirty:e,ctx:n}),!l&&e&1&&(l=!0,Fn.intersecting=n[0][0],Dn(()=>l=!1)),o.$set(Fn);const Nn={};e&128&&(Nn.$$scope={dirty:e,ctx:n}),!b&&e&1&&(b=!0,Nn.intersecting=n[0][1],Dn(()=>b=!1)),v.$set(Nn);const On={};e&128&&(On.$$scope={dirty:e,ctx:n}),!Ls&&e&1&&(Ls=!0,On.intersecting=n[0][2],Dn(()=>Ls=!1)),G.$set(On);const Rn={};e&128&&(Rn.$$scope={dirty:e,ctx:n}),!As&&e&1&&(As=!0,Rn.intersecting=n[0][3],Dn(()=>As=!1)),X.$set(Rn);const jn={};e&128&&(jn.$$scope={dirty:e,ctx:n}),!Hs&&e&1&&(Hs=!0,jn.intersecting=n[0][4],Dn(()=>Hs=!1)),Y.$set(jn)},i(n){$s||(q(s.$$.fragment,n),q(o.$$.fragment,n),q(v.$$.fragment,n),q(G.$$.fragment,n),q(X.$$.fragment,n),q(Y.$$.fragment,n),q(xn.$$.fragment,n),q(Pn.$$.fragment,n),q(Tn.$$.fragment,n),$s=!0)},o(n){z(s.$$.fragment,n),z(o.$$.fragment,n),z(v.$$.fragment,n),z(G.$$.fragment,n),z(X.$$.fragment,n),z(Y.$$.fragment,n),z(xn.$$.fragment,n),z(Pn.$$.fragment,n),z(Tn.$$.fragment,n),$s=!1},d(n){n&&(a(t),a(f),a(g),a(m),a(P),a(L),a(H),a(M),a(B),a(I),a(an),a(D),a(C),a(E),a(h),a(y),a(W),a(F),a(Gn),a(en),a(Xn),a(J),a(Yn),a(on),a(Jn),a(pn),a(Kn),a(cn),a(Qn),a(ln),a(Zn),a(un),a(ss),a(K),a(as),a(rn),a(ts),a(kn),a(os),a(ps),a(dn),a(cs),a(fn),a(ls),a(mn),a(us),a(rs),a(hn),a(ks),a(gn),a(ds),a(_n),a(ms),a(vn),a(hs),a(bn),a(_s),a(vs),a(wn),a(bs),a(Q),a(ws),a(Z),a(ys),a(Cn),a(xs)),V(s,n),V(o,n),V(v,n),V(G,n),V(X,n),V(Y,n),V(xn),V(Pn),V(Tn,n)}}}let ca="/Examples/External_Components/A_Wrapper_with_a_Button",la="/Examples/External_Components/A_Sorted_Table";function za(c,s,t){let o;ma(c,nn,b=>t(6,o=b)),qn(nn,o=[{title:"Replacing a Part List",visible:!1,ref:"#replacing-a-part-list-1"},{title:"Step 1: Create the Svelte Component",visible:!1,ref:"#step-1-create-the-svelte-component-2"},{title:"Step 2: Include in the Projection",visible:!1,ref:"#step-2-include-in-the-projection-3"},{title:"Step 3: Do the Admin",visible:!1,ref:"#step-3-do-the-admin-4"},{title:"Final Result",visible:!1,ref:"#final-result-5"}],o);let l=[];Ha(()=>{document.querySelectorAll("pre").forEach(P=>{const L=document.createElement("div");L.className="copy-prompt";const A=document.createElement("p");A.innerHTML="👆 Click to copy",A.className="copy-prompt-p";const H=document.createElement("img");H.src="/icons/copy-icon.svg",H.className="copy-prompt-img",L.appendChild(H),L.appendChild(A),P.appendChild(L),P.querySelector(".copy-prompt > p").addEventListener("click",M=>{Ba(P.querySelector("code").textContent),P.querySelector(".copy-prompt > p").innerHTML="Copied!",setTimeout(()=>{P.querySelector(".copy-prompt > p").innerHTML="👆 Click to copy"},1e3)})})});function f(b){c.$$.not_equal(l[0],b)&&(l[0]=b,t(0,l))}function g(b){c.$$.not_equal(l[1],b)&&(l[1]=b,t(0,l))}function i(b){c.$$.not_equal(l[2],b)&&(l[2]=b,t(0,l))}function m(b){c.$$.not_equal(l[3],b)&&(l[3]=b,t(0,l))}function v(b){c.$$.not_equal(l[4],b)&&(l[4]=b,t(0,l))}return c.$$.update=()=>{c.$$.dirty&1&&qn(nn,o[0].visible=l[0],o),c.$$.dirty&1&&qn(nn,o[1].visible=l[1],o),c.$$.dirty&1&&qn(nn,o[2].visible=l[2],o),c.$$.dirty&1&&qn(nn,o[3].visible=l[3],o),c.$$.dirty&1&&qn(nn,o[4].visible=l[4],o)},[l,f,g,i,m,v]}class Va extends va{constructor(s){super(),ba(this,s,za,qa,fa,{})}}function ia(c,s,t){const o=c.slice();return o[6]=s[t],o[8]=t,o}function ua(c,s,t){const o=c.slice();return o[6]=s[t],o[8]=t,o}function Da(c){let s,t;return{c(){s=u("img"),this.h()},l(o){s=r(o,"IMG",{class:!0,src:!0,alt:!0}),this.h()},h(){_(s,"class","page-toc-small-img"),_a(s.src,t="/icons/down-arrow.png")||_(s,"src",t),_(s,"alt","arrow down")},m(o,l){p(o,s,l)},d(o){o&&a(s)}}}function Wa(c){let s,t;return{c(){s=u("img"),this.h()},l(o){s=r(o,"IMG",{class:!0,src:!0,alt:!0}),this.h()},h(){_(s,"class","page-toc-small-img"),_a(s.src,t="/icons/upload.png")||_(s,"src",t),_(s,"alt","arrow up")},m(o,l){p(o,s,l)},d(o){o&&a(s)}}}function ra(c){let s,t,o=Ss(c[0]),l=[];for(let f=0;f<o.length;f+=1)l[f]=ka(ua(c,o,f));return{c(){s=u("div"),t=u("ul");for(let f=0;f<l.length;f+=1)l[f].c();this.h()},l(f){s=r(f,"DIV",{class:!0});var g=T(s);t=r(g,"UL",{class:!0});var i=T(t);for(let m=0;m<l.length;m+=1)l[m].l(i);i.forEach(a),g.forEach(a),this.h()},h(){_(t,"class","page-ul"),_(s,"class","toc-details")},m(f,g){p(f,s,g),$(s,t);for(let i=0;i<l.length;i+=1)l[i]&&l[i].m(t,null)},p(f,g){if(g&5){o=Ss(f[0]);let i;for(i=0;i<o.length;i+=1){const m=ua(f,o,i);l[i]?l[i].p(m,g):(l[i]=ka(m),l[i].c(),l[i].m(t,null))}for(;i<l.length;i+=1)l[i].d(1);l.length=o.length}},d(f){f&&a(s),ha(l,f)}}}function ka(c){let s,t,o=c[6].title+"",l,f,g;return{c(){s=u("li"),t=u("a"),l=An(o),g=k(),this.h()},l(i){s=r(i,"LI",{class:!0});var m=T(s);t=r(m,"A",{href:!0});var v=T(t);l=Hn(v,o),v.forEach(a),g=d(m),m.forEach(a),this.h()},h(){_(t,"href",f=c[6].ref),sn(t,"page-visible",c[8]===c[2]),sn(t,"page-nonvisible",c[8]!==c[2]),_(s,"class","page-toc-text")},m(i,m){p(i,s,m),$(s,t),$(t,l),$(s,g)},p(i,m){m&1&&o!==(o=i[6].title+"")&&ga(l,o),m&1&&f!==(f=i[6].ref)&&_(t,"href",f),m&4&&sn(t,"page-visible",i[8]===i[2]),m&4&&sn(t,"page-nonvisible",i[8]!==i[2])},d(i){i&&a(s)}}}function da(c){let s,t,o=c[6].title+"",l,f,g;return{c(){s=u("li"),t=u("a"),l=An(o),g=k(),this.h()},l(i){s=r(i,"LI",{class:!0});var m=T(s);t=r(m,"A",{href:!0});var v=T(t);l=Hn(v,o),v.forEach(a),g=d(m),m.forEach(a),this.h()},h(){_(t,"href",f=c[6].ref),sn(t,"page-visible",c[8]===c[2]),sn(t,"page-nonvisible",c[8]!==c[2]),_(s,"class","page-toc-text")},m(i,m){p(i,s,m),$(s,t),$(t,l),$(s,g)},p(i,m){m&1&&o!==(o=i[6].title+"")&&ga(l,o),m&1&&f!==(f=i[6].ref)&&_(t,"href",f),m&4&&sn(t,"page-visible",i[8]===i[2]),m&4&&sn(t,"page-nonvisible",i[8]!==i[2])},d(i){i&&a(s)}}}function Ua(c){let s,t,o,l="On this page ...",f,g,i,m,v,b,P,L,A,H,M="On this page",En,B,I,Mn,an;function D(h,y){return h[1]?Wa:Da}let U=D(c),N=U(c),C=c[1]&&ra(c);v=new Ia({}),P=new Va({});let E=Ss(c[0]),S=[];for(let h=0;h<E.length;h+=1)S[h]=da(ia(c,E,h));return{c(){s=u("div"),t=u("div"),o=u("p"),o.textContent=l,f=k(),g=u("button"),N.c(),i=k(),C&&C.c(),m=k(),O(v.$$.fragment),b=k(),O(P.$$.fragment),L=k(),A=u("nav"),H=u("h3"),H.textContent=M,En=k(),B=u("ul");for(let h=0;h<S.length;h+=1)S[h].c();this.h()},l(h){s=r(h,"DIV",{class:!0});var y=T(s);t=r(y,"DIV",{class:!0});var x=T(t);o=r(x,"P",{class:!0,"data-svelte-h":!0}),w(o)!=="svelte-1929lhs"&&(o.textContent=l),f=d(x),g=r(x,"BUTTON",{class:!0});var W=T(g);N.l(W),W.forEach(a),x.forEach(a),i=d(y),C&&C.l(y),m=d(y),R(v.$$.fragment,y),b=d(y),R(P.$$.fragment,y),y.forEach(a),L=d(h),A=r(h,"NAV",{class:!0});var F=T(A);H=r(F,"H3",{class:!0,"data-svelte-h":!0}),w(H)!=="svelte-1hgt7fi"&&(H.textContent=M),En=d(F),B=r(F,"UL",{class:!0});var tn=T(B);for(let zn=0;zn<S.length;zn+=1)S[zn].l(tn);tn.forEach(a),F.forEach(a),this.h()},h(){_(o,"class","page-toc-small-title"),_(g,"class","page-toc-small-expand-button"),_(t,"class","page-toc-small"),_(s,"class","page-main"),_(H,"class","page-toc-title"),_(B,"class","page-ul"),_(A,"class","page-toc")},m(h,y){p(h,s,y),$(s,t),$(t,o),$(t,f),$(t,g),N.m(g,null),$(s,i),C&&C.m(s,null),$(s,m),j(v,s,null),$(s,b),j(P,s,null),p(h,L,y),p(h,A,y),$(A,H),$(A,En),$(A,B);for(let x=0;x<S.length;x+=1)S[x]&&S[x].m(B,null);I=!0,Mn||(an=Ea(g,"click",c[4]),Mn=!0)},p(h,[y]){if(U!==(U=D(h))&&(N.d(1),N=U(h),N&&(N.c(),N.m(g,null))),h[1]?C?C.p(h,y):(C=ra(h),C.c(),C.m(s,m)):C&&(C.d(1),C=null),y&5){E=Ss(h[0]);let x;for(x=0;x<E.length;x+=1){const W=ia(h,E,x);S[x]?S[x].p(W,y):(S[x]=da(W),S[x].c(),S[x].m(B,null))}for(;x<S.length;x+=1)S[x].d(1);S.length=E.length}},i(h){I||(q(v.$$.fragment,h),q(P.$$.fragment,h),I=!0)},o(h){z(v.$$.fragment,h),z(P.$$.fragment,h),I=!1},d(h){h&&(a(s),a(L),a(A)),N.d(),C&&C.d(),V(v),V(P),ha(S,h),Mn=!1,an()}}}function Ga(c,s,t){let o,l;ma(c,nn,v=>t(0,l=v));let f=!1;function g(v){let b=o;for(let P=0;P<v.length;P++)if(v[P].visible)return P;return b}function i(){t(1,f=!f)}const m=()=>{i()};return c.$$.update=()=>{c.$$.dirty&1&&t(2,o=g(l))},[l,f,o,i,m]}class nt extends va{constructor(s){super(),ba(this,s,Ga,Ua,fa,{})}}export{nt as component};
//# sourceMappingURL=71.rmBFSNJq.js.map
