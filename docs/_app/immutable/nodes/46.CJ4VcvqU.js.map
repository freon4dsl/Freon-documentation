{"version":3,"file":"46.CJ4VcvqU.js","sources":["../../../../../../src/routes/Documentation/Interpreter_Framework/Understanding_the_Framework/SectionStore.ts","../../../../../../src/routes/Documentation/Interpreter_Framework/Understanding_the_Framework/PageContent.svelte","../../../../../../src/routes/Documentation/Interpreter_Framework/Understanding_the_Framework/+page.svelte"],"sourcesContent":["import { writable, type Writable } from 'svelte/store';\nimport type { Section } from '$lib/section/SectionType';\n\nexport const mySections: Writable<Section[]> = writable<Section[]>([]);\n","<script lang=\"ts\">\n\timport SectionComponent from '$lib/section/SectionComponent.svelte';\n\timport { mySections } from './SectionStore.js';\n\t$mySections = [\n\t\t{ title: 'The Freon Interpreter Framework', visible: false, ref: '#the-freon-interpreter-framework-1' },\n\t\t{ title: 'Freon‚Äôs Runtime Object Library', visible: false, ref: '#freons-runtime-object-library-2' },\n\t\t{ title: 'Interpreter Context', visible: false, ref: '#interpreter-context-3' },\n\t\t{ title: 'Running the Interpreter', visible: false, ref: '#running-the-interpreter-4' }\n\t];\n\tlet visible: boolean[] = [];\n\t$: $mySections[0].visible = visible[0];\n\t$: $mySections[1].visible = visible[1];\n\t$: $mySections[2].visible = visible[2];\n\t$: $mySections[3].visible = visible[3];\n\timport copy from 'copy-to-clipboard';\n\timport { onMount } from 'svelte';\n\n\t/**\n\t * This function will go through all the 'pre' elements\n\t * on the page and add a copy button to them.\n\t * Thanks to: https://slavbasharov.com/blog/adding-click-to-copy-code-markdown-blog\n\t */\n\tonMount(() => {\n\t\tconst codeBlocks = document.querySelectorAll('pre');\n\t\tcodeBlocks.forEach((block) => {\n\t\t\tconst copyPrompt = document.createElement('div');\n\t\t\tcopyPrompt.className = 'copy-prompt';\n\t\t\tconst copyPromptText = document.createElement('p');\n\t\t\tcopyPromptText.innerHTML = 'üëÜ Click to copy';\n\t\t\tcopyPromptText.className = 'copy-prompt-p';\n\t\t\tconst copyIcon = document.createElement('img');\n\t\t\tcopyIcon.src = '/icons/copy-icon.svg';\n\t\t\tcopyIcon.className = 'copy-prompt-img';\n\t\t\tcopyPrompt.appendChild(copyIcon);\n\t\t\tcopyPrompt.appendChild(copyPromptText);\n\t\t\tblock.appendChild(copyPrompt);\n\t\t\tblock.querySelector('.copy-prompt > p').addEventListener('click', (evt) => {\n\t\t\t\tcopy(block.querySelector('code').textContent);\n\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'Copied!';\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'üëÜ Click to copy';\n\t\t\t\t}, 1000);\n\t\t\t});\n\t\t});\n\t});\n\timport PrevNextSection from '$lib/prevNext/PrevNextSection.svelte';\n\n\tlet prevLink = '/Documentation/Interpreter_Framework/The_Expressions_DSL';\n\tlet nextLink = '/Documentation/Customizations';\n\n\timport Note from '$lib/notes/Note.svelte';\n\timport Figure from '$lib/figures/Figure.svelte';\n</script>\n\n<PrevNextSection {prevLink} {nextLink} />\n\n<SectionComponent tag=\"h1\" id=\"the-freon-interpreter-framework-1\" bind:intersecting={visible[0]}\n\t>The Freon Interpreter Framework</SectionComponent\n>\n<p>\n\tIn the generation step of Freon, a number of files are generated that together form the basis for an interpreter. As language engineer,\n\tthe only file that you need to change is a file named <code>&lt;&lt;LanguageName&gt;&gt;Interpreter.ts</code>, where\n\t<code>&lt;&lt;LanguageName&gt;&gt;</code> is, of course, the name of the DSL you are working on. In our <code>Expressions</code> example\n\tit is called\n\t<code>ExpressionsInterpreter.ts</code>.\n</p>\n<p>\n\tThe class that is defined in this file inherits from the class <code>&lt;&lt;LanguageName&gt;&gt;InterpreterBase</code>, which includes\n\tone evaluation function per concept defined in the language. By overriding the evaluation functions you can define which value is to be\n\tassociated with a certain AST node. The following is an example of an evaluation function in <code>ExpressionsInterpreterBase.ts</code>.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">// Expressions/src/freon/interpreter/gen/ExpressionsInterpreterBase.ts#L35-L37</span>\n\n<span class=\"token function\">evalNumberLiteralExpression</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> NumberLiteralExpression<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RtError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"evalNumberLiteralExpression is not defined\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<p>\n\tAll evaluation functions are similar. The first parameter is the node for which a value needs to be determined. The second parameter, of\n\ttype <code>InterpreterContext</code>, provides the\n\t<a href=\"/Documentation/Interpreter_Framework/Understanding_the_Framework#interpreter-context-3\">context</a>\n\tin which the expression should be evaluated. This context is used to store values of constants, variables, etc. so they are available for\n\tuse in the function. Initially, the base class functions throw an exception when called, as shown above, but when overridden, they should\n\tresult in an object of type <code>RtObject</code> (short for ‚Äúruntime object‚Äù), from\n\t<a href=\"/Documentation/Interpreter_Framework/Understanding_the_Framework#freons-runtime-object-library-2\"\n\t\t>Freon‚Äôs Runtime Object Library</a\n\t>.\n</p>\n<p>Here is an example of how <code>evalNumberLiteralExpression</code> is overridden:</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">// Expressions/src/custom/interpreter/ExpressionsInterpreter.ts#L36-L38</span>\n\noverride <span class=\"token function\">evalNumberLiteralExpression</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> NumberLiteralExpression<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RtNumber</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<SectionComponent tag=\"h2\" id=\"freons-runtime-object-library-2\" bind:intersecting={visible[1]}\n\t>Freon‚Äôs Runtime Object Library</SectionComponent\n>\n<p>\n\tWe have chosen to always have an <code>RtObject</code> (or one of its subclasses) as the result of interpreting, to make sure that the\n\tmodel (M1) and runtime (M0) levels are always strictly separated. Of course there can be references from <code>RtObjects</code> to instances\n\tin the model, e.g. for traceability. Freon provides a set of runtime classes that can be used out-of-the-box. These include:\n</p>\n<ul>\n\t<li><strong><code>RtNumber</code></strong>: Represents numeric values.</li>\n\t<li><strong><code>RtString</code></strong>: Represents strings.</li>\n\t<li><strong><code>RtBoolean</code></strong>: Represents boolean values.</li>\n\t<li><strong><code>RtArray</code></strong>: Represents arrays.</li>\n\t<li><strong><code>RtError</code></strong>: Represents errors.</li>\n</ul>\n<p>Often you create domain-specific runtime classes that inherit from these foundational classes.</p>\n<Note>\n\t<svelte:fragment slot=\"header\">Meta Levels</svelte:fragment>\n\t<svelte:fragment slot=\"content\">\n\t\tIn Domain Specific language we distinguish the following levels:\n\t\t<ol>\n\t\t\t<li>\n\t\t\t\tThe language definition, defining which concepts are available. Often called the M2 level. In Freon this is represented by the\n\t\t\t\tlanguage definition in the .ast files. In Java this would be the Java Language Definition.\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\tThe model, which contains instances of the language concepts, called the M1 level. In Freon this is what you edit in a Freon\n\t\t\t\tapplication. In Java this would be a Java program consisting of Java classes.\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\tThe runtime level, values resulting from executing or interpreting the model, called the M0 level. In Freon this is the result of\n\t\t\t\tthe interpreter running, or it would be the result of executing code generated from the model (M1) level. For Java this is the\n\t\t\t\texecution of a Java program.\n\t\t\t</li>\n\t\t</ol>\n\t</svelte:fragment></Note\n>\n<SectionComponent tag=\"h2\" id=\"interpreter-context-3\" bind:intersecting={visible[2]}>Interpreter Context</SectionComponent>\n<p>Every node in the AST is evaluated within a certain context, represented by the <code>ctx: InterpreterContext</code> parameter.</p>\n<p>\n\tFor instance, if in the model we refer to a parameter in the body of a function, we need to know the value of the parameter to be able to\n\tcalculate the value of the body. This is done though the context as follows:\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">// Expressions/src/custom/interpreter/ExpressionsInterpreter.ts#L56-L65</span>\n\noverride <span class=\"token function\">evalFunctionCallExpression</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> FunctionCallExpression<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> calledFunction <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>$calledFunction<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> functionContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterpreterContext</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> argumentValue <span class=\"token operator\">=</span> main<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Add the parameter to the context with the value of the evaluated argument</span>\n        functionContext<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>calledFunction<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> argumentValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> main<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>calledFunction<span class=\"token punctuation\">,</span> functionContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<p>\n\tThe evaluation of the function call expression has two parts. In the first part a new <code>InterpreterContext</code> is created with the original\n\tcontext as its parent. This way everything in the original context is available as well.\n</p>\n<p>\n\tThen all the arguments of the function call are evaluated and their value is stored in the context with the corresponding parameter as its\n\tkey.\n</p>\n<p>Now the function is evaluated <code>main.evaluate(calledFunction, functionContext)</code> with the new context as parameter.</p>\n<p>\n\tIf we come across a <code>ParameterRef</code> inside the evaluation of the function body, this evaluation can simply lookup the value of the\n\tparameter:\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token comment\">// Expressions/src/custom/interpreter/ExpressionsInterpreter.ts#L71-L73</span>\n\noverride <span class=\"token function\">evalParameterRef</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> ParameterRef<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> InterpreterContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RtObject <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>$parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<p>Note that the value of the parameter lookup will be different for different calls to the function. Which is exactly what we need.</p>\n<SectionComponent tag=\"h2\" id=\"running-the-interpreter-4\" bind:intersecting={visible[3]}>Running the Interpreter</SectionComponent>\n<Note>\n\t<svelte:fragment slot=\"header\">The selected node is the one that is interpreted</svelte:fragment>\n\t<svelte:fragment slot=\"content\">\n\t\tWhen running the interpreter from the <code>Edit</code> menu, the interpreter will try to evaluate the currently selected node. You will\n\t\tsee a different result in the Interpreter tab for different nodes. Often the interpretation cannot be done completely, because some context\n\t\tis needed. It is up to the creator of the interpreter to augment this.\n\t</svelte:fragment></Note\n>\n<p>\n\tThe following shows the result of running the interpreter for our Expressions example. The model has one function <code>range</code> and\n\ttwo expressions. When running the interpreter from the <code>Edit</code> menu in the Freon editor, a trace of the evaluation is shown in\n\tthe Interpreter tab. In the trace you can find two Function evaluations. At the end of both lines<br />\n\tthe context is shown with different values for the <code>start</code> and <code>end</code> parameters for each function call.\n</p>\n<Figure imageName={'interpreter/model-output.png'} caption={'Expressions Model in the Editor'} figureNumber={2} />\n\n<PrevNextSection {prevLink} {nextLink} />\n","<script lang=\"ts\">\n\timport { mySections } from './SectionStore.js';\n\timport type { Section } from '$lib/section/SectionType.js';\n\timport PageContent from './PageContent.svelte';\n\timport Breadcrumb from '$lib/breadcrumbs/Breadcrumb.svelte';\n\n\tlet showDetails: boolean = false;\n\t$: current = getCurrent($mySections);\n\n\tfunction getCurrent(internalSections: Section[]): number {\n\t\tlet previous = current;\n\t\tfor (let i = 0; i < internalSections.length; i++) {\n\t\t\tif (internalSections[i].visible) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn previous;\n\t}\n\tfunction toggleTocDetails() {\n\t\tshowDetails = !showDetails;\n\t}\n</script>\n\n<div class=\"page-main\">\n\t<div class=\"page-toc-small\">\n\t\t<p class=\"page-toc-small-title\">On this page ...</p>\n\t\t<button\n\t\t\tclass=\"page-toc-small-expand-button\"\n\t\t\ton:click={() => {\n\t\t\t\ttoggleTocDetails();\n\t\t\t}}\n\t\t>\n\t\t\t{#if showDetails}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/upload.png\" alt=\"arrow up\" />\n\t\t\t{:else}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/down-arrow.png\" alt=\"arrow down\" />\n\t\t\t{/if}\n\t\t</button>\n\t</div>\n\t{#if showDetails}\n\t\t<div class=\"toc-details\">\n\t\t\t<ul class=\"page-ul\">\n\t\t\t\t{#each $mySections as sec, index}\n\t\t\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t\t\t{sec.title}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t{/each}\n\t\t\t</ul>\n\t\t</div>\n\t{/if}\n\n\t<Breadcrumb />\n\t<PageContent />\n</div>\n\n<nav class=\"page-toc\">\n\t<h3 class=\"page-toc-title\">On this page</h3>\n\t<ul class=\"page-ul\">\n\t\t{#each $mySections as sec, index}\n\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t{sec.title}\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n</nav>\n"],"names":["mySections","writable","insert_hydration","target","ol","anchor","code","ctx","sectioncomponent0_props","sectioncomponent1_props","sectioncomponent2_props","sectioncomponent3_props","p0","p1","pre0","p2","p3","pre1","p4","ul","p5","p6","p7","pre2","p8","p9","p10","p11","pre3","p12","p13","sectioncomponent0_changes","sectioncomponent1_changes","sectioncomponent2_changes","sectioncomponent3_changes","prevLink","nextLink","$mySections","visible","onMount","block","copyPrompt","copyPromptText","copyIcon","evt","copy","$$self","value","set_store_value","img","i","div","append_hydration","t0_value","attr","a","a_href_value","toggle_class","li","dirty","set_data","t0","create_if_block_1","create_if_block","div1","div0","p","button","nav","h3","showDetails","getCurrent","internalSections","previous","current","toggleTocDetails","$$invalidate"],"mappings":"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"}