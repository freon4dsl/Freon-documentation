{"version":3,"file":"75.CGflV9I6.js","sources":["../../../../../../src/routes/Examples/Generic_Types/The_Typer_Definition/SectionStore.ts","../../../../../../src/routes/Examples/Generic_Types/The_Typer_Definition/PageContent.svelte","../../../../../../src/routes/Examples/Generic_Types/The_Typer_Definition/+page.svelte"],"sourcesContent":["import { writable, type Writable } from 'svelte/store';\nimport type { Section } from '$lib/section/SectionType';\n\nexport const mySections: Writable<Section[]> = writable<Section[]>([]);\n","<script lang=\"ts\">\n\timport SectionComponent from '$lib/section/SectionComponent.svelte';\n\timport { mySections } from './SectionStore.js';\n\t$mySections = [\n\t\t{ title: 'Generic Types: an Example Typer Definition', visible: false, ref: '#generic-types-an-example-typer-definition-1' },\n\t\t{ title: 'The Typer Definition of the Example Language', visible: false, ref: '#the-typer-definition-of-the-example-language-2' },\n\t\t{ title: 'The Complete Typer Definition', visible: false, ref: '#the-complete-typer-definition-3' }\n\t];\n\tlet visible: boolean[] = [];\n\t$: $mySections[0].visible = visible[0];\n\t$: $mySections[1].visible = visible[1];\n\t$: $mySections[2].visible = visible[2];\n\timport copy from 'copy-to-clipboard';\n\timport { onMount } from 'svelte';\n\n\t/**\n\t * This function will go through all the 'pre' elements\n\t * on the page and add a copy button to them.\n\t * Thanks to: https://slavbasharov.com/blog/adding-click-to-copy-code-markdown-blog\n\t */\n\tonMount(() => {\n\t\tconst codeBlocks = document.querySelectorAll('pre');\n\t\tcodeBlocks.forEach((block) => {\n\t\t\tconst copyPrompt = document.createElement('div');\n\t\t\tcopyPrompt.className = 'copy-prompt';\n\t\t\tconst copyPromptText = document.createElement('p');\n\t\t\tcopyPromptText.innerHTML = 'ðŸ‘† Click to copy';\n\t\t\tcopyPromptText.className = 'copy-prompt-p';\n\t\t\tconst copyIcon = document.createElement('img');\n\t\t\tcopyIcon.src = '/icons/copy-icon.svg';\n\t\t\tcopyIcon.className = 'copy-prompt-img';\n\t\t\tcopyPrompt.appendChild(copyIcon);\n\t\t\tcopyPrompt.appendChild(copyPromptText);\n\t\t\tblock.appendChild(copyPrompt);\n\t\t\tblock.querySelector('.copy-prompt > p').addEventListener('click', (evt) => {\n\t\t\t\tcopy(block.querySelector('code').textContent);\n\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'Copied!';\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'ðŸ‘† Click to copy';\n\t\t\t\t}, 1000);\n\t\t\t});\n\t\t});\n\t});\n\timport PrevNextSection from '$lib/prevNext/PrevNextSection.svelte';\n\n\tlet prevLink = '/Examples/Generic_Types/The_TyperExample_DSL';\n\tlet nextLink = '/Examples/External_Components';\n</script>\n\n<PrevNextSection {prevLink} {nextLink} />\n<SectionComponent tag=\"h1\" id=\"generic-types-an-example-typer-definition-1\" bind:intersecting={visible[0]}\n\t>Generic Types: an Example Typer Definition</SectionComponent\n>\n<p>This example shows how generic types and unit of measurements can be defined.</p>\n<SectionComponent tag=\"h2\" id=\"the-typer-definition-of-the-example-language-2\" bind:intersecting={visible[1]}\n\t>The Typer Definition of the Example Language</SectionComponent\n>\n<p>\n\tOnce the structure of the example language is defined, we are able to focus on the typer definition. Because types in Freon do not reside\n\twithin the AST, but are completely separate from it, we need to associate a type concept with each of our AST concepts.\n</p>\n<h3 id=\"the-type-concepts-1\">The Type Concepts</h3>\n<p>\n\tFirst, we define a type concept that corresponds with our type declaration called <em>GenericType</em>, and one that corresponds with\n\t<em>UnitOfMeasurement</em>. They are quite similar to their AST counterparts, but note that here we use <strong>FreType</strong> as type for\n\tthe property. We want to build a structure of type concepts, not of AST nodes!\n</p>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// TyperExample/src/defs/projectY.type#L6-L14\n</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TT_GenericType</span> &#123;\n    <span class=\"token keyword\">base</span>: <span class=\"token class-name\">FreType</span>;\n    kind: <span class=\"token class-name\">GenericKind</span>;\n&#125;\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TT_MeasurementType</span> &#123;\n    <span class=\"token keyword\">base</span>: <span class=\"token class-name\">FreType</span>;\n    unit: <span class=\"token class-name\">UnitKind</span>;\n&#125;</code>`}</pre>\n<h3 id=\"the-infertype-rules-2\">The Infertype Rules</h3>\n<p>\n\tNext, we associate the AST nodes with the type concepts, using infertype rules. When invoked, these rules will create a new instance of\n\tthe type concepts.\n</p>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// TyperExample/src/defs/projectY.type#L34-L46\n</span>\n<span class=\"token class-name\">GenericType</span> &#123;\n    <span class=\"token keyword\">infertype</span> <span class=\"token class-name\">TT_GenericType</span> &#123;\n        <span class=\"token keyword\">base</span>: <span class=\"token class-name\">typeof</span>(<span class=\"token variable\">self</span>.baseType),\n        kind: <span class=\"token class-name\">self</span>.kind\n    &#125;;\n&#125;\n\n<span class=\"token class-name\">UnitOfMeasurement</span> &#123;\n    <span class=\"token keyword\">infertype</span> <span class=\"token class-name\">TT_MeasurementType</span> &#123;\n        <span class=\"token keyword\">base</span>: <span class=\"token class-name\">typeof</span>(<span class=\"token variable\">self</span>.baseType),\n        unit: <span class=\"token class-name\">self</span>.unit\n    &#125;;\n&#125;</code>`}</pre>\n<h3 id=\"the-conforms-and-equals-rules-3\">The Conforms And Equals Rules</h3>\n<p>\n\tTo be able to compare the types of expressions and of type declarations, we need to state the <em>equalsto</em> and/or <em>conformsto</em>\n\trules.\n</p>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// TyperExample/src/defs/projectY.type#L91-L118\n</span>\n<span class=\"token class-name\">TT_GenericType</span> &#123;\n    <span class=\"token keyword\">equalsto</span> x:<span class=\"token class-name\">TT_GenericType</span> <span class=\"token class-name\">where</span> &#123;\n            x.<span class=\"token keyword\">base</span> <span class=\"token keyword\">equalsto</span> <span class=\"token variable\">self</span>.<span class=\"token keyword\">base</span>;\n            x.kind <span class=\"token keyword\">equalsto</span> <span class=\"token variable\">self</span>.kind;\n        &#125;;\n    <span class=\"token keyword\">conformsto</span> other:<span class=\"token class-name\">TT_GenericType</span> <span class=\"token class-name\">where</span> &#123;\n            <span class=\"token comment\">// both conditions must be true\n</span>            <span class=\"token variable\">self</span>.<span class=\"token keyword\">base</span> <span class=\"token keyword\">conformsto</span> other.<span class=\"token keyword\">base</span>;\n            <span class=\"token variable\">self</span>.kind <span class=\"token keyword\">conformsto</span> other.kind;\n        &#125;;\n&#125;\n\n<span class=\"token class-name\">GenericKind</span> &#123;\n    Set <span class=\"token keyword\">conformsto</span> Collection;\n    Sequence <span class=\"token keyword\">conformsto</span> Collection;\n    Bag <span class=\"token keyword\">conformsto</span> Collection;\n&#125;\n\n<span class=\"token class-name\">TT_MeasurementType</span> &#123;\n    <span class=\"token keyword\">equalsto</span> aap:<span class=\"token class-name\">TT_MeasurementType</span> <span class=\"token class-name\">where</span> &#123;\n            aap.<span class=\"token keyword\">base</span> <span class=\"token keyword\">equalsto</span> <span class=\"token variable\">self</span>.<span class=\"token keyword\">base</span>;\n            aap.unit <span class=\"token keyword\">equalsto</span> <span class=\"token variable\">self</span>.unit;\n        &#125;;\n    <span class=\"token keyword\">conformsto</span> rr:<span class=\"token class-name\">TT_MeasurementType</span> <span class=\"token class-name\">where</span> &#123;\n            <span class=\"token variable\">self</span>.<span class=\"token keyword\">base</span> <span class=\"token keyword\">conformsto</span> rr.<span class=\"token keyword\">base</span>;\n            <span class=\"token variable\">self</span>.unit <span class=\"token keyword\">equalsto</span> rr.unit;\n        &#125;;\n&#125;</code>`}</pre>\n<SectionComponent tag=\"h2\" id=\"the-complete-typer-definition-3\" bind:intersecting={visible[2]}\n\t>The Complete Typer Definition</SectionComponent\n>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// TyperExample/src/defs/projectY.type\n</span>\ntyper\n\n<span class=\"token comment\">// What are types?\n</span><span class=\"token class-name\">istype</span> &#123; TopType &#125;\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TT_GenericType</span> &#123;\n    <span class=\"token keyword\">base</span>: <span class=\"token class-name\">FreType</span>;\n    kind: <span class=\"token class-name\">GenericKind</span>;\n&#125;\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TT_MeasurementType</span> &#123;\n    <span class=\"token keyword\">base</span>: <span class=\"token class-name\">FreType</span>;\n    unit: <span class=\"token class-name\">UnitKind</span>;\n&#125;\n\n<span class=\"token comment\">// Which concepts have a type?\n</span><span class=\"token class-name\">hastype</span> &#123; Exp, TypeUsage &#125;\n\n<span class=\"token comment\">// What are the top and bottom types?\n</span><span class=\"token class-name\">anytype</span> &#123;\n    <span class=\"token keyword\">conformsto</span> PredefinedType:<span class=\"token class-name\">ANY</span>; <span class=\"token comment\">// PredefinedType:ANY is the least specific type\n</span>&#125;\n\n<span class=\"token class-name\">PredefinedType</span> &#123;\n    PredefinedType:<span class=\"token class-name\">NULL</span> <span class=\"token keyword\">conformsto</span> anytype; <span class=\"token comment\">// PredefinedType:NULL is the most specific type\n</span>    NUMBER <span class=\"token keyword\">conformsto</span> STRING;\n&#125;\n\n<span class=\"token comment\">// Which type does an expression have?\n</span><span class=\"token class-name\">TypeRef</span> &#123;\n    <span class=\"token keyword\">infertype</span> <span class=\"token variable\">self</span>.<span class=\"token keyword\">type</span>;\n&#125;\n\n<span class=\"token class-name\">GenericType</span> &#123;\n    <span class=\"token keyword\">infertype</span> <span class=\"token class-name\">TT_GenericType</span> &#123;\n        <span class=\"token keyword\">base</span>: <span class=\"token class-name\">typeof</span>(<span class=\"token variable\">self</span>.baseType),\n        kind: <span class=\"token class-name\">self</span>.kind\n    &#125;;\n&#125;\n\n<span class=\"token class-name\">UnitOfMeasurement</span> &#123;\n    <span class=\"token keyword\">infertype</span> <span class=\"token class-name\">TT_MeasurementType</span> &#123;\n        <span class=\"token keyword\">base</span>: <span class=\"token class-name\">typeof</span>(<span class=\"token variable\">self</span>.baseType),\n        unit: <span class=\"token class-name\">self</span>.unit\n    &#125;;\n&#125;\n\n<span class=\"token class-name\">NumberLiteral</span> &#123;\n    <span class=\"token keyword\">infertype</span> PredefinedType:<span class=\"token class-name\">NUMBER</span>;\n&#125;\n\n<span class=\"token class-name\">StringLiteral</span> &#123;\n    <span class=\"token keyword\">infertype</span> PredefinedType:<span class=\"token class-name\">STRING</span>;\n&#125;\n\n<span class=\"token class-name\">BooleanLiteral</span> &#123;\n    <span class=\"token keyword\">infertype</span> PredefinedType:<span class=\"token class-name\">BOOLEAN</span>;\n&#125;\n\n<span class=\"token class-name\">NamedExp</span> &#123;\n    <span class=\"token keyword\">infertype</span> <span class=\"token variable\">self</span>.myType;\n&#125;\n\n<span class=\"token class-name\">PlusExp</span> &#123;\n    <span class=\"token keyword\">infertype</span> commonSuperType(<span class=\"token variable\">self</span>.left, <span class=\"token variable\">self</span>.right);\n&#125;\n\n<span class=\"token class-name\">UnitLiteral</span> &#123;\n    <span class=\"token comment\">// 62 kilogram, or 112 miles\n</span>    <span class=\"token keyword\">infertype</span> <span class=\"token class-name\">TT_MeasurementType</span> &#123;\n                  <span class=\"token keyword\">base</span>: <span class=\"token class-name\">typeof</span>(<span class=\"token variable\">self</span>.inner),\n                  unit: <span class=\"token class-name\">self</span>.unit\n              &#125;;\n&#125;\n\n<span class=\"token class-name\">GenericLiteral</span> &#123;\n    <span class=\"token comment\">// Set&#123; 12, 14, 16, 18 &#125;\n</span>    <span class=\"token keyword\">infertype</span> <span class=\"token class-name\">TT_GenericType</span> &#123;\n        <span class=\"token keyword\">base</span>: <span class=\"token class-name\">typeof</span>(<span class=\"token variable\">self</span>.content),\n        kind: <span class=\"token class-name\">self</span>.kind\n    &#125;;\n&#125;\n\n<span class=\"token comment\">// Which types are 'equal' to each other?\n</span><span class=\"token class-name\">NamedType</span> &#123;\n    <span class=\"token keyword\">equalsto</span> aa:<span class=\"token class-name\">NamedType</span> <span class=\"token class-name\">where</span> &#123;\n            aa.name <span class=\"token keyword\">equalsto</span> <span class=\"token variable\">self</span>.name;\n        &#125;;\n&#125;\n\n<span class=\"token class-name\">TT_GenericType</span> &#123;\n    <span class=\"token keyword\">equalsto</span> x:<span class=\"token class-name\">TT_GenericType</span> <span class=\"token class-name\">where</span> &#123;\n            x.<span class=\"token keyword\">base</span> <span class=\"token keyword\">equalsto</span> <span class=\"token variable\">self</span>.<span class=\"token keyword\">base</span>;\n            x.kind <span class=\"token keyword\">equalsto</span> <span class=\"token variable\">self</span>.kind;\n        &#125;;\n    <span class=\"token keyword\">conformsto</span> other:<span class=\"token class-name\">TT_GenericType</span> <span class=\"token class-name\">where</span> &#123;\n            <span class=\"token comment\">// both conditions must be true\n</span>            <span class=\"token variable\">self</span>.<span class=\"token keyword\">base</span> <span class=\"token keyword\">conformsto</span> other.<span class=\"token keyword\">base</span>;\n            <span class=\"token variable\">self</span>.kind <span class=\"token keyword\">conformsto</span> other.kind;\n        &#125;;\n&#125;\n\n<span class=\"token class-name\">GenericKind</span> &#123;\n    Set <span class=\"token keyword\">conformsto</span> Collection;\n    Sequence <span class=\"token keyword\">conformsto</span> Collection;\n    Bag <span class=\"token keyword\">conformsto</span> Collection;\n&#125;\n\n<span class=\"token class-name\">TT_MeasurementType</span> &#123;\n    <span class=\"token keyword\">equalsto</span> aap:<span class=\"token class-name\">TT_MeasurementType</span> <span class=\"token class-name\">where</span> &#123;\n            aap.<span class=\"token keyword\">base</span> <span class=\"token keyword\">equalsto</span> <span class=\"token variable\">self</span>.<span class=\"token keyword\">base</span>;\n            aap.unit <span class=\"token keyword\">equalsto</span> <span class=\"token variable\">self</span>.unit;\n        &#125;;\n    <span class=\"token keyword\">conformsto</span> rr:<span class=\"token class-name\">TT_MeasurementType</span> <span class=\"token class-name\">where</span> &#123;\n            <span class=\"token variable\">self</span>.<span class=\"token keyword\">base</span> <span class=\"token keyword\">conformsto</span> rr.<span class=\"token keyword\">base</span>;\n            <span class=\"token variable\">self</span>.unit <span class=\"token keyword\">equalsto</span> rr.unit;\n        &#125;;\n&#125;\n</code>`}</pre>\n\n<PrevNextSection {prevLink} {nextLink} />\n","<script lang=\"ts\">\n\timport { mySections } from './SectionStore.js';\n\timport type { Section } from '$lib/section/SectionType.js';\n\timport PageContent from './PageContent.svelte';\n\timport Breadcrumb from '$lib/breadcrumbs/Breadcrumb.svelte';\n\n\tlet showDetails: boolean = false;\n\t$: current = getCurrent($mySections);\n\n\tfunction getCurrent(internalSections: Section[]): number {\n\t\tlet previous = current;\n\t\tfor (let i = 0; i < internalSections.length; i++) {\n\t\t\tif (internalSections[i].visible) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn previous;\n\t}\n\tfunction toggleTocDetails() {\n\t\tshowDetails = !showDetails;\n\t}\n</script>\n\n<div class=\"page-main\">\n\t<div class=\"page-toc-small\">\n\t\t<p class=\"page-toc-small-title\">On this page ...</p>\n\t\t<button\n\t\t\tclass=\"page-toc-small-expand-button\"\n\t\t\ton:click={() => {\n\t\t\t\ttoggleTocDetails();\n\t\t\t}}\n\t\t>\n\t\t\t{#if showDetails}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/upload.png\" alt=\"arrow up\" />\n\t\t\t{:else}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/down-arrow.png\" alt=\"arrow down\" />\n\t\t\t{/if}\n\t\t</button>\n\t</div>\n\t{#if showDetails}\n\t\t<div class=\"toc-details\">\n\t\t\t<ul class=\"page-ul\">\n\t\t\t\t{#each $mySections as sec, index}\n\t\t\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t\t\t{sec.title}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t{/each}\n\t\t\t</ul>\n\t\t</div>\n\t{/if}\n\n\t<Breadcrumb />\n\t<PageContent />\n</div>\n\n<nav class=\"page-toc\">\n\t<h3 class=\"page-toc-title\">On this page</h3>\n\t<ul class=\"page-ul\">\n\t\t{#each $mySections as sec, index}\n\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t{sec.title}\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n</nav>\n"],"names":["mySections","writable","ctx","sectioncomponent0_props","sectioncomponent1_props","sectioncomponent2_props","insert_hydration","target","p0","anchor","p1","h30","p2","pre0","h31","p3","pre1","h32","p4","pre2","pre3","sectioncomponent0_changes","sectioncomponent1_changes","sectioncomponent2_changes","prevLink","nextLink","$mySections","visible","onMount","block","copyPrompt","copyPromptText","copyIcon","evt","copy","$$self","value","set_store_value","img","div","append_hydration","ul","i","t0_value","attr","a","a_href_value","toggle_class","li","dirty","set_data","t0","create_if_block_1","create_if_block","div1","div0","p","button","nav","h3","showDetails","getCurrent","internalSections","previous","current","toggleTocDetails","$$invalidate"],"mappings":"mgBAGa,MAAAA,GAAkCC,GAAoB,EAAE,uCCgDnE,4CAA0C,eAA1C,4CAA0C,wEAI1C,8CAA4C,eAA5C,8CAA4C,wEA+E5C,+BAA6B,eAA7B,+BAA6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8LApFgEC,KAAQ,CAAC,IAAA,SAATC,GAAA,aAAAD,KAAQ,CAAC,iMAINA,KAAQ,CAAC,IAAA,SAATE,GAAA,aAAAF,KAAQ,CAAC,kLA+ExB,OAAAA,KAAQ,CAAC,IAAA,SAATG,GAAA,aAAAH,KAAQ,CAAC,89DAhF5FI,EAAmFC,EAAAC,EAAAC,CAAA,6BAInFH,EAGGC,EAAAG,EAAAD,CAAA,WACHH,EAAkDC,EAAAI,EAAAF,CAAA,WAClDH,EAIGC,EAAAK,EAAAH,CAAA,WACHH,EAUoBC,EAAAM,EAAAJ,CAAA,oBACpBH,EAAsDC,EAAAO,EAAAL,CAAA,WACtDH,EAGGC,EAAAQ,EAAAN,CAAA,WACHH,EAcoBC,EAAAS,EAAAP,CAAA,sBACpBH,EAA0EC,EAAAU,EAAAR,CAAA,YAC1EH,EAGGC,EAAAW,EAAAT,CAAA,YACHH,EA6BoBC,EAAAY,EAAAV,CAAA,0CAIpBH,EAwHcC,EAAAa,EAAAX,CAAA,8GA9MiFY,GAAA,aAAAnB,KAAQ,CAAC,yFAINoB,GAAA,aAAApB,KAAQ,CAAC,2FA+ExBqB,GAAA,aAAArB,KAAQ,CAAC,wcAxFvFsB,GAAW,+CACXC,GAAW,oFA3CfC,EAAA,EACG,MAAO,6CAA8C,QAAS,GAAO,IAAK,iDAC1E,MAAO,+CAAgD,QAAS,GAAO,IAAK,oDAC5E,MAAO,gCAAiC,QAAS,GAAO,IAAK,wCAE5D,IAAAC,EAAA,CAAA,EAYJC,GAAA,IAAA,CACoB,SAAS,iBAAiB,KAAK,EACvC,QAASC,GAAA,OACbC,EAAa,SAAS,cAAc,KAAK,EAC/CA,EAAW,UAAY,oBACjBC,EAAiB,SAAS,cAAc,GAAG,EACjDA,EAAe,UAAY,mBAC3BA,EAAe,UAAY,sBACrBC,EAAW,SAAS,cAAc,KAAK,EAC7CA,EAAS,IAAM,uBACfA,EAAS,UAAY,kBACrBF,EAAW,YAAYE,CAAQ,EAC/BF,EAAW,YAAYC,CAAc,EACrCF,EAAM,YAAYC,CAAU,EAC5BD,EAAM,cAAc,kBAAkB,EAAE,iBAAiB,QAAUI,GAAA,CAClEC,GAAKL,EAAM,cAAc,MAAM,EAAE,WAAW,EAC5CA,EAAM,cAAc,kBAAkB,EAAE,UAAY,UACpD,gBACCA,EAAM,cAAc,kBAAkB,EAAE,UAAY,oBAClD,yBAWwFM,EAAA,GAAA,UAAAR,EAAQ,CAAC,EAAAS,CAAA,IAATT,EAAQ,CAAC,EAAAS,wBAIND,EAAA,GAAA,UAAAR,EAAQ,CAAC,EAAAS,CAAA,IAATT,EAAQ,CAAC,EAAAS,wBA+ExBD,EAAA,GAAA,UAAAR,EAAQ,CAAC,EAAAS,CAAA,IAATT,EAAQ,CAAC,EAAAS,gDA5H3FC,GAAArC,GAAG0B,EAAY,CAAC,EAAE,QAAUC,EAAQ,CAAC,EAAAD,CAAA,gBACrCW,GAAArC,GAAG0B,EAAY,CAAC,EAAE,QAAUC,EAAQ,CAAC,EAAAD,CAAA,gBACrCW,GAAArC,GAAG0B,EAAY,CAAC,EAAE,QAAUC,EAAQ,CAAC,EAAAD,CAAA,kbCwBlCpB,EAA8EC,EAAA+B,EAAA7B,CAAA,gPAF9EH,EAAwEC,EAAA+B,EAAA7B,CAAA,8CASjEP,EAAW,CAAA,CAAA,uBAAhB,OAAI,GAAA,sTAFRI,EAUKC,EAAAgC,EAAA9B,CAAA,EATJ+B,EAQID,EAAAE,CAAA,wEAPIvC,EAAW,CAAA,CAAA,oBAAhB,OAAIwC,GAAA,EAAA,mHAAJ,uDAGEC,EAAAzC,KAAI,MAAK,+LAD+E0C,EAAAC,EAAA,OAAAC,EAAA5C,KAAI,GAAG,EAA1E6C,EAAAF,EAAA,eAAA3C,OAAUA,EAAO,CAAA,CAAA,EAAyB6C,EAAAF,EAAA,kBAAA3C,OAAUA,EAAO,CAAA,CAAA,uCADnFI,EAIIC,EAAAyC,EAAAvC,CAAA,EAHH+B,EAEGQ,EAAAH,CAAA,wBADDI,EAAA,GAAAN,KAAAA,EAAAzC,KAAI,MAAK,KAAAgD,GAAAC,EAAAR,CAAA,EAD+EM,EAAA,GAAAH,KAAAA,EAAA5C,KAAI,yBAAvE6C,EAAAF,EAAA,eAAA3C,OAAUA,EAAO,CAAA,CAAA,OAAyB6C,EAAAF,EAAA,kBAAA3C,OAAUA,EAAO,CAAA,CAAA,yCAmBlFyC,EAAAzC,KAAI,MAAK,+LAD+E0C,EAAAC,EAAA,OAAAC,EAAA5C,KAAI,GAAG,EAA1E6C,EAAAF,EAAA,eAAA3C,OAAUA,EAAO,CAAA,CAAA,EAAyB6C,EAAAF,EAAA,kBAAA3C,OAAUA,EAAO,CAAA,CAAA,uCADnFI,EAIIC,EAAAyC,EAAAvC,CAAA,EAHH+B,EAEGQ,EAAAH,CAAA,wBADDI,EAAA,GAAAN,KAAAA,EAAAzC,KAAI,MAAK,KAAAgD,GAAAC,EAAAR,CAAA,EAD+EM,EAAA,GAAAH,KAAAA,EAAA5C,KAAI,yBAAvE6C,EAAAF,EAAA,eAAA3C,OAAUA,EAAO,CAAA,CAAA,OAAyB6C,EAAAF,EAAA,kBAAA3C,OAAUA,EAAO,CAAA,CAAA,wIA9B9EA,EAAW,CAAA,EAAAkD,0BAOblD,EAAW,CAAA,GAAAmD,GAAAnD,CAAA,qCAqBRA,EAAW,CAAA,CAAA,uBAAhB,OAAIwC,GAAA,uiCArCRpC,EAgCKC,EAAA+C,EAAA7C,CAAA,EA/BJ+B,EAcKc,EAAAC,CAAA,EAbJf,EAAmDe,EAAAC,CAAA,SACnDhB,EAWQe,EAAAE,CAAA,mFAoBVnD,EAWKC,EAAAmD,EAAAjD,CAAA,EAVJ+B,EAA2CkB,EAAAC,CAAA,UAC3CnB,EAQIkB,EAAAjB,CAAA,2JA5BCvC,EAAW,CAAA,mEAqBRA,EAAW,CAAA,CAAA,oBAAhB,OAAIwC,GAAA,EAAA,mHAAJ,8OAtDCkB,EAAuB,YAGlBC,EAAWC,EAAA,KACfC,EAAWC,UACNtB,EAAI,EAAGA,EAAIoB,EAAiB,OAAQpB,IACxC,GAAAoB,EAAiBpB,CAAC,EAAE,QAChB,OAAAA,EAGF,OAAAqB,EAEC,SAAAE,GAAA,KACRL,EAAe,CAAAA,CAAA,eAUbK,EAAgB,yCAtBhBC,EAAA,EAAAF,EAAUH,EAAWnC,CAAW,CAAA"}