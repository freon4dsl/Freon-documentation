{"version":3,"file":"74.C_0utINa.js","sources":["../../../../../../src/routes/Examples/Generic_Types/The_TyperExample_DSL/SectionStore.ts","../../../../../../src/routes/Examples/Generic_Types/The_TyperExample_DSL/PageContent.svelte","../../../../../../src/routes/Examples/Generic_Types/The_TyperExample_DSL/+page.svelte"],"sourcesContent":["import { writable, type Writable } from 'svelte/store';\nimport type { Section } from '$lib/section/SectionType';\n\nexport const mySections: Writable<Section[]> = writable<Section[]>([]);\n","<script lang=\"ts\">\n\timport SectionComponent from '$lib/section/SectionComponent.svelte';\n\timport { mySections } from './SectionStore.js';\n\t$mySections = [\n\t\t{\n\t\t\ttitle: 'The Metamodel Definition of the Example Language',\n\t\t\tvisible: false,\n\t\t\tref: '#the-metamodel-definition-of-the-example-language-1'\n\t\t},\n\t\t{ title: 'The Complete AST Definition', visible: false, ref: '#the-complete-ast-definition-2' }\n\t];\n\tlet visible: boolean[] = [];\n\t$: $mySections[0].visible = visible[0];\n\t$: $mySections[1].visible = visible[1];\n\timport copy from 'copy-to-clipboard';\n\timport { onMount } from 'svelte';\n\n\t/**\n\t * This function will go through all the 'pre' elements\n\t * on the page and add a copy button to them.\n\t * Thanks to: https://slavbasharov.com/blog/adding-click-to-copy-code-markdown-blog\n\t */\n\tonMount(() => {\n\t\tconst codeBlocks = document.querySelectorAll('pre');\n\t\tcodeBlocks.forEach((block) => {\n\t\t\tconst copyPrompt = document.createElement('div');\n\t\t\tcopyPrompt.className = 'copy-prompt';\n\t\t\tconst copyPromptText = document.createElement('p');\n\t\t\tcopyPromptText.innerHTML = 'ðŸ‘† Click to copy';\n\t\t\tcopyPromptText.className = 'copy-prompt-p';\n\t\t\tconst copyIcon = document.createElement('img');\n\t\t\tcopyIcon.src = '/icons/copy-icon.svg';\n\t\t\tcopyIcon.className = 'copy-prompt-img';\n\t\t\tcopyPrompt.appendChild(copyIcon);\n\t\t\tcopyPrompt.appendChild(copyPromptText);\n\t\t\tblock.appendChild(copyPrompt);\n\t\t\tblock.querySelector('.copy-prompt > p').addEventListener('click', (evt) => {\n\t\t\t\tcopy(block.querySelector('code').textContent);\n\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'Copied!';\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'ðŸ‘† Click to copy';\n\t\t\t\t}, 1000);\n\t\t\t});\n\t\t});\n\t});\n\timport PrevNextSection from '$lib/prevNext/PrevNextSection.svelte';\n\n\tlet prevLink = '/Examples/Generic_Types';\n\tlet nextLink = '/Examples/Generic_Types/The_Typer_Definition';\n</script>\n\n<PrevNextSection {prevLink} {nextLink} />\n<SectionComponent tag=\"h1\" id=\"the-metamodel-definition-of-the-example-language-1\" bind:intersecting={visible[0]}\n\t>The Metamodel Definition of the Example Language</SectionComponent\n>\n<p>\n\tTo explain the type definition, we first need the metamodel of the example language. Below is the complete .ast file. But first, letâ€™s\n\texplain some highlights.\n</p>\n<p>\n\tEvery type in the list of <em>expression</em> - <em>declared type</em> pairs is an instance of the AST concept <strong>TypeUsage</strong>,\n\twhich comes in two flavours: a type declaration, and a type reference, that holds a reference to another AST node.\n</p>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// TyperExample/src/defs/projectY.ast#L18-L26\n</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">concept</span> <span class=\"token class-name\">TypeUsage</span> &#123; <span class=\"token comment\">// to be used wherever a type can be used, either a referred type of or declared type is correct\n</span>&#125;\n\n<span class=\"token keyword\">concept</span> <span class=\"token class-name\">TypeRef</span> <span class=\"token keyword\">base</span> <span class=\"token class-name\">TypeUsage</span>  &#123;\n    <span class=\"token keyword\">reference</span> <span class=\"token keyword\">type</span>: <span class=\"token class-name\">NamedType</span>;\n&#125;\n\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">concept</span> <span class=\"token class-name\">TypeDecl</span> <span class=\"token keyword\">base</span> <span class=\"token class-name\">TypeUsage</span> &#123;\n&#125;</code>`}</pre>\n<p>\n\tThere are also two options for a type declaration, a generic type, and a unit of measurement. For this example, we have used the names of\n\tthe generic types from the Object Constraint Language: Set, Bag, Sequence, and Collection. Note that these declarations are part of the\n\tAST. They are not type concepts themselves.\n</p>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// TyperExample/src/defs/projectY.ast#L37-L47\n</span>\n<span class=\"token keyword\">concept</span> <span class=\"token class-name\">GenericType</span> <span class=\"token keyword\">base</span> <span class=\"token class-name\">TypeDecl</span> &#123;\n    baseType: <span class=\"token class-name\">TypeUsage</span>;\n    kind: <span class=\"token class-name\">GenericKind</span>; <span class=\"token comment\">// is it a set, sequence, bag, or anything else\n</span>&#125;\n<span class=\"token keyword\">limited</span> <span class=\"token class-name\">GenericKind</span> &#123; Set; Sequence; Bag; Collection; &#125;\n\n<span class=\"token keyword\">concept</span> <span class=\"token class-name\">UnitOfMeasurement</span> <span class=\"token keyword\">base</span> <span class=\"token class-name\">TypeDecl</span> &#123;\n    <span class=\"token keyword\">reference</span> baseType: <span class=\"token class-name\">PredefinedType</span>; <span class=\"token comment\">// is always NUMBER!!\n</span>    unit: <span class=\"token class-name\">UnitKind</span>; <span class=\"token comment\">// is it measured in km, kWh, grams, or anything else\n</span>&#125;\n<span class=\"token keyword\">limited</span> <span class=\"token class-name\">UnitKind</span> &#123; Meters; Grams; kWh; Hours; &#125;</code>`}</pre>\n<p>\n\tThe definitions of the expressions in the example language are straightforward. There are literal expressions for strings, booleans, and\n\tnumber, as well as generic literals and unit literals.\n</p>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// TyperExample/src/defs/projectY.ast#L61-L75\n</span>\n<span class=\"token keyword\">expression</span> BooleanLiteral <span class=\"token keyword\">base</span> <span class=\"token class-name\">Exp</span> &#123;\n    xx: <span class=\"token builtin\">boolean</span>;\n&#125;\n\n<span class=\"token keyword\">expression</span> UnitLiteral <span class=\"token keyword\">base</span> <span class=\"token class-name\">Exp</span> &#123;\n    <span class=\"token comment\">// 62 kilogram, or 112 miles\n</span>    inner: <span class=\"token class-name\">NumberLiteral</span>;\n    unit: <span class=\"token class-name\">UnitKind</span>;\n&#125;\n\n<span class=\"token keyword\">expression</span> GenericLiteral <span class=\"token keyword\">base</span> <span class=\"token class-name\">Exp</span> &#123;\n    <span class=\"token comment\">// Set&#123; 12, 14, 16, 18 &#125;\n</span>    content: <span class=\"token class-name\">Exp</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>;\n    kind: <span class=\"token class-name\">GenericKind</span>;\n&#125;</code>`}</pre>\n<SectionComponent tag=\"h2\" id=\"the-complete-ast-definition-2\" bind:intersecting={visible[1]}>The Complete AST Definition</SectionComponent>\n<pre class=\"language-freon\">{@html `<code class=\"language-freon\"><span class=\"token comment\">// TyperExample/src/defs/projectY.ast\n</span>\nlanguage projectY\n\n<span class=\"token keyword\">model</span> <span class=\"token class-name\">XX</span> &#123;\n    units: <span class=\"token class-name\">XXunit</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>;\n&#125;\n\n<span class=\"token keyword\">modelunit</span> <span class=\"token class-name\">XXunit</span> &#123;\n    lines: <span class=\"token class-name\">ExpWithType</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>;\n    file-extension = <span class=\"token string\">\"expr\"</span>;\n&#125;\n\n<span class=\"token keyword\">concept</span> <span class=\"token class-name\">ExpWithType</span> &#123;\n    expr: <span class=\"token class-name\">Exp</span>;\n    <span class=\"token keyword\">type</span>: <span class=\"token class-name\">TypeUsage</span>;\n&#125;\n\n<span class=\"token comment\">// definitions of types\n</span><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">concept</span> <span class=\"token class-name\">TypeUsage</span> &#123; <span class=\"token comment\">// to be used wherever a type can be used, either a referred type of or declared type is correct\n</span>&#125;\n\n<span class=\"token keyword\">concept</span> <span class=\"token class-name\">TypeRef</span> <span class=\"token keyword\">base</span> <span class=\"token class-name\">TypeUsage</span>  &#123;\n    <span class=\"token keyword\">reference</span> <span class=\"token keyword\">type</span>: <span class=\"token class-name\">NamedType</span>;\n&#125;\n\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">concept</span> <span class=\"token class-name\">TypeDecl</span> <span class=\"token keyword\">base</span> <span class=\"token class-name\">TypeUsage</span> &#123;\n&#125;\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TopType</span> &#123;\n&#125;\n\n<span class=\"token keyword\">concept</span> <span class=\"token class-name\">NamedType</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TopType</span> &#123;\n    name: <span class=\"token builtin\">identifier</span>;\n&#125;\n\n<span class=\"token keyword\">limited</span> PredefinedType <span class=\"token keyword\">base</span> <span class=\"token class-name\">NamedType</span> &#123; NUMBER; BOOLEAN; STRING; ANY; NULL; &#125;\n\n<span class=\"token keyword\">concept</span> <span class=\"token class-name\">GenericType</span> <span class=\"token keyword\">base</span> <span class=\"token class-name\">TypeDecl</span> &#123;\n    baseType: <span class=\"token class-name\">TypeUsage</span>;\n    kind: <span class=\"token class-name\">GenericKind</span>; <span class=\"token comment\">// is it a set, sequence, bag, or anything else\n</span>&#125;\n<span class=\"token keyword\">limited</span> <span class=\"token class-name\">GenericKind</span> &#123; Set; Sequence; Bag; Collection; &#125;\n\n<span class=\"token keyword\">concept</span> <span class=\"token class-name\">UnitOfMeasurement</span> <span class=\"token keyword\">base</span> <span class=\"token class-name\">TypeDecl</span> &#123;\n    <span class=\"token keyword\">reference</span> baseType: <span class=\"token class-name\">PredefinedType</span>; <span class=\"token comment\">// is always NUMBER!!\n</span>    unit: <span class=\"token class-name\">UnitKind</span>; <span class=\"token comment\">// is it measured in km, kWh, grams, or anything else\n</span>&#125;\n<span class=\"token keyword\">limited</span> <span class=\"token class-name\">UnitKind</span> &#123; Meters; Grams; kWh; Hours; &#125;\n\n<span class=\"token comment\">// definitions of expressions\n</span><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">expression</span> <span class=\"token class-name\">Exp</span> &#123;\n&#125;\n\n<span class=\"token keyword\">expression</span> NumberLiteral <span class=\"token keyword\">base</span> <span class=\"token class-name\">Exp</span> &#123;\n    xx: <span class=\"token builtin\">number</span>;\n&#125;\n\n<span class=\"token keyword\">expression</span> StringLiteral <span class=\"token keyword\">base</span> <span class=\"token class-name\">Exp</span> &#123;\n    xx: <span class=\"token builtin\">string</span>;\n&#125;\n\n<span class=\"token keyword\">expression</span> BooleanLiteral <span class=\"token keyword\">base</span> <span class=\"token class-name\">Exp</span> &#123;\n    xx: <span class=\"token builtin\">boolean</span>;\n&#125;\n\n<span class=\"token keyword\">expression</span> UnitLiteral <span class=\"token keyword\">base</span> <span class=\"token class-name\">Exp</span> &#123;\n    <span class=\"token comment\">// 62 kilogram, or 112 miles\n</span>    inner: <span class=\"token class-name\">NumberLiteral</span>;\n    unit: <span class=\"token class-name\">UnitKind</span>;\n&#125;\n\n<span class=\"token keyword\">expression</span> GenericLiteral <span class=\"token keyword\">base</span> <span class=\"token class-name\">Exp</span> &#123;\n    <span class=\"token comment\">// Set&#123; 12, 14, 16, 18 &#125;\n</span>    content: <span class=\"token class-name\">Exp</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>;\n    kind: <span class=\"token class-name\">GenericKind</span>;\n&#125;\n\n\n<span class=\"token keyword\">expression</span> NamedExp <span class=\"token keyword\">base</span> <span class=\"token class-name\">Exp</span> &#123;\n    inner: <span class=\"token class-name\">Exp</span>;\n    myType: <span class=\"token class-name\">NamedType</span>;\n&#125;\n\n<span class=\"token keyword\">expression</span> PlusExp <span class=\"token keyword\">base</span> <span class=\"token class-name\">Exp</span> &#123;\n    left: <span class=\"token class-name\">Exp</span>;\n    right: <span class=\"token class-name\">Exp</span>;\n&#125;\n</code>`}</pre>\n\n<PrevNextSection {prevLink} {nextLink} />\n","<script lang=\"ts\">\n\timport { mySections } from './SectionStore.js';\n\timport type { Section } from '$lib/section/SectionType.js';\n\timport PageContent from './PageContent.svelte';\n\timport Breadcrumb from '$lib/breadcrumbs/Breadcrumb.svelte';\n\n\tlet showDetails: boolean = false;\n\t$: current = getCurrent($mySections);\n\n\tfunction getCurrent(internalSections: Section[]): number {\n\t\tlet previous = current;\n\t\tfor (let i = 0; i < internalSections.length; i++) {\n\t\t\tif (internalSections[i].visible) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn previous;\n\t}\n\tfunction toggleTocDetails() {\n\t\tshowDetails = !showDetails;\n\t}\n</script>\n\n<div class=\"page-main\">\n\t<div class=\"page-toc-small\">\n\t\t<p class=\"page-toc-small-title\">On this page ...</p>\n\t\t<button\n\t\t\tclass=\"page-toc-small-expand-button\"\n\t\t\ton:click={() => {\n\t\t\t\ttoggleTocDetails();\n\t\t\t}}\n\t\t>\n\t\t\t{#if showDetails}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/upload.png\" alt=\"arrow up\" />\n\t\t\t{:else}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/down-arrow.png\" alt=\"arrow down\" />\n\t\t\t{/if}\n\t\t</button>\n\t</div>\n\t{#if showDetails}\n\t\t<div class=\"toc-details\">\n\t\t\t<ul class=\"page-ul\">\n\t\t\t\t{#each $mySections as sec, index}\n\t\t\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t\t\t{sec.title}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t{/each}\n\t\t\t</ul>\n\t\t</div>\n\t{/if}\n\n\t<Breadcrumb />\n\t<PageContent />\n</div>\n\n<nav class=\"page-toc\">\n\t<h3 class=\"page-toc-title\">On this page</h3>\n\t<ul class=\"page-ul\">\n\t\t{#each $mySections as sec, index}\n\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t{sec.title}\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n</nav>\n"],"names":["mySections","writable","ctx","sectioncomponent0_props","sectioncomponent1_props","insert_hydration","target","p0","anchor","p1","pre0","p2","pre1","p3","pre2","pre3","sectioncomponent0_changes","sectioncomponent1_changes","prevLink","nextLink","$mySections","visible","onMount","block","copyPrompt","copyPromptText","copyIcon","evt","copy","$$self","value","set_store_value","img","div","append_hydration","ul","i","t0_value","attr","a","a_href_value","toggle_class","li","dirty","set_data","t0","create_if_block_1","create_if_block","div1","div0","p","button","nav","h3","showDetails","getCurrent","internalSections","previous","current","toggleTocDetails","$$invalidate"],"mappings":"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"}