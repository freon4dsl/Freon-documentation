{"version":3,"file":"59.DmQwYMiK.js","sources":["../../../../../../src/routes/Documentation/Under_the_Hood/Editor_Framework/Predefined_Boxes/SectionStore.ts","../../../../../../src/routes/Documentation/Under_the_Hood/Editor_Framework/Predefined_Boxes/PageContent.svelte","../../../../../../src/routes/Documentation/Under_the_Hood/Editor_Framework/Predefined_Boxes/+page.svelte"],"sourcesContent":["import { writable, type Writable } from 'svelte/store';\nimport type { Section } from '$lib/section/SectionType';\n\nexport const mySections: Writable<Section[]> = writable<Section[]>([]);\n","<script lang=\"ts\">\n\timport SectionComponent from '$lib/section/SectionComponent.svelte';\n\timport { mySections } from './SectionStore.js';\n\t$mySections = [\n\t\t{ title: 'Boxes', visible: false, ref: '#boxes-1' },\n\t\t{ title: 'Primitive Boxes', visible: false, ref: '#primitive-boxes-2' },\n\t\t{ title: 'Grouping Boxes', visible: false, ref: '#grouping-boxes-3' }\n\t];\n\tlet visible: boolean[] = [];\n\t$: $mySections[0].visible = visible[0];\n\t$: $mySections[1].visible = visible[1];\n\t$: $mySections[2].visible = visible[2];\n\timport copy from 'copy-to-clipboard';\n\timport { onMount } from 'svelte';\n\n\t/**\n\t * This function will go through all the 'pre' elements\n\t * on the page and add a copy button to them.\n\t * Thanks to: https://slavbasharov.com/blog/adding-click-to-copy-code-markdown-blog\n\t */\n\tonMount(() => {\n\t\tconst codeBlocks = document.querySelectorAll('pre');\n\t\tcodeBlocks.forEach((block) => {\n\t\t\tconst copyPrompt = document.createElement('div');\n\t\t\tcopyPrompt.className = 'copy-prompt';\n\t\t\tconst copyPromptText = document.createElement('p');\n\t\t\tcopyPromptText.innerHTML = 'ðŸ‘† Click to copy';\n\t\t\tcopyPromptText.className = 'copy-prompt-p';\n\t\t\tconst copyIcon = document.createElement('img');\n\t\t\tcopyIcon.src = '/icons/copy-icon.svg';\n\t\t\tcopyIcon.className = 'copy-prompt-img';\n\t\t\tcopyPrompt.appendChild(copyIcon);\n\t\t\tcopyPrompt.appendChild(copyPromptText);\n\t\t\tblock.appendChild(copyPrompt);\n\t\t\tblock.querySelector('.copy-prompt > p').addEventListener('click', (evt) => {\n\t\t\t\tcopy(block.querySelector('code').textContent);\n\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'Copied!';\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tblock.querySelector('.copy-prompt > p').innerHTML = 'ðŸ‘† Click to copy';\n\t\t\t\t}, 1000);\n\t\t\t});\n\t\t});\n\t});\n\timport PrevNextSection from '$lib/prevNext/PrevNextSection.svelte';\n\n\tlet prevLink = '/Documentation/Under_the_Hood/Editor_Framework';\n\tlet nextLink = '/Documentation/Under_the_Hood/Editor_Framework/External_Component_Box_Types';\n</script>\n\n<PrevNextSection {prevLink} {nextLink} />\n<SectionComponent tag=\"h1\" id=\"boxes-1\" bind:intersecting={visible[0]}>Boxes</SectionComponent>\n<p>\n\tA Box is an abstract class describing the features that are common for all boxes. As explained in the <a\n\t\thref=\"/Documentation/Under_the_Hood/Editor_Framework\">editor framework</a\n\t>, each box has a mandatory model node and role. The following predefined boxes are available.\n</p>\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Primitive Boxes</th>\n\t\t\t<th>Grouping Boxes</th>\n\t\t\t<th>Boxes for External Components</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>ActionBox</td>\n\t\t\t<td>FragmentBox</td>\n\t\t\t<td>ExternalBooleanBox</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>AliasBox</td>\n\t\t\t<td>GridBox</td>\n\t\t\t<td>ExternalNumberBox</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>BooleanControlBox</td>\n\t\t\t<td>GridCellBox</td>\n\t\t\t<td>ExternalPartBox</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>ButtonBox</td>\n\t\t\t<td>HorizontalLayoutBox</td>\n\t\t\t<td>ExternalPartListBox</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>EmptyLineBox</td>\n\t\t\t<td>HorizontalListBox</td>\n\t\t\t<td>ExternalRefBox</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>IndentBox</td>\n\t\t\t<td>OptionalBox</td>\n\t\t\t<td>ExternalRefListBox</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>LabelBox</td>\n\t\t\t<td>TableBox</td>\n\t\t\t<td>ExternalSimpleBox</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>NumberControlBox</td>\n\t\t\t<td>TableCellBox</td>\n\t\t\t<td>ExternalStringBox</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>LimitedControlBox</td>\n\t\t\t<td>TableRowBox</td>\n\t\t\t<td>BooleanWrapperBox</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>MultiLineTextBox</td>\n\t\t\t<td>VerticalLayoutBox</td>\n\t\t\t<td>FragmentWrapperBox</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>SelectBox</td>\n\t\t\t<td>VerticalListBox</td>\n\t\t\t<td>NumberWrapperBox</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>SvgBox</td>\n\t\t\t<td></td>\n\t\t\t<td>PartWrapperBox</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>TextBox</td>\n\t\t\t<td></td>\n\t\t\t<td>PartListWrapperBox</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t\t<td>RefWrapperBox</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t\t<td>RefListWrapperBox</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t\t<td>StringWrapperBox</td>\n\t\t</tr>\n\t</tbody>\n</table>\n<p>\n\tAll box types have a corresponding Component that renders the box in the browser. These components are build with <a\n\t\thref=\"https://svelte.dev\"\n\t\ttarget=\"_blank\">Svelte</a\n\t>. In the source code the box implementations reside in the package <code>core</code>, whereas the components reside in\n\t<code>core-svelte</code>. The Freon core package offers several utilities to create boxes, for instance in custom projections.\n</p>\n<p>\n\tThe boxes for external components are explained in <a href=\"/Documentation/Under_the_Hood/Editor_Framework/External_Component_Box_Types\"\n\t\t>External Component Box Types</a\n\t>.\n</p>\n<SectionComponent tag=\"h2\" id=\"primitive-boxes-2\" bind:intersecting={visible[1]}>Primitive Boxes</SectionComponent>\n<p>Primitive boxes do not have other boxes as content. A primitive box is used to project a primitive AST node in the editor.</p>\n<h3 id=\"actionbox-1\">ActionBox</h3>\n<p>\n\tAn <code>ActionBox</code> is used to offer the user the option of executing an action, for instance the addition of an optional node. It has\n\ta placeholder text that is shown, and a dropdown menu that offers the various actions. Actions are coupled to the box based on the role.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">ActionBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">\"optional-init\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"init\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<h3 id=\"aliasbox-2\">AliasBox</h3>\n<p>\n\tAn <code>AliasBox</code> is a box where the user can type text (printable characters). Usually this text is a trigger for some action. All\n\tactions that have this <em>trigger</em> and are defined for the <em>role</em> of this alias box, are possible. An alias box has a placeholder\n\tstring, that can either be a visible indication of what could be entered, or it could be invisible, when the placeholder is an empty string\n\tor consists of whitespace only.\n</p>\n<p>\n\tAn example of the use of an alias box is before and after an expression. The alias boxes there enable the user to type in an addition to\n\tthe expression, changing, for instance, <code>4 + 5</code> into <code>3 * 4 + 5</code>.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">AliasBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">'role'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'['</span> <span class=\"token operator\">+</span> property <span class=\"token operator\">+</span> <span class=\"token string\">']'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n\tpropertyName<span class=\"token operator\">:</span> property\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<h3 id=\"booleancontrolbox-3\">BooleanControlBox</h3>\n<p>\n\tA <code>BooleanControlBox</code> is a box that shows a property of type boolean using an HTML input control, such as a radio button. The\n\t<code>getBoolean</code>\n\tand <code>setBoolean</code> in the below example are functions that set and get the value of the boolean property, respectively. They adhere\n\tto the following interface.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token function-variable function\">getBoolean</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">setBoolean</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>newValue<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">BooleanControlBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">'role'</span><span class=\"token punctuation\">,</span> getBoolean<span class=\"token punctuation\">,</span> setBoolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<h3 id=\"buttonbox-4\">ButtonBox</h3>\n<p>A <code>ButtonBox</code> is a box that shows a button with the given text as label.</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">ButtonBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Text-on-button\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'role'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<h3 id=\"emptylinebox-5\">EmptyLineBox</h3>\n<p>An <code>EmptyLineBox</code> is a box that shows an HTML linebreak.</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">EmptyLineBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">'role'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<h3 id=\"indentbox-6\">IndentBox</h3>\n<p>An <code>IndentBox</code> shows white space to indent other boxes.</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">IndentBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">'role'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> childBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<h3 id=\"labelbox-7\">LabelBox</h3>\n<p>\n\tA <code>LabelBox</code> shows a non-editable text. The text itself can either be a fixed string (1), or it can be defined as a function (2).\n\tBeing a function allows the label text to change dynamically, depending on the result value of the function.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">LabelBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">'role'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fixed text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">LabelBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">'role'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<h3 id=\"numbercontrolbox-8\">NumberControlBox</h3>\n<p>\n\tA <code>NumberControlBox</code> is a box that shows a property of type boolean using an HTML input control, such as a radio button. The\n\t<code>getNumber</code>\n\tand <code>setNumber</code> in the below example are functions that set and get the value of the number property, respectively. They adhere\n\tto the following interface.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token function-variable function\">getNumber</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">setNumber</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>newValue<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">NumberControlBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">'role'</span><span class=\"token punctuation\">,</span> getNumber<span class=\"token punctuation\">,</span> setNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<h3 id=\"limitedcontrolbox-9\">LimitedControlBox</h3>\n<p>\n\tA <code>LimitedControlBox</code> is a box that shows a property of type boolean using an HTML input control, such as a checkbox. The\n\t<code>getValues</code>\n\tand <code>setValues</code> in the below example are functions that set and get the value of the limited property, respectively. They\n\tadhere to the following interface, and are used for both single valued and list values limited properties. In case of a single value, only\n\tthe 0-th element is used. The <code>possibleValues</code> parameter is a list of all allowed values of the property.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token function-variable function\">getValues</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">setValues</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>newValue<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">LimitedControlBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">'role'</span><span class=\"token punctuation\">,</span> getValues<span class=\"token punctuation\">,</span> setValues<span class=\"token punctuation\">,</span> possibleValues<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<h3 id=\"multilinetextbox-10\">MultiLineTextBox</h3>\n<p>\n\tA <code>MultiLineTextBox</code> shows an editable text that can span over multiple lines. In addition to the node and the role a text box needs\n\ttwo function parameters. The first function to get the value of the text, the second function to set the value of the text.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">MultiLineTextBox</span><span class=\"token punctuation\">(</span>\n\tnode<span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'role'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> node<span class=\"token punctuation\">.</span>stringValue<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">(</span>newValue<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>stringValue <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<p>Note that this box cannot yet be instantiated by the projections in the .edit files.</p>\n<h3 id=\"selectbox-11\">SelectBox</h3>\n<p>\n\tA <code>SelectBox</code> shows a choice, e.g. for a reference property. When inactive, it shows its placeholder, when active, it shows a\n\tdropdown list of possible nodes that would fit this position. The functions\n\t<code>getOptions</code>, <code>getSelectedOption</code>, and <code>selectOption</code>, respectively given all possible options, the\n\tcurrently selected option, and an implementation fo the behavior when a certain option is newly selected.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">SelectBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">'role'</span><span class=\"token punctuation\">,</span> placeHolder<span class=\"token punctuation\">,</span> getOptions<span class=\"token punctuation\">,</span> getSelectedOption<span class=\"token punctuation\">,</span> selectOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<h3 id=\"svgbox-12\">SvgBox</h3>\n<p>An <code>SvgBox</code> shows a single SVG image.</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">SvgBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">\"euro-icon\"</span><span class=\"token punctuation\">,</span> euroIcon<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n   viewPortWidth<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n   viewPortHeight<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n   viewBoxWidth<span class=\"token operator\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\n   viewBoxHeight<span class=\"token operator\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\n   selectable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></code>`}</pre>\n<h3 id=\"textbox-13\">TextBox</h3>\n<p>\n\tA <code>TextBox</code> shows an editable text. In addition to the node and the role a text box needs two function parameters. The first function\n\tto get the value of the text, the second function to set the value of the text.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">TextBox</span><span class=\"token punctuation\">(</span>\n\tnode<span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'role'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> node<span class=\"token punctuation\">.</span>stringValue<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">(</span>newValue<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>stringValue <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<p>There are two options that control what happens when a textbox becomes empty, i.e. contains no longer any characters.</p>\n<ol>\n\t<li>\n\t\tdeleteWhenEmpty, if true, the node will be deleted when the text becomes empty because of removing the last character in the text.\n\t\tUsable for e.g. numeric values.\n\t</li>\n\t<li>deleteWhenEmptyAndErase, if true, delete node when Erase key is pressed while the node is empty.</li>\n</ol>\n<SectionComponent tag=\"h2\" id=\"grouping-boxes-3\" bind:intersecting={visible[2]}>Grouping Boxes</SectionComponent>\n<p>\n\tGrouping or layout Boxes have other boxes as content. A grouping box is used to project a composed AST node, like a list, or a concept\n\tthat has part properties, in the editor.\n</p>\n<h3 id=\"fragmentbox-14\">FragmentBox</h3>\n<p>A <code>FragmentBox</code> is used to show a group of properties of a node. Its child boxes can be any type of box.</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">FragmentBox</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_node<span class=\"token punctuation\">,</span> <span class=\"token string\">\"BaseProduct-fragment-FirstCard\"</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<h3 id=\"gridbox-15\">GridBox</h3>\n<p>\n\tA <code>GridBox</code> is used to show any child boxes in a tabular fashion, whereas a <code>TableBox</code> is used to show the elements\n\tfrom a list of similarly types nodes. All children of a <code>GridBox</code> should be of the type <code>GridCellBox</code>.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">GridBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">\"grid-or\"</span><span class=\"token punctuation\">,</span> gridCells<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<h3 id=\"gridcellbox-16\">GridCellBox</h3>\n<p>\n\tA <code>GridCellBox</code> is used to show a single child box in a tabular fashion. It is always a child of a <code>GridBox</code>. It\n\ttakes the row and column numbers within the grid as parameters.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">GridCellBox</span><span class=\"token punctuation\">(</span>fraction<span class=\"token punctuation\">,</span> <span class=\"token string\">\"numerator\"</span><span class=\"token punctuation\">,</span> rowNr<span class=\"token punctuation\">,</span> columnNr<span class=\"token punctuation\">,</span> childBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<h3 id=\"horizontallayoutbox-17\">HorizontalLayoutBox</h3>\n<p>\n\tA <code>HorizontalLayoutBox</code> show any child boxes next to each other horizontally, whereas a HorizontalListBox is used to show the elements\n\tfrom a list of similarly types nodes.\n</p>\n<p>\n\tAn example of using a <code>HorizontalLayoutBox</code> is the following that represents the projection of a EuroLiteral with an icon in front\n\tof the actual value.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">HorizontalLayoutBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"EuroLiteral-hlist-line-0\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span>\n           <span class=\"token keyword\">new</span> <span class=\"token class-name\">SvgBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">\"euro-icon\"</span><span class=\"token punctuation\">,</span> euroIcon<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n              viewPortWidth<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n              viewPortHeight<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n              viewBoxWidth<span class=\"token operator\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\n              viewBoxHeight<span class=\"token operator\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\n              selectable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n           <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n           BoxUtil<span class=\"token punctuation\">.</span><span class=\"token function\">numberBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">\"euros\"</span><span class=\"token punctuation\">,</span> NumberDisplay<span class=\"token punctuation\">.</span><span class=\"token constant\">SELECT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n           BoxUtil<span class=\"token punctuation\">.</span><span class=\"token function\">labelBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"top-1-line-0-item-2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n           BoxUtil<span class=\"token punctuation\">.</span><span class=\"token function\">numberBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">\"cents\"</span><span class=\"token punctuation\">,</span> NumberDisplay<span class=\"token punctuation\">.</span><span class=\"token constant\">SELECT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<h3 id=\"horizontallistbox-18\">HorizontalListBox</h3>\n<p>A <code>HorizontalListBox</code> shows all members of one AST list property next to each other horizontally.</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">HorizontalListBox</span><span class=\"token punctuation\">(</span>\n        myMethodNode<span class=\"token punctuation\">,</span>\n\t\trole<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"parameters\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* property name */</span>\n        myMethodNode<span class=\"token punctuation\">.</span>parameters <span class=\"token comment\">/* children */</span> <span class=\"token punctuation\">)</span></code>`}</pre>\n<h3 id=\"optionalbox-19\">OptionalBox</h3>\n<p>\n\tAn <code>OptionalBox</code> shows an optional projection. The optional content is always present in the\n\t<code>childBox</code>. Next to the content there is an <code>ActionBox</code>, which is shown when the content is not present in the AST\n\tmodel. The parameters <code>mustShow</code> and <code>condition</code> determine which of the pair [content, placeholder] is shown. If the\n\t<code>condition</code>\n\tresults in true, then the content box is shown. If <code>mustShow</code> is true, then the content box is also shown, even though there may\n\tnot be actual content within the AST model.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">OptionalBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">,</span> condition<span class=\"token punctuation\">,</span> contentBox<span class=\"token punctuation\">,</span> mustShow<span class=\"token punctuation\">,</span> actionBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<h3 id=\"tablebox-20\">TableBox</h3>\n<p>\n\tA <code>TableBox</code> shows a list from the model in a table, either row-based or column-based. A <code>TableBox</code> is an abstract\n\tclass, which has two concrete subclasses: <code>TableBoxColumnOriented</code>, and <code>TableBoxRowOriented</code>. All children must be\n\tof type <code>TabelRowBox</code>.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>orientation <span class=\"token operator\">===</span> <span class=\"token string\">\"column\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TableBoxColumnOriented</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> listName<span class=\"token punctuation\">,</span> listElementType<span class=\"token punctuation\">,</span> roleName<span class=\"token punctuation\">,</span> hasHeaders<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TableBoxRowOriented</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> listName<span class=\"token punctuation\">,</span> listElementType<span class=\"token punctuation\">,</span> roleName<span class=\"token punctuation\">,</span> hasHeaders<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code>`}</pre>\n<h3 id=\"tablecellbox-21\">TableCellBox</h3>\n<p>\n\tA <code>TableCellBox</code> shows a property of one element of an AST list. The <code>rowNr</code> and <code>columnNr</code> give the position\n\tof the cell within the table.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">TableCellBox</span><span class=\"token punctuation\">(</span>\n        node<span class=\"token punctuation\">,</span>\n        propertyName<span class=\"token punctuation\">,</span>\n        propertyIndex<span class=\"token punctuation\">,</span>\n        propertyTypeName<span class=\"token punctuation\">,</span>\n        role<span class=\"token punctuation\">,</span>\n        rowNr<span class=\"token punctuation\">,</span>\n        columnNr<span class=\"token punctuation\">,</span>\n        contentBox\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<h3 id=\"tablerowbox-22\">TableRowBox</h3>\n<p>\n\tA <code>TableRowBox</code> shows one element of an AST list. This element may be spread out over multiple table cell boxes. The index gives\n\tthe number of the row or column that the element is displayed in.\n</p>\n<pre\n\tclass=\"language-ts\">{@html `<code class=\"language-ts\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">TableRowBox</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">,</span> myCells<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>`}</pre>\n<h3 id=\"verticallayoutbox-23\">VerticalLayoutBox</h3>\n<p>\n\tA <code>VerticalLayoutBox</code> show a list of child boxes next to each other vertically. Its usage is similar to that of the\n\t<code>HorizontalLayoutBox</code>.\n</p>\n<h3 id=\"verticallistbox-24\">VerticalListBox</h3>\n<p>\n\tA <code>VerticalListBox</code> shows all members of one AST list property one after another vertically. Its usage is similar to that of\n\tthe <code>VerticalLayoutBox</code>.\n</p>\n\n<PrevNextSection {prevLink} {nextLink} />\n","<script lang=\"ts\">\n\timport { mySections } from './SectionStore.js';\n\timport type { Section } from '$lib/section/SectionType.js';\n\timport PageContent from './PageContent.svelte';\n\timport Breadcrumb from '$lib/breadcrumbs/Breadcrumb.svelte';\n\n\tlet showDetails: boolean = false;\n\t$: current = getCurrent($mySections);\n\n\tfunction getCurrent(internalSections: Section[]): number {\n\t\tlet previous = current;\n\t\tfor (let i = 0; i < internalSections.length; i++) {\n\t\t\tif (internalSections[i].visible) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn previous;\n\t}\n\tfunction toggleTocDetails() {\n\t\tshowDetails = !showDetails;\n\t}\n</script>\n\n<div class=\"page-main\">\n\t<div class=\"page-toc-small\">\n\t\t<p class=\"page-toc-small-title\">On this page ...</p>\n\t\t<button\n\t\t\tclass=\"page-toc-small-expand-button\"\n\t\t\ton:click={() => {\n\t\t\t\ttoggleTocDetails();\n\t\t\t}}\n\t\t>\n\t\t\t{#if showDetails}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/upload.png\" alt=\"arrow up\" />\n\t\t\t{:else}\n\t\t\t\t<img class=\"page-toc-small-img\" src=\"/icons/down-arrow.png\" alt=\"arrow down\" />\n\t\t\t{/if}\n\t\t</button>\n\t</div>\n\t{#if showDetails}\n\t\t<div class=\"toc-details\">\n\t\t\t<ul class=\"page-ul\">\n\t\t\t\t{#each $mySections as sec, index}\n\t\t\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t\t\t{sec.title}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t{/each}\n\t\t\t</ul>\n\t\t</div>\n\t{/if}\n\n\t<Breadcrumb />\n\t<PageContent />\n</div>\n\n<nav class=\"page-toc\">\n\t<h3 class=\"page-toc-title\">On this page</h3>\n\t<ul class=\"page-ul\">\n\t\t{#each $mySections as sec, index}\n\t\t\t<li class=\"page-toc-text\">\n\t\t\t\t<a class:page-visible={index === current} class:page-nonvisible={index !== current} href={sec.ref}>\n\t\t\t\t\t{sec.title}\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n</nav>\n"],"names":["mySections","writable","ctx","sectioncomponent0_props","sectioncomponent1_props","sectioncomponent2_props","insert_hydration","target","p0","anchor","table","p1","p2","p3","h30","p4","pre0","h31","p5","p6","pre1","h32","p7","pre2","pre3","h33","p8","pre4","h34","p9","pre5","h35","p10","pre6","h36","p11","pre7","h37","p12","pre8","pre9","h38","p13","pre10","pre11","h39","p14","pre12","p15","h310","p16","pre13","h311","p17","pre14","h312","p18","pre15","p19","ol","p20","h313","p21","pre16","h314","p22","pre17","h315","p23","pre18","h316","p24","p25","pre19","h317","p26","pre20","h318","p27","pre21","h319","p28","pre22","h320","p29","pre23","h321","p30","pre24","h322","p31","h323","p32","sectioncomponent0_changes","sectioncomponent1_changes","sectioncomponent2_changes","prevLink","nextLink","$mySections","visible","onMount","block","copyPrompt","copyPromptText","copyIcon","evt","copy","$$self","value","set_store_value","img","i","div","append_hydration","ul","t0_value","attr","a","a_href_value","toggle_class","li","dirty","set_data","t0","create_if_block_1","create_if_block","div1","div0","p","button","nav","h3","showDetails","getCurrent","internalSections","previous","current","toggleTocDetails","$$invalidate"],"mappings":"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"}