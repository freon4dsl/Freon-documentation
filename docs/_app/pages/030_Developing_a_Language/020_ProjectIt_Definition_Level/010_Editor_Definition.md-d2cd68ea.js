import{S as qi,i as Yi,s as Ki,e as o,t as s,k as c,j as xi,c as i,a as l,g as a,d as n,n as u,m as Ti,b as x,f as r,F as t,o as ji,x as gi,u as Ii,v as Li}from"../../../chunks/vendor-0216fdcb.js";import{N as Pi}from"../../../chunks/Note-fe348b75.js";/* empty css                                                         */function Ji(F){let f;return{c(){f=s("Indentation is incremental")},l(h){f=a(h,"Indentation is incremental")},m(h,y){r(h,f,y)},d(h){h&&n(f)}}}function Qi(F){let f;return{c(){f=s("This is not completely true. When a `Text` element is used within another projection,\nthe indentation that is defined by the projection in the definition for `Text` will be preceded\nby any indentation defined for the enclosing concept.")},l(h){f=a(h,"This is not completely true. When a `Text` element is used within another projection,\nthe indentation that is defined by the projection in the definition for `Text` will be preceded\nby any indentation defined for the enclosing concept.")},m(h,y){r(h,f,y)},d(h){h&&n(f)}}}function Vi(F){let f;return{c(){f=s("Newlines in terminator or separator are ignored")},l(h){f=a(h,"Newlines in terminator or separator are ignored")},m(h,y){r(h,f,y)},d(h){h&&n(f)}}}function Xi(F){let f,h,y,v,L,R,z;return{c(){f=s(`A terminator or separator should not contain a newline character. Horizontal or vertical layout is
purely determined by the keywords `),h=o("code"),y=s("@horizontal"),v=s(" and "),L=o("code"),R=s("@vertical"),z=s(".")},l(d){f=a(d,`A terminator or separator should not contain a newline character. Horizontal or vertical layout is
purely determined by the keywords `),h=i(d,"CODE",{});var _=l(h);y=a(_,"@horizontal"),_.forEach(n),v=a(d," and "),L=i(d,"CODE",{});var P=l(L);R=a(P,"@vertical"),P.forEach(n),z=a(d,".")},m(d,_){r(d,f,_),r(d,h,_),t(h,y),r(d,v,_),r(d,L,_),t(L,R),r(d,z,_)},d(d){d&&n(f),d&&n(h),d&&n(v),d&&n(L),d&&n(z)}}}function Zi(F){let f,h,y,v,L,R,z,d,_,P,Se,Dn,Nt,$,Mn,he,An,Nn,He,Sn,Hn,St,O,Z,Wn,We,Rn,Fn,zn,ee,Gn,Re,Bn,Un,qn,te,Yn,Fe,Kn,Jn,Ht,T,Qn,ze,Vn,Xn,Ge,Zn,es,de,ts,ns,Wt,C,ss,Be,as,os,ke,is,ls,Rt,ne,Ue,ps,Ft,D,rs,qe,cs,us,Ye,fs,hs,zt,M,G,Ke,ds,ks,Je,ms,ys,Es,B,Qe,ws,vs,Ve,_s,bs,xs,k,Xe,Ts,js,Ze,gs,Is,et,Ls,Ps,tt,$s,Os,nt,Cs,Ds,st,Ms,As,Gt,me,Ns,Bt,E,Ss,at,Hs,Ws,ot,Rs,Fs,it,zs,Gs,lt,Bs,Us,Ut,se,$i=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.edit#L3-L11</span>

Text <span class="token punctuation">&#123;</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">projection</span></span>
        <span class="token punctuation">[</span>This <span class="token keyword">is</span>
                literal text
          that <span class="token keyword">is</span> projected <span class="token keyword">in</span> the

                editor
        <span class="token keyword">for</span> every concept <span class="token keyword">of</span> <span class="token keyword">type</span> <span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`,qt,ye,qs,Yt,U,Kt,q,Ys,pt,Ks,Js,Jt,ae,Oi=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.edit#L16-L30</span>

StringLiteralExpression <span class="token punctuation">&#123;</span>
<span class="token comment">// in this projection the indentation is not taken into account</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">projection</span></span> normal
        <span class="token punctuation">[</span>
        <span class="token string">'$&#123;self.value&#125;'</span>
        <span class="token punctuation">]</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">trigger</span></span> <span class="token string">"'"</span>
<span class="token punctuation">&#125;</span>
AttributeWithLimitedType <span class="token punctuation">&#123;</span>
<span class="token comment">// in this projection the indentation is taken into account</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">projection</span></span> showAll
        <span class="token punctuation">[</span>
    $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> <span class="token operator">:</span> $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>declaredType<span class="token punctuation">&#125;</span>
 <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`,Qt,Ee,Qs,Vt,oe,Ci=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.edit#L94-L100</span>

FunctionCallExpression <span class="token punctuation">&#123;</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">projection</span></span> showAll
        <span class="token punctuation">[</span><span class="token operator">+</span>
        <span class="token constant">CALL</span> $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>functionDefinition<span class="token punctuation">&#125;</span> <span class="token punctuation">(</span>  <span class="token punctuation">)</span>
        <span class="token punctuation">]</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">trigger</span></span> <span class="token string">"function"</span>
<span class="token punctuation">&#125;</span></code>`,Xt,we,Vs,Zt,Y,Xs,rt,Zs,ea,en,I,ta,ct,na,sa,ut,aa,oa,ft,ia,tn,A,la,ht,pa,ra,dt,ca,ua,nn,ie,Di=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.edit#L31-L43</span>

IfExpression <span class="token punctuation">&#123;</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">projection</span></span> normal
        <span class="token punctuation">[</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>$<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>condition<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> then
                  $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>whenTrue<span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
           $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>whenFalse<span class="token punctuation">&#125;</span>
        endif
        <span class="token punctuation">]</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">trigger</span></span> <span class="token string">"if"</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">symbol</span></span> <span class="token string">"if"</span>
<span class="token punctuation">&#125;</span></code>`,sn,ve,fa,an,w,ha,kt,da,ka,mt,ma,ya,yt,Ea,wa,Et,va,_a,on,K,ba,wt,xa,Ta,ln,le,Mi=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.edit#L55-L57</span>

PlusExpression <span class="token punctuation">&#123;</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">symbol</span></span> <span class="token string">"+"</span>
<span class="token punctuation">&#125;</span></code>`,pn,_e,ja,rn,be,ga,cn,N,Ia,vt,La,Pa,_t,$a,Oa,un,pe,Ai=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.edit#L101-L114</span>

EntityModelUnit <span class="token punctuation">&#123;</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">projection</span></span> showAll
        <span class="token punctuation">[</span>
        model $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
        entities<span class="token operator">:</span>
            $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>entities
                <span class="token decorator"><span class="token at operator">@</span><span class="token function">vertical</span></span>
                <span class="token decorator"><span class="token at operator">@</span><span class="token function">terminator</span></span> <span class="token punctuation">[</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">]</span>
            <span class="token punctuation">&#125;</span>
        model wide functions<span class="token operator">:</span>
            $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>functions <span class="token decorator"><span class="token at operator">@</span><span class="token function">horizontal</span></span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">separator</span></span> <span class="token punctuation">[</span><span class="token punctuation">;</span> <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`,fn,J,hn,xe,Ca,dn,Q,Da,bt,Ma,Aa,kn,S,Na,xt,Sa,Ha,Tt,Wa,Ra,mn,j,Fa,jt,za,Ga,gt,Ba,Ua,It,qa,Ya,yn,re,Ni=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.ast#L26-L32</span>

concept Entity <span class="token keyword">implements</span> <span class="token class-name">Type</span> <span class="token punctuation">&#123;</span>
    isCompany<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    attributes<span class="token operator">:</span> AttributeWithLimitedType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    entAttributes<span class="token operator">:</span> AttributeWithEntityType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    functions<span class="token operator">:</span> EntityFunction<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    reference baseEntity<span class="token operator">?</span><span class="token operator">:</span> Entity<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,En,ce,Si=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.edit#L73-L82</span>

Entity <span class="token punctuation">&#123;</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">projection</span></span> normal <span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token operator">?</span>$<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>isCompany <span class="token decorator"><span class="token at operator">@</span><span class="token function">keyword</span></span><span class="token punctuation">[</span><span class="token constant">COMPANY</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>
        entity $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> <span class="token punctuation">[</span><span class="token operator">?</span> base $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>baseEntity<span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
            $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>attributes <span class="token decorator"><span class="token at operator">@</span><span class="token function">vertical</span></span> <span class="token punctuation">&#125;</span>
            $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>functions <span class="token decorator"><span class="token at operator">@</span><span class="token function">vertical</span></span> <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">trigger</span></span> <span class="token string">"entity"</span>
<span class="token punctuation">&#125;</span></code>`,wn,Te,Ka,vn,m,Ja,Lt,Qa,Va,Pt,Xa,Za,$t,eo,to,Ot,no,so,Ct,ao,oo,_n,je,io,bn,ge,lo,xn,Ie,po,Tn,Le,ro,jn;return U=new Pi({props:{$$slots:{content:[Qi],header:[Ji]},$$scope:{ctx:F}}}),J=new Pi({props:{$$slots:{content:[Xi],header:[Vi]},$$scope:{ctx:F}}}),{c(){f=o("h1"),h=s("The Editor Definition"),y=c(),v=o("p"),L=s("The editor definition is the definition of the "),R=o("strong"),z=s("concrete syntax"),d=s(` of the language. It is used for the generation of the editor, as
well as the generation of the parser and unparser. The concrete syntax given in the editor definition is also used
to produce better readable error messages as produced by the validator.`),_=c(),P=o("h3"),Se=o("a"),Dn=s(" Three-level definition"),Nt=c(),$=o("p"),Mn=s("As explained in "),he=o("a"),An=s("Three Levels of Customization"),Nn=s(` the generated editor can be defined at three levels.
For each `),He=o("em"),Sn=s("concept"),Hn=s(" in the AST the editor will"),St=c(),O=o("ol"),Z=o("li"),Wn=s("use the "),We=o("em"),Rn=s("hand-made projection"),Fn=s(", when this is present. Otherwise the editor will"),zn=c(),ee=o("li"),Gn=s("use to the "),Re=o("em"),Bn=s("projection generated from the editor definition"),Un=s(", when this definition is present. Finally, the editor will"),qn=c(),te=o("li"),Yn=s("use the "),Fe=o("em"),Kn=s("default projection"),Jn=s("."),Ht=c(),T=o("p"),Qn=s("When a "),ze=o("em"),Vn=s("concept"),Xn=s(" is marked as an "),Ge=o("strong"),Zn=s("binary expression concept"),es=s(`, its default projection is usually the one you
want to go with, because of the extra `),de=o("a"),ts=s("support for expressions"),ns=s(`
that is incorporated in it.`),Wt=c(),C=o("p"),ss=s("The rest of this tutorial explains the second level: how to write an editor definition ("),Be=o("code"),as=s(".edit"),os=s(` file).
For making more adjustments to the projection by adding hand-made projections on the third level, see the
tutorial on `),ke=o("a"),is=s("using the framework"),ls=s("."),Rt=c(),ne=o("h2"),Ue=o("a"),ps=s(" The Editor Definition File"),Ft=c(),D=o("p"),rs=s("In the editor definition file ("),qe=o("code"),cs=s(".edit"),us=s(` file) you can define a ProjectIt editor by providing extra information
for each `),Ye=o("em"),fs=s("concept"),hs=s(" in your language. Currently, you can define the following three items."),zt=c(),M=o("ul"),G=o("li"),Ke=o("strong"),ds=s("Projection"),ks=s(", which is how the "),Je=o("em"),ms=s("concept"),ys=s(" is shown in the editor."),Es=c(),B=o("li"),Qe=o("strong"),ws=s("Trigger"),vs=s(", which is the key or keys your user needs to type to create a new instance of the "),Ve=o("strong"),_s=s("concept"),bs=s("."),xs=c(),k=o("li"),Xe=o("strong"),Ts=s("Symbol"),js=s(", which is optional and only used for "),Ze=o("strong"),gs=s("binary expressions"),Is=s(`. It is the character or
character string that is shown when a `),et=o("em"),Ls=s("binary expression"),Ps=s(` is being added to your user\u2019s model.
It represents the `),tt=o("em"),$s=s("operator"),Os=s(". When the "),nt=o("em"),Cs=s("symbol"),Ds=s(" is not present, the "),st=o("em"),Ms=s("trigger"),As=s(" will be used."),Gt=c(),me=o("h3"),Ns=s("Projections and Indentation"),Bt=c(),E=o("p"),Ss=s("In the "),at=o("code"),Hs=s(".edit"),Ws=s(" file a "),ot=o("em"),Rs=s("projection"),Fs=s(` is defined between angular brackets.
This is done in a style similar from markdown, what you see looks close to what you get.
Everything within the square brackets (`),it=o("code"),zs=s("[]"),Gs=s(`), except
the parts surrounded by `),lt=o("code"),Bs=s("${}"),Us=s(", is taken literally, including any indentation."),Ut=c(),se=o("pre"),qt=c(),ye=o("p"),qs=s(`When the indentation of the opening and closing brackets aligns, this indentation is not taken into account.
Then the column in which the brackets appear is seen as the first column of the projection. In the above example t
his is not the case, therefore the text \u201CThis is\u201D will be shown at the beginning of the line, but the text
\u201Cliteral text\u201D will be shown with a indentation of 16 spaces. The same holds for \u201Ceditor\u201D, but the text
\u201Cthat is projected in the\u201D will be indented with 10 spaces. The text \u201Cfor every concept of type Text\u201D
will be shown with an indentation of 8 spaces.`),Yt=c(),xi(U.$$.fragment),Kt=c(),q=o("p"),Ys=s(`If the closing bracket would be positioned on the line after the text,
`),pt=o("strong"),Ks=s("and"),Js=s(` it would be indented with 8 spaces, then the text
would be shown without any indentation, as shown in the next example.`),Jt=c(),ae=o("pre"),Qt=c(),Ee=o("p"),Qs=s("Using \u2018[+\u2019 you can indicate that a newline should be added."),Vt=c(),oe=o("pre"),Xt=c(),we=o("h3"),Vs=s("Including Subprojections"),Zt=c(),Y=o("p"),Xs=s("By using "),rt=o("code"),Zs=s("${}"),ea=s(` you tell ProjectIt to include a property. Its projection is defined
by the projection for its concept.`),en=c(),I=o("p"),ta=s("In the following example "),ct=o("code"),na=s("self.condition"),sa=s(" is a property of type "),ut=o("code"),aa=s("BooleanLiteralExpression"),oa=s(`.
It will be projected according to the definition for this concept, whereas `),ft=o("code"),ia=s("self.whenTrue"),tn=c(),A=o("p"),la=s("is a property of type "),ht=o("code"),pa=s("EntityExpression"),ra=s(`, which is abstract. This property
will be projected according to the definition for subtype of `),dt=o("code"),ca=s("EntityExpression"),ua=s(" that is currently found."),nn=c(),ie=o("pre"),sn=c(),ve=o("h3"),fa=s("Triggers and Symbols"),an=c(),w=o("p"),ha=s("The example above, the projection for "),kt=o("code"),da=s("IfExpression"),ka=s(", also shows how to define a "),mt=o("strong"),ma=s("trigger"),ya=s(`, and
a `),yt=o("strong"),Ea=s("symbol"),wa=s(` for an expression. The trigger is a string a characters that is used to trigger the creation
of an instance of concept `),Et=o("code"),va=s("IfExpression"),_a=s(". The symbol here is not really useful."),on=c(),K=o("p"),ba=s("In the next example, the symbol is used to define the operator of the binary expression "),wt=o("code"),xa=s("PlusExpression"),Ta=s("."),ln=c(),le=o("pre"),pn=c(),_e=o("h3"),ja=s("Lists"),rn=c(),be=o("p"),ga=s(`If a property is a list, you can indicate whether it should be projected horizontally or vertically.
The default is horizontal.`),cn=c(),N=o("p"),Ia=s("Furthermore, you can add either a "),vt=o("em"),La=s("separator"),Pa=s(` string, which will be shown in between all elements,
or a `),_t=o("em"),$a=s("terminator"),Oa=s(" string, which will be shown after each element. Both are optional."),un=c(),pe=o("pre"),fn=c(),xi(J.$$.fragment),hn=c(),xe=o("h3"),Ca=s("Optional Projections"),dn=c(),Q=o("p"),Da=s(`When a property is marked optional in the language structure definition (the .ast files), the projection
of this property should also be optional. This is indicated by \u2019`),bt=o("code"),Ma=s("[?"),Aa=s("\u2018."),kn=c(),S=o("p"),Na=s("In the next example the property "),xt=o("code"),Sa=s("baseEntity"),Ha=s(` is only shown if it is present. If it is not present,
the text \u2018base\u2019 is omitted as well. The trigger of its concept (which is `),Tt=o("code"),Wa=s("Entity"),Ra=s(` itself) can be used
to start the action of creating this property.`),mn=c(),j=o("p"),Fa=s("Because, in this case, "),jt=o("code"),za=s("baseEntity"),Ga=s(` is a reference property, the element that will be created is an
instance of a special class that represents a reference to an `),gt=o("code"),Ba=s("Entity"),Ua=s(`. What is shown is the name of the
referred `),It=o("code"),qa=s("Entity"),Ya=s("."),yn=c(),re=o("pre"),En=c(),ce=o("pre"),wn=c(),Te=o("h3"),Ka=s("Keyword Projections"),vn=c(),m=o("p"),Ja=s("The previous example also shows the special manner in which properties of type "),Lt=o("code"),Qa=s("boolean"),Va=s(` can be
projected. The property is represented by a keyword. In this case the property is `),Pt=o("code"),Xa=s("isCompany"),Za=s(` and the
keyword representing the property is `),$t=o("code"),eo=s("COMPANY"),to=s(`. When the value
of the property is `),Ot=o("code"),no=s("true"),so=s(", the keyword is shown. When the value is "),Ct=o("code"),ao=s("false"),oo=s(", the keyword is not shown."),_n=c(),je=o("p"),io=s("The user can change the value of the property using the keyword as trigger."),bn=c(),ge=o("h3"),lo=s("Projection Names"),xn=c(),Ie=o("p"),po=s(`Each projection can have a name. Currently, these names are not in use, but in future we plan to
use these names to build a number of sets of projections that are coordinated to operate together.`),Tn=c(),Le=o("p"),ro=s(`For instance, you could have a projection set that shows only part of the properties of some
concepts, whereas another set shows all properties. Or you can have a set that shows suitable concepts
as tables, and another set that shows the same concepts as text.`),this.h()},l(e){f=i(e,"H1",{});var p=l(f);h=a(p,"The Editor Definition"),p.forEach(n),y=u(e),v=i(e,"P",{});var ue=l(v);L=a(ue,"The editor definition is the definition of the "),R=i(ue,"STRONG",{});var Dt=l(R);z=a(Dt,"concrete syntax"),Dt.forEach(n),d=a(ue,` of the language. It is used for the generation of the editor, as
well as the generation of the parser and unparser. The concrete syntax given in the editor definition is also used
to produce better readable error messages as produced by the validator.`),ue.forEach(n),_=u(e),P=i(e,"H3",{});var co=l(P);Se=i(co,"A",{name:!0}),l(Se).forEach(n),Dn=a(co," Three-level definition"),co.forEach(n),Nt=u(e),$=i(e,"P",{});var Pe=l($);Mn=a(Pe,"As explained in "),he=i(Pe,"A",{href:!0});var fo=l(he);An=a(fo,"Three Levels of Customization"),fo.forEach(n),Nn=a(Pe,` the generated editor can be defined at three levels.
For each `),He=i(Pe,"EM",{});var ho=l(He);Sn=a(ho,"concept"),ho.forEach(n),Hn=a(Pe," in the AST the editor will"),Pe.forEach(n),St=u(e),O=i(e,"OL",{});var $e=l(O);Z=i($e,"LI",{});var gn=l(Z);Wn=a(gn,"use the "),We=i(gn,"EM",{});var ko=l(We);Rn=a(ko,"hand-made projection"),ko.forEach(n),Fn=a(gn,", when this is present. Otherwise the editor will"),gn.forEach(n),zn=u($e),ee=i($e,"LI",{});var In=l(ee);Gn=a(In,"use to the "),Re=i(In,"EM",{});var mo=l(Re);Bn=a(mo,"projection generated from the editor definition"),mo.forEach(n),Un=a(In,", when this definition is present. Finally, the editor will"),In.forEach(n),qn=u($e),te=i($e,"LI",{});var Ln=l(te);Yn=a(Ln,"use the "),Fe=i(Ln,"EM",{});var yo=l(Fe);Kn=a(yo,"default projection"),yo.forEach(n),Jn=a(Ln,"."),Ln.forEach(n),$e.forEach(n),Ht=u(e),T=i(e,"P",{});var V=l(T);Qn=a(V,"When a "),ze=i(V,"EM",{});var Eo=l(ze);Vn=a(Eo,"concept"),Eo.forEach(n),Xn=a(V," is marked as an "),Ge=i(V,"STRONG",{});var wo=l(Ge);Zn=a(wo,"binary expression concept"),wo.forEach(n),es=a(V,`, its default projection is usually the one you
want to go with, because of the extra `),de=i(V,"A",{href:!0});var vo=l(de);ts=a(vo,"support for expressions"),vo.forEach(n),ns=a(V,`
that is incorporated in it.`),V.forEach(n),Wt=u(e),C=i(e,"P",{});var Oe=l(C);ss=a(Oe,"The rest of this tutorial explains the second level: how to write an editor definition ("),Be=i(Oe,"CODE",{});var _o=l(Be);as=a(_o,".edit"),_o.forEach(n),os=a(Oe,` file).
For making more adjustments to the projection by adding hand-made projections on the third level, see the
tutorial on `),ke=i(Oe,"A",{href:!0});var bo=l(ke);is=a(bo,"using the framework"),bo.forEach(n),ls=a(Oe,"."),Oe.forEach(n),Rt=u(e),ne=i(e,"H2",{});var uo=l(ne);Ue=i(uo,"A",{name:!0}),l(Ue).forEach(n),ps=a(uo," The Editor Definition File"),uo.forEach(n),Ft=u(e),D=i(e,"P",{});var Ce=l(D);rs=a(Ce,"In the editor definition file ("),qe=i(Ce,"CODE",{});var xo=l(qe);cs=a(xo,".edit"),xo.forEach(n),us=a(Ce,` file) you can define a ProjectIt editor by providing extra information
for each `),Ye=i(Ce,"EM",{});var To=l(Ye);fs=a(To,"concept"),To.forEach(n),hs=a(Ce," in your language. Currently, you can define the following three items."),Ce.forEach(n),zt=u(e),M=i(e,"UL",{});var De=l(M);G=i(De,"LI",{});var Mt=l(G);Ke=i(Mt,"STRONG",{});var jo=l(Ke);ds=a(jo,"Projection"),jo.forEach(n),ks=a(Mt,", which is how the "),Je=i(Mt,"EM",{});var go=l(Je);ms=a(go,"concept"),go.forEach(n),ys=a(Mt," is shown in the editor."),Mt.forEach(n),Es=u(De),B=i(De,"LI",{});var At=l(B);Qe=i(At,"STRONG",{});var Io=l(Qe);ws=a(Io,"Trigger"),Io.forEach(n),vs=a(At,", which is the key or keys your user needs to type to create a new instance of the "),Ve=i(At,"STRONG",{});var Lo=l(Ve);_s=a(Lo,"concept"),Lo.forEach(n),bs=a(At,"."),At.forEach(n),xs=u(De),k=i(De,"LI",{});var b=l(k);Xe=i(b,"STRONG",{});var Po=l(Xe);Ts=a(Po,"Symbol"),Po.forEach(n),js=a(b,", which is optional and only used for "),Ze=i(b,"STRONG",{});var $o=l(Ze);gs=a($o,"binary expressions"),$o.forEach(n),Is=a(b,`. It is the character or
character string that is shown when a `),et=i(b,"EM",{});var Oo=l(et);Ls=a(Oo,"binary expression"),Oo.forEach(n),Ps=a(b,` is being added to your user\u2019s model.
It represents the `),tt=i(b,"EM",{});var Co=l(tt);$s=a(Co,"operator"),Co.forEach(n),Os=a(b,". When the "),nt=i(b,"EM",{});var Do=l(nt);Cs=a(Do,"symbol"),Do.forEach(n),Ds=a(b," is not present, the "),st=i(b,"EM",{});var Mo=l(st);Ms=a(Mo,"trigger"),Mo.forEach(n),As=a(b," will be used."),b.forEach(n),De.forEach(n),Gt=u(e),me=i(e,"H3",{});var Ao=l(me);Ns=a(Ao,"Projections and Indentation"),Ao.forEach(n),Bt=u(e),E=i(e,"P",{});var H=l(E);Ss=a(H,"In the "),at=i(H,"CODE",{});var No=l(at);Hs=a(No,".edit"),No.forEach(n),Ws=a(H," file a "),ot=i(H,"EM",{});var So=l(ot);Rs=a(So,"projection"),So.forEach(n),Fs=a(H,` is defined between angular brackets.
This is done in a style similar from markdown, what you see looks close to what you get.
Everything within the square brackets (`),it=i(H,"CODE",{});var Ho=l(it);zs=a(Ho,"[]"),Ho.forEach(n),Gs=a(H,`), except
the parts surrounded by `),lt=i(H,"CODE",{});var Wo=l(lt);Bs=a(Wo,"${}"),Wo.forEach(n),Us=a(H,", is taken literally, including any indentation."),H.forEach(n),Ut=u(e),se=i(e,"PRE",{class:!0});var Hi=l(se);Hi.forEach(n),qt=u(e),ye=i(e,"P",{});var Ro=l(ye);qs=a(Ro,`When the indentation of the opening and closing brackets aligns, this indentation is not taken into account.
Then the column in which the brackets appear is seen as the first column of the projection. In the above example t
his is not the case, therefore the text \u201CThis is\u201D will be shown at the beginning of the line, but the text
\u201Cliteral text\u201D will be shown with a indentation of 16 spaces. The same holds for \u201Ceditor\u201D, but the text
\u201Cthat is projected in the\u201D will be indented with 10 spaces. The text \u201Cfor every concept of type Text\u201D
will be shown with an indentation of 8 spaces.`),Ro.forEach(n),Yt=u(e),Ti(U.$$.fragment,e),Kt=u(e),q=i(e,"P",{});var Pn=l(q);Ys=a(Pn,`If the closing bracket would be positioned on the line after the text,
`),pt=i(Pn,"STRONG",{});var Fo=l(pt);Ks=a(Fo,"and"),Fo.forEach(n),Js=a(Pn,` it would be indented with 8 spaces, then the text
would be shown without any indentation, as shown in the next example.`),Pn.forEach(n),Jt=u(e),ae=i(e,"PRE",{class:!0});var Wi=l(ae);Wi.forEach(n),Qt=u(e),Ee=i(e,"P",{});var zo=l(Ee);Qs=a(zo,"Using \u2018[+\u2019 you can indicate that a newline should be added."),zo.forEach(n),Vt=u(e),oe=i(e,"PRE",{class:!0});var Ri=l(oe);Ri.forEach(n),Xt=u(e),we=i(e,"H3",{});var Go=l(we);Vs=a(Go,"Including Subprojections"),Go.forEach(n),Zt=u(e),Y=i(e,"P",{});var $n=l(Y);Xs=a($n,"By using "),rt=i($n,"CODE",{});var Bo=l(rt);Zs=a(Bo,"${}"),Bo.forEach(n),ea=a($n,` you tell ProjectIt to include a property. Its projection is defined
by the projection for its concept.`),$n.forEach(n),en=u(e),I=i(e,"P",{});var fe=l(I);ta=a(fe,"In the following example "),ct=i(fe,"CODE",{});var Uo=l(ct);na=a(Uo,"self.condition"),Uo.forEach(n),sa=a(fe," is a property of type "),ut=i(fe,"CODE",{});var qo=l(ut);aa=a(qo,"BooleanLiteralExpression"),qo.forEach(n),oa=a(fe,`.
It will be projected according to the definition for this concept, whereas `),ft=i(fe,"CODE",{});var Yo=l(ft);ia=a(Yo,"self.whenTrue"),Yo.forEach(n),fe.forEach(n),tn=u(e),A=i(e,"P",{});var Me=l(A);la=a(Me,"is a property of type "),ht=i(Me,"CODE",{});var Ko=l(ht);pa=a(Ko,"EntityExpression"),Ko.forEach(n),ra=a(Me,`, which is abstract. This property
will be projected according to the definition for subtype of `),dt=i(Me,"CODE",{});var Jo=l(dt);ca=a(Jo,"EntityExpression"),Jo.forEach(n),ua=a(Me," that is currently found."),Me.forEach(n),nn=u(e),ie=i(e,"PRE",{class:!0});var Fi=l(ie);Fi.forEach(n),sn=u(e),ve=i(e,"H3",{});var Qo=l(ve);fa=a(Qo,"Triggers and Symbols"),Qo.forEach(n),an=u(e),w=i(e,"P",{});var W=l(w);ha=a(W,"The example above, the projection for "),kt=i(W,"CODE",{});var Vo=l(kt);da=a(Vo,"IfExpression"),Vo.forEach(n),ka=a(W,", also shows how to define a "),mt=i(W,"STRONG",{});var Xo=l(mt);ma=a(Xo,"trigger"),Xo.forEach(n),ya=a(W,`, and
a `),yt=i(W,"STRONG",{});var Zo=l(yt);Ea=a(Zo,"symbol"),Zo.forEach(n),wa=a(W,` for an expression. The trigger is a string a characters that is used to trigger the creation
of an instance of concept `),Et=i(W,"CODE",{});var ei=l(Et);va=a(ei,"IfExpression"),ei.forEach(n),_a=a(W,". The symbol here is not really useful."),W.forEach(n),on=u(e),K=i(e,"P",{});var On=l(K);ba=a(On,"In the next example, the symbol is used to define the operator of the binary expression "),wt=i(On,"CODE",{});var ti=l(wt);xa=a(ti,"PlusExpression"),ti.forEach(n),Ta=a(On,"."),On.forEach(n),ln=u(e),le=i(e,"PRE",{class:!0});var zi=l(le);zi.forEach(n),pn=u(e),_e=i(e,"H3",{});var ni=l(_e);ja=a(ni,"Lists"),ni.forEach(n),rn=u(e),be=i(e,"P",{});var si=l(be);ga=a(si,`If a property is a list, you can indicate whether it should be projected horizontally or vertically.
The default is horizontal.`),si.forEach(n),cn=u(e),N=i(e,"P",{});var Ae=l(N);Ia=a(Ae,"Furthermore, you can add either a "),vt=i(Ae,"EM",{});var ai=l(vt);La=a(ai,"separator"),ai.forEach(n),Pa=a(Ae,` string, which will be shown in between all elements,
or a `),_t=i(Ae,"EM",{});var oi=l(_t);$a=a(oi,"terminator"),oi.forEach(n),Oa=a(Ae," string, which will be shown after each element. Both are optional."),Ae.forEach(n),un=u(e),pe=i(e,"PRE",{class:!0});var Gi=l(pe);Gi.forEach(n),fn=u(e),Ti(J.$$.fragment,e),hn=u(e),xe=i(e,"H3",{});var ii=l(xe);Ca=a(ii,"Optional Projections"),ii.forEach(n),dn=u(e),Q=i(e,"P",{});var Cn=l(Q);Da=a(Cn,`When a property is marked optional in the language structure definition (the .ast files), the projection
of this property should also be optional. This is indicated by \u2019`),bt=i(Cn,"CODE",{});var li=l(bt);Ma=a(li,"[?"),li.forEach(n),Aa=a(Cn,"\u2018."),Cn.forEach(n),kn=u(e),S=i(e,"P",{});var Ne=l(S);Na=a(Ne,"In the next example the property "),xt=i(Ne,"CODE",{});var pi=l(xt);Sa=a(pi,"baseEntity"),pi.forEach(n),Ha=a(Ne,` is only shown if it is present. If it is not present,
the text \u2018base\u2019 is omitted as well. The trigger of its concept (which is `),Tt=i(Ne,"CODE",{});var ri=l(Tt);Wa=a(ri,"Entity"),ri.forEach(n),Ra=a(Ne,` itself) can be used
to start the action of creating this property.`),Ne.forEach(n),mn=u(e),j=i(e,"P",{});var X=l(j);Fa=a(X,"Because, in this case, "),jt=i(X,"CODE",{});var ci=l(jt);za=a(ci,"baseEntity"),ci.forEach(n),Ga=a(X,` is a reference property, the element that will be created is an
instance of a special class that represents a reference to an `),gt=i(X,"CODE",{});var ui=l(gt);Ba=a(ui,"Entity"),ui.forEach(n),Ua=a(X,`. What is shown is the name of the
referred `),It=i(X,"CODE",{});var fi=l(It);qa=a(fi,"Entity"),fi.forEach(n),Ya=a(X,"."),X.forEach(n),yn=u(e),re=i(e,"PRE",{class:!0});var Bi=l(re);Bi.forEach(n),En=u(e),ce=i(e,"PRE",{class:!0});var Ui=l(ce);Ui.forEach(n),wn=u(e),Te=i(e,"H3",{});var hi=l(Te);Ka=a(hi,"Keyword Projections"),hi.forEach(n),vn=u(e),m=i(e,"P",{});var g=l(m);Ja=a(g,"The previous example also shows the special manner in which properties of type "),Lt=i(g,"CODE",{});var di=l(Lt);Qa=a(di,"boolean"),di.forEach(n),Va=a(g,` can be
projected. The property is represented by a keyword. In this case the property is `),Pt=i(g,"CODE",{});var ki=l(Pt);Xa=a(ki,"isCompany"),ki.forEach(n),Za=a(g,` and the
keyword representing the property is `),$t=i(g,"CODE",{});var mi=l($t);eo=a(mi,"COMPANY"),mi.forEach(n),to=a(g,`. When the value
of the property is `),Ot=i(g,"CODE",{});var yi=l(Ot);no=a(yi,"true"),yi.forEach(n),so=a(g,", the keyword is shown. When the value is "),Ct=i(g,"CODE",{});var Ei=l(Ct);ao=a(Ei,"false"),Ei.forEach(n),oo=a(g,", the keyword is not shown."),g.forEach(n),_n=u(e),je=i(e,"P",{});var wi=l(je);io=a(wi,"The user can change the value of the property using the keyword as trigger."),wi.forEach(n),bn=u(e),ge=i(e,"H3",{});var vi=l(ge);lo=a(vi,"Projection Names"),vi.forEach(n),xn=u(e),Ie=i(e,"P",{});var _i=l(Ie);po=a(_i,`Each projection can have a name. Currently, these names are not in use, but in future we plan to
use these names to build a number of sets of projections that are coordinated to operate together.`),_i.forEach(n),Tn=u(e),Le=i(e,"P",{});var bi=l(Le);ro=a(bi,`For instance, you could have a projection set that shows only part of the properties of some
concepts, whereas another set shows all properties. Or you can have a set that shows suitable concepts
as tables, and another set that shows the same concepts as text.`),bi.forEach(n),this.h()},h(){x(Se,"name","editor-three-levels"),x(he,"href","/010_Intro/050_Three_Levels_of_Customization#levels"),x(de,"href","/010_Intro/010_Projectional_Editing#expressions"),x(ke,"href","/030_Developing_a_Language/030_API_Level/010_Editor_API"),x(Ue,"name","operand"),x(se,"class","language-ts"),x(ae,"class","language-ts"),x(oe,"class","language-ts"),x(ie,"class","language-ts"),x(le,"class","language-ts"),x(pe,"class","language-ts"),x(re,"class","language-ts"),x(ce,"class","language-ts")},m(e,p){r(e,f,p),t(f,h),r(e,y,p),r(e,v,p),t(v,L),t(v,R),t(R,z),t(v,d),r(e,_,p),r(e,P,p),t(P,Se),t(P,Dn),r(e,Nt,p),r(e,$,p),t($,Mn),t($,he),t(he,An),t($,Nn),t($,He),t(He,Sn),t($,Hn),r(e,St,p),r(e,O,p),t(O,Z),t(Z,Wn),t(Z,We),t(We,Rn),t(Z,Fn),t(O,zn),t(O,ee),t(ee,Gn),t(ee,Re),t(Re,Bn),t(ee,Un),t(O,qn),t(O,te),t(te,Yn),t(te,Fe),t(Fe,Kn),t(te,Jn),r(e,Ht,p),r(e,T,p),t(T,Qn),t(T,ze),t(ze,Vn),t(T,Xn),t(T,Ge),t(Ge,Zn),t(T,es),t(T,de),t(de,ts),t(T,ns),r(e,Wt,p),r(e,C,p),t(C,ss),t(C,Be),t(Be,as),t(C,os),t(C,ke),t(ke,is),t(C,ls),r(e,Rt,p),r(e,ne,p),t(ne,Ue),t(ne,ps),r(e,Ft,p),r(e,D,p),t(D,rs),t(D,qe),t(qe,cs),t(D,us),t(D,Ye),t(Ye,fs),t(D,hs),r(e,zt,p),r(e,M,p),t(M,G),t(G,Ke),t(Ke,ds),t(G,ks),t(G,Je),t(Je,ms),t(G,ys),t(M,Es),t(M,B),t(B,Qe),t(Qe,ws),t(B,vs),t(B,Ve),t(Ve,_s),t(B,bs),t(M,xs),t(M,k),t(k,Xe),t(Xe,Ts),t(k,js),t(k,Ze),t(Ze,gs),t(k,Is),t(k,et),t(et,Ls),t(k,Ps),t(k,tt),t(tt,$s),t(k,Os),t(k,nt),t(nt,Cs),t(k,Ds),t(k,st),t(st,Ms),t(k,As),r(e,Gt,p),r(e,me,p),t(me,Ns),r(e,Bt,p),r(e,E,p),t(E,Ss),t(E,at),t(at,Hs),t(E,Ws),t(E,ot),t(ot,Rs),t(E,Fs),t(E,it),t(it,zs),t(E,Gs),t(E,lt),t(lt,Bs),t(E,Us),r(e,Ut,p),r(e,se,p),se.innerHTML=$i,r(e,qt,p),r(e,ye,p),t(ye,qs),r(e,Yt,p),ji(U,e,p),r(e,Kt,p),r(e,q,p),t(q,Ys),t(q,pt),t(pt,Ks),t(q,Js),r(e,Jt,p),r(e,ae,p),ae.innerHTML=Oi,r(e,Qt,p),r(e,Ee,p),t(Ee,Qs),r(e,Vt,p),r(e,oe,p),oe.innerHTML=Ci,r(e,Xt,p),r(e,we,p),t(we,Vs),r(e,Zt,p),r(e,Y,p),t(Y,Xs),t(Y,rt),t(rt,Zs),t(Y,ea),r(e,en,p),r(e,I,p),t(I,ta),t(I,ct),t(ct,na),t(I,sa),t(I,ut),t(ut,aa),t(I,oa),t(I,ft),t(ft,ia),r(e,tn,p),r(e,A,p),t(A,la),t(A,ht),t(ht,pa),t(A,ra),t(A,dt),t(dt,ca),t(A,ua),r(e,nn,p),r(e,ie,p),ie.innerHTML=Di,r(e,sn,p),r(e,ve,p),t(ve,fa),r(e,an,p),r(e,w,p),t(w,ha),t(w,kt),t(kt,da),t(w,ka),t(w,mt),t(mt,ma),t(w,ya),t(w,yt),t(yt,Ea),t(w,wa),t(w,Et),t(Et,va),t(w,_a),r(e,on,p),r(e,K,p),t(K,ba),t(K,wt),t(wt,xa),t(K,Ta),r(e,ln,p),r(e,le,p),le.innerHTML=Mi,r(e,pn,p),r(e,_e,p),t(_e,ja),r(e,rn,p),r(e,be,p),t(be,ga),r(e,cn,p),r(e,N,p),t(N,Ia),t(N,vt),t(vt,La),t(N,Pa),t(N,_t),t(_t,$a),t(N,Oa),r(e,un,p),r(e,pe,p),pe.innerHTML=Ai,r(e,fn,p),ji(J,e,p),r(e,hn,p),r(e,xe,p),t(xe,Ca),r(e,dn,p),r(e,Q,p),t(Q,Da),t(Q,bt),t(bt,Ma),t(Q,Aa),r(e,kn,p),r(e,S,p),t(S,Na),t(S,xt),t(xt,Sa),t(S,Ha),t(S,Tt),t(Tt,Wa),t(S,Ra),r(e,mn,p),r(e,j,p),t(j,Fa),t(j,jt),t(jt,za),t(j,Ga),t(j,gt),t(gt,Ba),t(j,Ua),t(j,It),t(It,qa),t(j,Ya),r(e,yn,p),r(e,re,p),re.innerHTML=Ni,r(e,En,p),r(e,ce,p),ce.innerHTML=Si,r(e,wn,p),r(e,Te,p),t(Te,Ka),r(e,vn,p),r(e,m,p),t(m,Ja),t(m,Lt),t(Lt,Qa),t(m,Va),t(m,Pt),t(Pt,Xa),t(m,Za),t(m,$t),t($t,eo),t(m,to),t(m,Ot),t(Ot,no),t(m,so),t(m,Ct),t(Ct,ao),t(m,oo),r(e,_n,p),r(e,je,p),t(je,io),r(e,bn,p),r(e,ge,p),t(ge,lo),r(e,xn,p),r(e,Ie,p),t(Ie,po),r(e,Tn,p),r(e,Le,p),t(Le,ro),jn=!0},p(e,[p]){const ue={};p&2&&(ue.$$scope={dirty:p,ctx:e}),U.$set(ue);const Dt={};p&2&&(Dt.$$scope={dirty:p,ctx:e}),J.$set(Dt)},i(e){jn||(gi(U.$$.fragment,e),gi(J.$$.fragment,e),jn=!0)},o(e){Ii(U.$$.fragment,e),Ii(J.$$.fragment,e),jn=!1},d(e){e&&n(f),e&&n(y),e&&n(v),e&&n(_),e&&n(P),e&&n(Nt),e&&n($),e&&n(St),e&&n(O),e&&n(Ht),e&&n(T),e&&n(Wt),e&&n(C),e&&n(Rt),e&&n(ne),e&&n(Ft),e&&n(D),e&&n(zt),e&&n(M),e&&n(Gt),e&&n(me),e&&n(Bt),e&&n(E),e&&n(Ut),e&&n(se),e&&n(qt),e&&n(ye),e&&n(Yt),Li(U,e),e&&n(Kt),e&&n(q),e&&n(Jt),e&&n(ae),e&&n(Qt),e&&n(Ee),e&&n(Vt),e&&n(oe),e&&n(Xt),e&&n(we),e&&n(Zt),e&&n(Y),e&&n(en),e&&n(I),e&&n(tn),e&&n(A),e&&n(nn),e&&n(ie),e&&n(sn),e&&n(ve),e&&n(an),e&&n(w),e&&n(on),e&&n(K),e&&n(ln),e&&n(le),e&&n(pn),e&&n(_e),e&&n(rn),e&&n(be),e&&n(cn),e&&n(N),e&&n(un),e&&n(pe),e&&n(fn),Li(J,e),e&&n(hn),e&&n(xe),e&&n(dn),e&&n(Q),e&&n(kn),e&&n(S),e&&n(mn),e&&n(j),e&&n(yn),e&&n(re),e&&n(En),e&&n(ce),e&&n(wn),e&&n(Te),e&&n(vn),e&&n(m),e&&n(_n),e&&n(je),e&&n(bn),e&&n(ge),e&&n(xn),e&&n(Ie),e&&n(Tn),e&&n(Le)}}}function el(F){return[]}class al extends qi{constructor(f){super();Yi(this,f,el,Zi,Ki,{})}}export{al as default};
