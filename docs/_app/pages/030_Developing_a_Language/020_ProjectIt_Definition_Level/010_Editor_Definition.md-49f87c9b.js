import{S as Vp,i as Xp,s as Zp,e as o,t as s,k as c,w as Ql,c as l,a as i,h as a,d as n,m as u,x as Vl,b as m,g as r,H as t,y as Xl,q as Zl,o as ei,B as ti}from"../../../chunks/vendor-492729b6.js";import{N as ni}from"../../../chunks/Note-1bdf01a3.js";/* empty css                                                         */function er(P){let h;return{c(){h=s("Revised syntax for editor definition")},l(f){h=a(f,"Revised syntax for editor definition")},m(f,k){r(f,h,k)},d(f){f&&n(h)}}}function tr(P){let h;return{c(){h=s(`The syntax for defining editor is currently under revision. In the next release the syntax will change significantly, and we will not
be able to provide backwards compatibility. The bright side of this, is that there will be a number of new features available.`)},l(f){h=a(f,`The syntax for defining editor is currently under revision. In the next release the syntax will change significantly, and we will not
be able to provide backwards compatibility. The bright side of this, is that there will be a number of new features available.`)},m(f,k){r(f,h,k)},d(f){f&&n(h)}}}function nr(P){let h;return{c(){h=s("Indentation is incremental")},l(f){h=a(f,"Indentation is incremental")},m(f,k){r(f,h,k)},d(f){f&&n(h)}}}function sr(P){let h;return{c(){h=s("This is not completely true. When a `Text` element is used within another projection,\nthe indentation that is defined by the projection in the definition for `Text` will be preceded\nby any indentation defined for the enclosing concept.")},l(f){h=a(f,"This is not completely true. When a `Text` element is used within another projection,\nthe indentation that is defined by the projection in the definition for `Text` will be preceded\nby any indentation defined for the enclosing concept.")},m(f,k){r(f,h,k)},d(f){f&&n(h)}}}function ar(P){let h;return{c(){h=s("Newlines in terminator or separator are ignored")},l(f){h=a(f,"Newlines in terminator or separator are ignored")},m(f,k){r(f,h,k)},d(f){f&&n(h)}}}function or(P){let h,f,k,_,C,q,U;return{c(){h=s(`A terminator or separator should not contain a newline character. Horizontal or vertical layout is
purely determined by the keywords `),f=o("code"),k=s("@horizontal"),_=s(" and "),C=o("code"),q=s("@vertical"),U=s(".")},l(d){h=a(d,`A terminator or separator should not contain a newline character. Horizontal or vertical layout is
purely determined by the keywords `),f=l(d,"CODE",{});var x=i(f);k=a(x,"@horizontal"),x.forEach(n),_=a(d," and "),C=l(d,"CODE",{});var L=i(C);q=a(L,"@vertical"),L.forEach(n),U=a(d,".")},m(d,x){r(d,h,x),r(d,f,x),t(f,k),r(d,_,x),r(d,C,x),t(C,q),r(d,U,x)},d(d){d&&n(h),d&&n(f),d&&n(_),d&&n(C),d&&n(U)}}}function lr(P){let h,f,k,_,C,q,U,d,x,L,wn,pe,at,Ds,bn,g,Cs,$e,gs,As,ot,Ms,Ns,En,A,re,Hs,lt,Rs,Ss,Fs,ce,Ws,it,zs,Bs,Gs,ue,Ys,pt,qs,Us,vn,j,Ks,rt,Js,Qs,ct,Vs,Xs,Ie,Zs,ea,_n,M,ta,ut,na,sa,Pe,aa,oa,xn,fe,ft,la,Tn,N,ia,ht,pa,ra,dt,ca,ua,jn,H,K,kt,fa,ha,mt,da,ka,ma,J,yt,ya,wa,wt,ba,Ea,va,y,bt,_a,xa,Et,Ta,ja,vt,$a,Ia,_t,Pa,La,xt,Oa,Da,Tt,Ca,ga,$n,Le,Aa,In,b,Ma,jt,Na,Ha,$t,Ra,Sa,It,Fa,Wa,Pt,za,Ba,Pn,he,Dp=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.edit#L3-L11</span>

Text <span class="token punctuation">&#123;</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">projection</span></span>
        <span class="token punctuation">[</span>This <span class="token keyword">is</span>
                literal text
          that <span class="token keyword">is</span> projected <span class="token keyword">in</span> the

                editor
        <span class="token keyword">for</span> every concept <span class="token keyword">of</span> <span class="token keyword">type</span> <span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`,Ln,Oe,Ga,On,Q,Dn,V,Ya,Lt,qa,Ua,Cn,de,Cp=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.edit#L16-L30</span>

StringLiteralExpression <span class="token punctuation">&#123;</span>
<span class="token comment">// in this projection the indentation is not taken into account</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">projection</span></span> normal
        <span class="token punctuation">[</span>
        <span class="token string">'$&#123;self.value&#125;'</span>
        <span class="token punctuation">]</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">trigger</span></span> <span class="token string">"'"</span>
<span class="token punctuation">&#125;</span>
AttributeWithLimitedType <span class="token punctuation">&#123;</span>
<span class="token comment">// in this projection the indentation is taken into account</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">projection</span></span> showAll
        <span class="token punctuation">[</span>
    $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> <span class="token operator">:</span> $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>declaredType<span class="token punctuation">&#125;</span>
 <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`,gn,De,Ka,An,ke,gp=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.edit#L94-L100</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">projection</span></span> showAll
        <span class="token punctuation">[</span><span class="token operator">+</span>
        <span class="token constant">CALL</span> $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>functionDefinition<span class="token punctuation">&#125;</span> <span class="token punctuation">(</span>  <span class="token punctuation">)</span>
        <span class="token punctuation">]</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">trigger</span></span> <span class="token string">"function"</span>
<span class="token punctuation">&#125;</span>
EntityModelUnit <span class="token punctuation">&#123;</span></code>`,Mn,Ce,Ja,Nn,X,Qa,Ot,Va,Xa,Hn,O,Za,Dt,eo,to,Ct,no,so,gt,ao,Rn,R,oo,At,lo,io,Mt,po,ro,Sn,me,Ap=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.edit#L31-L43</span>

IfExpression <span class="token punctuation">&#123;</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">projection</span></span> normal
        <span class="token punctuation">[</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>$<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>condition<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> then
                  $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>whenTrue<span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
           $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>whenFalse<span class="token punctuation">&#125;</span>
        endif
        <span class="token punctuation">]</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">trigger</span></span> <span class="token string">"if"</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">symbol</span></span> <span class="token string">"if"</span>
<span class="token punctuation">&#125;</span></code>`,Fn,ge,co,Wn,E,uo,Nt,fo,ho,Ht,ko,mo,Rt,yo,wo,St,bo,Eo,zn,Z,vo,Ft,_o,xo,Bn,ye,Mp=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.edit#L55-L57</span>

PlusExpression <span class="token punctuation">&#123;</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">symbol</span></span> <span class="token string">"+"</span>
<span class="token punctuation">&#125;</span></code>`,Gn,Ae,To,Yn,ee,jo,Me,$o,Io,qn,S,Po,Wt,Lo,Oo,zt,Do,Co,Un,we,Np=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.edit#L101-L114</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">projection</span></span> showAll
        <span class="token punctuation">[</span>
        model $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
        entities<span class="token operator">:</span>
            $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>entities
                <span class="token decorator"><span class="token at operator">@</span><span class="token function">vertical</span></span>
                <span class="token decorator"><span class="token at operator">@</span><span class="token function">terminator</span></span> <span class="token punctuation">[</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">]</span>
            <span class="token punctuation">&#125;</span>
        model wide functions<span class="token operator">:</span>
            $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>functions <span class="token decorator"><span class="token at operator">@</span><span class="token function">horizontal</span></span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">separator</span></span> <span class="token punctuation">[</span><span class="token punctuation">;</span> <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>
</code>`,Kn,v,go,Bt,Ao,Mo,Gt,No,Ho,Yt,Ro,So,qt,Fo,Wo,Jn,te,Qn,be,Ut,zo,Vn,Ne,Bo,Xn,He,Go,Zn,ne,D,Yo,Kt,qo,Uo,Jt,Ko,Jo,Qt,Qo,Vo,Xo,Vt,Zo,es,Re,el,ts,F,tl,Xt,nl,sl,Zt,al,ol,ns,Ee,Hp=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.edit#L73-L81</span>

Entity <span class="token punctuation">&#123;</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">projection</span></span> normal <span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token operator">?</span>$<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>isCompany <span class="token decorator"><span class="token at operator">@</span><span class="token function">keyword</span></span><span class="token punctuation">[</span><span class="token constant">COMPANY</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>
        entity $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> <span class="token punctuation">[</span><span class="token operator">?</span> base $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>baseEntity<span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
            $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>attributes <span class="token decorator"><span class="token at operator">@</span><span class="token function">vertical</span></span> <span class="token punctuation">&#125;</span>       <span class="token comment">// this list is projected as a vertical list without separator or terminator</span>
            $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>functions  <span class="token decorator"><span class="token at operator">@</span><span class="token function">table</span></span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">columns</span></span> <span class="token punctuation">&#125;</span> <span class="token comment">// this list is projected as a column based table</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`,ss,W,ll,en,il,pl,tn,rl,cl,as,ve,Rp=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.edit#L115-L121</span>

EntityFunction <span class="token punctuation">&#123;</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">table</span></span> <span class="token punctuation">[</span>
        Name         <span class="token operator">|</span> parameters          <span class="token operator">|</span> type                 <span class="token operator">|</span> body
        $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> <span class="token operator">|</span> $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>parameters <span class="token decorator"><span class="token at operator">@</span><span class="token function">table</span></span> <span class="token punctuation">&#125;</span> <span class="token operator">|</span> $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>declaredType<span class="token punctuation">&#125;</span> <span class="token operator">|</span> $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>expression<span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>
</code>`,os,se,ul,nn,fl,hl,ls,Se,dl,is,Fe,kl,ps,ae,ml,sn,yl,wl,rs,z,bl,an,El,vl,on,_l,xl,cs,$,Tl,ln,jl,$l,pn,Il,Pl,rn,Ll,Ol,us,_e,Sp=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.ast#L26-L32</span>

concept Entity <span class="token keyword">implements</span> <span class="token class-name">Type</span> <span class="token punctuation">&#123;</span>
    isCompany<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    attributes<span class="token operator">:</span> AttributeWithLimitedType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    entAttributes<span class="token operator">:</span> AttributeWithEntityType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    functions<span class="token operator">:</span> EntityFunction<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    reference baseEntity<span class="token operator">?</span><span class="token operator">:</span> Entity<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,fs,xe,Fp=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.edit#L73-L82</span>

Entity <span class="token punctuation">&#123;</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">projection</span></span> normal <span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token operator">?</span>$<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>isCompany <span class="token decorator"><span class="token at operator">@</span><span class="token function">keyword</span></span><span class="token punctuation">[</span><span class="token constant">COMPANY</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>
        entity $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> <span class="token punctuation">[</span><span class="token operator">?</span> base $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>baseEntity<span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
            $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>attributes <span class="token decorator"><span class="token at operator">@</span><span class="token function">vertical</span></span> <span class="token punctuation">&#125;</span>       <span class="token comment">// this list is projected as a vertical list without separator or terminator</span>
            $<span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>functions  <span class="token decorator"><span class="token at operator">@</span><span class="token function">table</span></span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">columns</span></span> <span class="token punctuation">&#125;</span> <span class="token comment">// this list is projected as a column based table</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>
</code>`,hs,We,Dl,ds,w,Cl,cn,gl,Al,un,Ml,Nl,fn,Hl,Rl,hn,Sl,Fl,dn,Wl,zl,ks,ze,Bl,ms,Be,Gl,ys,Ge,Yl,ws,Ye,ql,bs,qe,Ul,Es;return L=new ni({props:{$$slots:{content:[tr],header:[er]},$$scope:{ctx:P}}}),Q=new ni({props:{$$slots:{content:[sr],header:[nr]},$$scope:{ctx:P}}}),te=new ni({props:{$$slots:{content:[or],header:[ar]},$$scope:{ctx:P}}}),{c(){h=o("h1"),f=s("The Editor Definition"),k=c(),_=o("p"),C=s("The editor definition is the definition of the "),q=o("strong"),U=s("concrete syntax"),d=s(` of the language. It is used for the generation of the editor, as
well as the generation of the parser and unparser. The concrete syntax given in the editor definition is also used
to produce better readable error messages as produced by the validator.`),x=c(),Ql(L.$$.fragment),wn=c(),pe=o("h3"),at=o("a"),Ds=s(" Three-level definition"),bn=c(),g=o("p"),Cs=s("As explained in "),$e=o("a"),gs=s("Three Levels of Customization"),As=s(` the generated editor can be defined at three levels.
For each `),ot=o("em"),Ms=s("concept"),Ns=s(" in the AST the editor will"),En=c(),A=o("ol"),re=o("li"),Hs=s("use the "),lt=o("em"),Rs=s("hand-made projection"),Ss=s(", when this is present. Otherwise the editor will"),Fs=c(),ce=o("li"),Ws=s("use to the "),it=o("em"),zs=s("projection generated from the editor definition"),Bs=s(", when this definition is present. Finally, the editor will"),Gs=c(),ue=o("li"),Ys=s("use the "),pt=o("em"),qs=s("default projection"),Us=s("."),vn=c(),j=o("p"),Ks=s("When a "),rt=o("em"),Js=s("concept"),Qs=s(" is marked as an "),ct=o("strong"),Vs=s("binary expression concept"),Xs=s(`, its default projection is usually the one you
want to go with, because of the extra `),Ie=o("a"),Zs=s("support for expressions"),ea=s(`
that is incorporated in it.`),_n=c(),M=o("p"),ta=s("The rest of this tutorial explains the second level: how to write an editor definition ("),ut=o("code"),na=s(".edit"),sa=s(` file).
For making more adjustments to the projection by adding hand-made projections on the third level, see the
tutorial on `),Pe=o("a"),aa=s("using the framework"),oa=s("."),xn=c(),fe=o("h2"),ft=o("a"),la=s(" The Editor Definition File"),Tn=c(),N=o("p"),ia=s("In the editor definition file ("),ht=o("code"),pa=s(".edit"),ra=s(` file) you can define a ProjectIt editor by providing extra information
for each `),dt=o("em"),ca=s("concept"),ua=s(" in your language. Currently, you can define the following three items."),jn=c(),H=o("ul"),K=o("li"),kt=o("strong"),fa=s("Projection"),ha=s(", which is how the "),mt=o("em"),da=s("concept"),ka=s(" is shown in the editor."),ma=c(),J=o("li"),yt=o("strong"),ya=s("Trigger"),wa=s(", which is the key or keys your user needs to type to create a new instance of the "),wt=o("strong"),ba=s("concept"),Ea=s("."),va=c(),y=o("li"),bt=o("strong"),_a=s("Symbol"),xa=s(", which is optional and only used for "),Et=o("strong"),Ta=s("binary expressions"),ja=s(`. It is the character or
character string that is shown when a `),vt=o("em"),$a=s("binary expression"),Ia=s(` is being added to your user\u2019s model.
It represents the `),_t=o("em"),Pa=s("operator"),La=s(". When the "),xt=o("em"),Oa=s("symbol"),Da=s(" is not present, the "),Tt=o("em"),Ca=s("trigger"),ga=s(" will be used."),$n=c(),Le=o("h3"),Aa=s("Projections and Indentation"),In=c(),b=o("p"),Ma=s("In the "),jt=o("code"),Na=s(".edit"),Ha=s(" file a "),$t=o("em"),Ra=s("projection"),Sa=s(` is defined between angular brackets.
This is done in a style similar from markdown, what you see looks close to what you get.
Everything within the square brackets (`),It=o("code"),Fa=s("[]"),Wa=s(`), except
the parts surrounded by `),Pt=o("code"),za=s("${}"),Ba=s(", is taken literally, including any indentation."),Pn=c(),he=o("pre"),Ln=c(),Oe=o("p"),Ga=s(`When the indentation of the opening and closing brackets aligns, this indentation is not taken into account.
Then the column in which the brackets appear is seen as the first column of the projection. In the above example t
his is not the case, therefore the text \u201CThis is\u201D will be shown at the beginning of the line, but the text
\u201Cliteral text\u201D will be shown with a indentation of 16 spaces. The same holds for \u201Ceditor\u201D, but the text
\u201Cthat is projected in the\u201D will be indented with 10 spaces. The text \u201Cfor every concept of type Text\u201D
will be shown with an indentation of 8 spaces.`),On=c(),Ql(Q.$$.fragment),Dn=c(),V=o("p"),Ya=s(`If the closing bracket would be positioned on the line after the text,
`),Lt=o("strong"),qa=s("and"),Ua=s(` it would be indented with 8 spaces, then the text
would be shown without any indentation, as shown in the next example.`),Cn=c(),de=o("pre"),gn=c(),De=o("p"),Ka=s("Using \u2018[+\u2019 you can indicate that a newline should be added."),An=c(),ke=o("pre"),Mn=c(),Ce=o("h3"),Ja=s("Including Subprojections"),Nn=c(),X=o("p"),Qa=s("By using "),Ot=o("code"),Va=s("${}"),Xa=s(` you tell ProjectIt to include a property. Its projection is defined
by the projection for its concept.`),Hn=c(),O=o("p"),Za=s("In the following example "),Dt=o("code"),eo=s("self.condition"),to=s(" is a property of type "),Ct=o("code"),no=s("BooleanLiteralExpression"),so=s(`.
It will be projected according to the definition for this concept, whereas `),gt=o("code"),ao=s("self.whenTrue"),Rn=c(),R=o("p"),oo=s("is a property of type "),At=o("code"),lo=s("EntityExpression"),io=s(`, which is abstract. This property
will be projected according to the definition for subtype of `),Mt=o("code"),po=s("EntityExpression"),ro=s(" that is currently found."),Sn=c(),me=o("pre"),Fn=c(),ge=o("h3"),co=s("Triggers and Symbols"),Wn=c(),E=o("p"),uo=s("The example above, the projection for "),Nt=o("code"),fo=s("IfExpression"),ho=s(", also shows how to define a "),Ht=o("strong"),ko=s("trigger"),mo=s(`, and
a `),Rt=o("strong"),yo=s("symbol"),wo=s(` for an expression. The trigger is a string a characters that is used to trigger the creation
of an instance of concept `),St=o("code"),bo=s("IfExpression"),Eo=s(". The symbol here is not really useful."),zn=c(),Z=o("p"),vo=s("In the next example, the symbol is used to define the operator of the binary expression "),Ft=o("code"),_o=s("PlusExpression"),xo=s("."),Bn=c(),ye=o("pre"),Gn=c(),Ae=o("h3"),To=s("Lists"),Yn=c(),ee=o("p"),jo=s(`If a property is a list, you can indicate whether it should be projected horizontally or vertically.
The default is horizontal. You can also choose to project it as a `),Me=o("a"),$o=s("table"),Io=s("."),qn=c(),S=o("p"),Po=s("Furthermore, you can add either a "),Wt=o("em"),Lo=s("separator"),Oo=s(` string, which will be shown in between all elements,
or a `),zt=o("em"),Do=s("terminator"),Co=s(" string, which will be shown after each element. Both are optional."),Un=c(),we=o("pre"),Kn=c(),v=o("p"),go=s("Both keywords are optional. If neither of "),Bt=o("code"),Ao=s("@vertical"),Mo=s(" or "),Gt=o("code"),No=s("@horizontal"),Ho=s(` is present, the property will be displayed as
a vertical list. If neither of `),Yt=o("code"),Ro=s("@separator"),So=s(" or "),qt=o("code"),Fo=s("@terminator"),Wo=s(` is present, the elements of the list will be displayed separated
by a space.`),Jn=c(),Ql(te.$$.fragment),Qn=c(),be=o("h3"),Ut=o("a"),zo=s("Tables"),Vn=c(),Ne=o("p"),Bo=s(`If a property is a list, you can choose to project it as a table. Tables can be either row or column based.
Row based means that each element of the list is displayed in a row. Column based, obviously, means that
each element is displayed in a single column. The default is row based.`),Xn=c(),He=o("p"),Go=s("Defining a table is a two-step process."),Zn=c(),ne=o("ol"),D=o("li"),Yo=s("Add the keyword "),Kt=o("code"),qo=s("@table"),Uo=s(` to the list property that
you want to display as a table. Optionally, add one of the keywords `),Jt=o("code"),Ko=s("@rows"),Jo=s(" or "),Qt=o("code"),Qo=s("@columns"),Vo=s("."),Xo=c(),Vt=o("li"),Zo=s(`Add a table-projection to the type of the property. The table-projection defines
the headers of the table and which parts of the list elements are displayed in which row or column.`),es=c(),Re=o("p"),el=s(`Note that you only need to include one
table projection for both column and row based tables. ProjectIt will swap the entries when needed.`),ts=c(),F=o("p"),tl=s("For example, to project the "),Xt=o("code"),nl=s("functions"),sl=s(" property of concept "),Zt=o("code"),al=s("Entity"),ol=s(" as a column based table, you can use the following code."),ns=c(),Ee=o("pre"),ss=c(),W=o("p"),ll=s("Given the above example, there should also be a projection tagged "),en=o("code"),il=s("@table"),pl=s(" for the concept "),tn=o("code"),rl=s("EntityFunction"),cl=s(`.
Below four columns/rows are defined, each with its own header.`),as=c(),ve=o("pre"),os=c(),se=o("p"),ul=s(`Note that the manner in which each of the properties of a single function are displayed, will be determined
by their own projections. In this example, `),nn=o("code"),fl=s("self.parameters"),hl=s(` is a list, and will be displayed as another table.
The inner table will, however, be row-based, as this is the default.`),ls=c(),Se=o("p"),dl=s(`Note also that the whitespace between the headers is not needed. However, for clarity, it is probably
good style to align the column/row-separators.`),is=c(),Fe=o("h3"),kl=s("Optional Projections"),ps=c(),ae=o("p"),ml=s(`When a property is marked optional in the language structure definition (the .ast files), the projection
of this property should also be optional. This is indicated by \u2019`),sn=o("code"),yl=s("[?"),wl=s("\u2018."),rs=c(),z=o("p"),bl=s("In the next example the property "),an=o("code"),El=s("baseEntity"),vl=s(` is only shown if it is present. If it is not present,
the text `),on=o("code"),_l=s("base"),xl=s(" is omitted as well."),cs=c(),$=o("p"),Tl=s("Because, in this case, "),ln=o("code"),jl=s("baseEntity"),$l=s(` is a reference property, the element that will be created is an
instance of a special class that represents a reference to an `),pn=o("code"),Il=s("Entity"),Pl=s(`. What is shown is the name of the
referred `),rn=o("code"),Ll=s("Entity"),Ol=s("."),us=c(),_e=o("pre"),fs=c(),xe=o("pre"),hs=c(),We=o("h3"),Dl=s("Keyword Projections"),ds=c(),w=o("p"),Cl=s("The previous example also shows the special manner in which properties of type "),cn=o("code"),gl=s("boolean"),Al=s(` can be
projected. The property is represented by a keyword. In this case the property is `),un=o("code"),Ml=s("isCompany"),Nl=s(` and the
keyword representing the property is `),fn=o("code"),Hl=s("COMPANY"),Rl=s(`. When the value
of the property is `),hn=o("code"),Sl=s("true"),Fl=s(", the keyword is shown. When the value is "),dn=o("code"),Wl=s("false"),zl=s(", the keyword is not shown."),ks=c(),ze=o("p"),Bl=s("The user can change the value of the property using the keyword as trigger."),ms=c(),Be=o("p"),Gl=s("// TODO add limited projections"),ys=c(),Ge=o("h3"),Yl=s("Projection Names"),ws=c(),Ye=o("p"),ql=s(`Each projection can have a name. Currently, these names are not in use, but in future we plan to
use these names to build a number of sets of projections that are coordinated to operate together.`),bs=c(),qe=o("p"),Ul=s(`For instance, you could have a projection set that shows only part of the properties of some
concepts, whereas another set shows all properties. Or you can have a set that shows suitable concepts
as tables, and another set that shows the same concepts as text.`),this.h()},l(e){h=l(e,"H1",{});var p=i(h);f=a(p,"The Editor Definition"),p.forEach(n),k=u(e),_=l(e,"P",{});var Te=i(_);C=a(Te,"The editor definition is the definition of the "),q=l(Te,"STRONG",{});var kn=i(q);U=a(kn,"concrete syntax"),kn.forEach(n),d=a(Te,` of the language. It is used for the generation of the editor, as
well as the generation of the parser and unparser. The concrete syntax given in the editor definition is also used
to produce better readable error messages as produced by the validator.`),Te.forEach(n),x=u(e),Vl(L.$$.fragment,e),wn=u(e),pe=l(e,"H3",{});var Ue=i(pe);at=l(Ue,"A",{name:!0}),i(at).forEach(n),Ds=a(Ue," Three-level definition"),Ue.forEach(n),bn=u(e),g=l(e,"P",{});var Ke=i(g);Cs=a(Ke,"As explained in "),$e=l(Ke,"A",{href:!0});var si=i($e);gs=a(si,"Three Levels of Customization"),si.forEach(n),As=a(Ke,` the generated editor can be defined at three levels.
For each `),ot=l(Ke,"EM",{});var ai=i(ot);Ms=a(ai,"concept"),ai.forEach(n),Ns=a(Ke," in the AST the editor will"),Ke.forEach(n),En=u(e),A=l(e,"OL",{});var Je=i(A);re=l(Je,"LI",{});var vs=i(re);Hs=a(vs,"use the "),lt=l(vs,"EM",{});var oi=i(lt);Rs=a(oi,"hand-made projection"),oi.forEach(n),Ss=a(vs,", when this is present. Otherwise the editor will"),vs.forEach(n),Fs=u(Je),ce=l(Je,"LI",{});var _s=i(ce);Ws=a(_s,"use to the "),it=l(_s,"EM",{});var li=i(it);zs=a(li,"projection generated from the editor definition"),li.forEach(n),Bs=a(_s,", when this definition is present. Finally, the editor will"),_s.forEach(n),Gs=u(Je),ue=l(Je,"LI",{});var xs=i(ue);Ys=a(xs,"use the "),pt=l(xs,"EM",{});var ii=i(pt);qs=a(ii,"default projection"),ii.forEach(n),Us=a(xs,"."),xs.forEach(n),Je.forEach(n),vn=u(e),j=l(e,"P",{});var oe=i(j);Ks=a(oe,"When a "),rt=l(oe,"EM",{});var pi=i(rt);Js=a(pi,"concept"),pi.forEach(n),Qs=a(oe," is marked as an "),ct=l(oe,"STRONG",{});var ri=i(ct);Vs=a(ri,"binary expression concept"),ri.forEach(n),Xs=a(oe,`, its default projection is usually the one you
want to go with, because of the extra `),Ie=l(oe,"A",{href:!0});var ci=i(Ie);Zs=a(ci,"support for expressions"),ci.forEach(n),ea=a(oe,`
that is incorporated in it.`),oe.forEach(n),_n=u(e),M=l(e,"P",{});var Qe=i(M);ta=a(Qe,"The rest of this tutorial explains the second level: how to write an editor definition ("),ut=l(Qe,"CODE",{});var ui=i(ut);na=a(ui,".edit"),ui.forEach(n),sa=a(Qe,` file).
For making more adjustments to the projection by adding hand-made projections on the third level, see the
tutorial on `),Pe=l(Qe,"A",{href:!0});var fi=i(Pe);aa=a(fi,"using the framework"),fi.forEach(n),oa=a(Qe,"."),Qe.forEach(n),xn=u(e),fe=l(e,"H2",{});var Kl=i(fe);ft=l(Kl,"A",{name:!0}),i(ft).forEach(n),la=a(Kl," The Editor Definition File"),Kl.forEach(n),Tn=u(e),N=l(e,"P",{});var Ve=i(N);ia=a(Ve,"In the editor definition file ("),ht=l(Ve,"CODE",{});var hi=i(ht);pa=a(hi,".edit"),hi.forEach(n),ra=a(Ve,` file) you can define a ProjectIt editor by providing extra information
for each `),dt=l(Ve,"EM",{});var di=i(dt);ca=a(di,"concept"),di.forEach(n),ua=a(Ve," in your language. Currently, you can define the following three items."),Ve.forEach(n),jn=u(e),H=l(e,"UL",{});var Xe=i(H);K=l(Xe,"LI",{});var mn=i(K);kt=l(mn,"STRONG",{});var ki=i(kt);fa=a(ki,"Projection"),ki.forEach(n),ha=a(mn,", which is how the "),mt=l(mn,"EM",{});var mi=i(mt);da=a(mi,"concept"),mi.forEach(n),ka=a(mn," is shown in the editor."),mn.forEach(n),ma=u(Xe),J=l(Xe,"LI",{});var yn=i(J);yt=l(yn,"STRONG",{});var yi=i(yt);ya=a(yi,"Trigger"),yi.forEach(n),wa=a(yn,", which is the key or keys your user needs to type to create a new instance of the "),wt=l(yn,"STRONG",{});var wi=i(wt);ba=a(wi,"concept"),wi.forEach(n),Ea=a(yn,"."),yn.forEach(n),va=u(Xe),y=l(Xe,"LI",{});var T=i(y);bt=l(T,"STRONG",{});var bi=i(bt);_a=a(bi,"Symbol"),bi.forEach(n),xa=a(T,", which is optional and only used for "),Et=l(T,"STRONG",{});var Ei=i(Et);Ta=a(Ei,"binary expressions"),Ei.forEach(n),ja=a(T,`. It is the character or
character string that is shown when a `),vt=l(T,"EM",{});var vi=i(vt);$a=a(vi,"binary expression"),vi.forEach(n),Ia=a(T,` is being added to your user\u2019s model.
It represents the `),_t=l(T,"EM",{});var _i=i(_t);Pa=a(_i,"operator"),_i.forEach(n),La=a(T,". When the "),xt=l(T,"EM",{});var xi=i(xt);Oa=a(xi,"symbol"),xi.forEach(n),Da=a(T," is not present, the "),Tt=l(T,"EM",{});var Ti=i(Tt);Ca=a(Ti,"trigger"),Ti.forEach(n),ga=a(T," will be used."),T.forEach(n),Xe.forEach(n),$n=u(e),Le=l(e,"H3",{});var ji=i(Le);Aa=a(ji,"Projections and Indentation"),ji.forEach(n),In=u(e),b=l(e,"P",{});var B=i(b);Ma=a(B,"In the "),jt=l(B,"CODE",{});var $i=i(jt);Na=a($i,".edit"),$i.forEach(n),Ha=a(B," file a "),$t=l(B,"EM",{});var Ii=i($t);Ra=a(Ii,"projection"),Ii.forEach(n),Sa=a(B,` is defined between angular brackets.
This is done in a style similar from markdown, what you see looks close to what you get.
Everything within the square brackets (`),It=l(B,"CODE",{});var Pi=i(It);Fa=a(Pi,"[]"),Pi.forEach(n),Wa=a(B,`), except
the parts surrounded by `),Pt=l(B,"CODE",{});var Li=i(Pt);za=a(Li,"${}"),Li.forEach(n),Ba=a(B,", is taken literally, including any indentation."),B.forEach(n),Pn=u(e),he=l(e,"PRE",{class:!0});var Wp=i(he);Wp.forEach(n),Ln=u(e),Oe=l(e,"P",{});var Oi=i(Oe);Ga=a(Oi,`When the indentation of the opening and closing brackets aligns, this indentation is not taken into account.
Then the column in which the brackets appear is seen as the first column of the projection. In the above example t
his is not the case, therefore the text \u201CThis is\u201D will be shown at the beginning of the line, but the text
\u201Cliteral text\u201D will be shown with a indentation of 16 spaces. The same holds for \u201Ceditor\u201D, but the text
\u201Cthat is projected in the\u201D will be indented with 10 spaces. The text \u201Cfor every concept of type Text\u201D
will be shown with an indentation of 8 spaces.`),Oi.forEach(n),On=u(e),Vl(Q.$$.fragment,e),Dn=u(e),V=l(e,"P",{});var Ts=i(V);Ya=a(Ts,`If the closing bracket would be positioned on the line after the text,
`),Lt=l(Ts,"STRONG",{});var Di=i(Lt);qa=a(Di,"and"),Di.forEach(n),Ua=a(Ts,` it would be indented with 8 spaces, then the text
would be shown without any indentation, as shown in the next example.`),Ts.forEach(n),Cn=u(e),de=l(e,"PRE",{class:!0});var zp=i(de);zp.forEach(n),gn=u(e),De=l(e,"P",{});var Ci=i(De);Ka=a(Ci,"Using \u2018[+\u2019 you can indicate that a newline should be added."),Ci.forEach(n),An=u(e),ke=l(e,"PRE",{class:!0});var Bp=i(ke);Bp.forEach(n),Mn=u(e),Ce=l(e,"H3",{});var gi=i(Ce);Ja=a(gi,"Including Subprojections"),gi.forEach(n),Nn=u(e),X=l(e,"P",{});var js=i(X);Qa=a(js,"By using "),Ot=l(js,"CODE",{});var Ai=i(Ot);Va=a(Ai,"${}"),Ai.forEach(n),Xa=a(js,` you tell ProjectIt to include a property. Its projection is defined
by the projection for its concept.`),js.forEach(n),Hn=u(e),O=l(e,"P",{});var je=i(O);Za=a(je,"In the following example "),Dt=l(je,"CODE",{});var Mi=i(Dt);eo=a(Mi,"self.condition"),Mi.forEach(n),to=a(je," is a property of type "),Ct=l(je,"CODE",{});var Ni=i(Ct);no=a(Ni,"BooleanLiteralExpression"),Ni.forEach(n),so=a(je,`.
It will be projected according to the definition for this concept, whereas `),gt=l(je,"CODE",{});var Hi=i(gt);ao=a(Hi,"self.whenTrue"),Hi.forEach(n),je.forEach(n),Rn=u(e),R=l(e,"P",{});var Ze=i(R);oo=a(Ze,"is a property of type "),At=l(Ze,"CODE",{});var Ri=i(At);lo=a(Ri,"EntityExpression"),Ri.forEach(n),io=a(Ze,`, which is abstract. This property
will be projected according to the definition for subtype of `),Mt=l(Ze,"CODE",{});var Si=i(Mt);po=a(Si,"EntityExpression"),Si.forEach(n),ro=a(Ze," that is currently found."),Ze.forEach(n),Sn=u(e),me=l(e,"PRE",{class:!0});var Gp=i(me);Gp.forEach(n),Fn=u(e),ge=l(e,"H3",{});var Fi=i(ge);co=a(Fi,"Triggers and Symbols"),Fi.forEach(n),Wn=u(e),E=l(e,"P",{});var G=i(E);uo=a(G,"The example above, the projection for "),Nt=l(G,"CODE",{});var Wi=i(Nt);fo=a(Wi,"IfExpression"),Wi.forEach(n),ho=a(G,", also shows how to define a "),Ht=l(G,"STRONG",{});var zi=i(Ht);ko=a(zi,"trigger"),zi.forEach(n),mo=a(G,`, and
a `),Rt=l(G,"STRONG",{});var Bi=i(Rt);yo=a(Bi,"symbol"),Bi.forEach(n),wo=a(G,` for an expression. The trigger is a string a characters that is used to trigger the creation
of an instance of concept `),St=l(G,"CODE",{});var Gi=i(St);bo=a(Gi,"IfExpression"),Gi.forEach(n),Eo=a(G,". The symbol here is not really useful."),G.forEach(n),zn=u(e),Z=l(e,"P",{});var $s=i(Z);vo=a($s,"In the next example, the symbol is used to define the operator of the binary expression "),Ft=l($s,"CODE",{});var Yi=i(Ft);_o=a(Yi,"PlusExpression"),Yi.forEach(n),xo=a($s,"."),$s.forEach(n),Bn=u(e),ye=l(e,"PRE",{class:!0});var Yp=i(ye);Yp.forEach(n),Gn=u(e),Ae=l(e,"H3",{});var qi=i(Ae);To=a(qi,"Lists"),qi.forEach(n),Yn=u(e),ee=l(e,"P",{});var Is=i(ee);jo=a(Is,`If a property is a list, you can indicate whether it should be projected horizontally or vertically.
The default is horizontal. You can also choose to project it as a `),Me=l(Is,"A",{href:!0});var Ui=i(Me);$o=a(Ui,"table"),Ui.forEach(n),Io=a(Is,"."),Is.forEach(n),qn=u(e),S=l(e,"P",{});var et=i(S);Po=a(et,"Furthermore, you can add either a "),Wt=l(et,"EM",{});var Ki=i(Wt);Lo=a(Ki,"separator"),Ki.forEach(n),Oo=a(et,` string, which will be shown in between all elements,
or a `),zt=l(et,"EM",{});var Ji=i(zt);Do=a(Ji,"terminator"),Ji.forEach(n),Co=a(et," string, which will be shown after each element. Both are optional."),et.forEach(n),Un=u(e),we=l(e,"PRE",{class:!0});var qp=i(we);qp.forEach(n),Kn=u(e),v=l(e,"P",{});var Y=i(v);go=a(Y,"Both keywords are optional. If neither of "),Bt=l(Y,"CODE",{});var Qi=i(Bt);Ao=a(Qi,"@vertical"),Qi.forEach(n),Mo=a(Y," or "),Gt=l(Y,"CODE",{});var Vi=i(Gt);No=a(Vi,"@horizontal"),Vi.forEach(n),Ho=a(Y,` is present, the property will be displayed as
a vertical list. If neither of `),Yt=l(Y,"CODE",{});var Xi=i(Yt);Ro=a(Xi,"@separator"),Xi.forEach(n),So=a(Y," or "),qt=l(Y,"CODE",{});var Zi=i(qt);Fo=a(Zi,"@terminator"),Zi.forEach(n),Wo=a(Y,` is present, the elements of the list will be displayed separated
by a space.`),Y.forEach(n),Jn=u(e),Vl(te.$$.fragment,e),Qn=u(e),be=l(e,"H3",{});var Jl=i(be);Ut=l(Jl,"A",{name:!0}),i(Ut).forEach(n),zo=a(Jl,"Tables"),Jl.forEach(n),Vn=u(e),Ne=l(e,"P",{});var ep=i(Ne);Bo=a(ep,`If a property is a list, you can choose to project it as a table. Tables can be either row or column based.
Row based means that each element of the list is displayed in a row. Column based, obviously, means that
each element is displayed in a single column. The default is row based.`),ep.forEach(n),Xn=u(e),He=l(e,"P",{});var tp=i(He);Go=a(tp,"Defining a table is a two-step process."),tp.forEach(n),Zn=u(e),ne=l(e,"OL",{});var Ps=i(ne);D=l(Ps,"LI",{});var le=i(D);Yo=a(le,"Add the keyword "),Kt=l(le,"CODE",{});var np=i(Kt);qo=a(np,"@table"),np.forEach(n),Uo=a(le,` to the list property that
you want to display as a table. Optionally, add one of the keywords `),Jt=l(le,"CODE",{});var sp=i(Jt);Ko=a(sp,"@rows"),sp.forEach(n),Jo=a(le," or "),Qt=l(le,"CODE",{});var ap=i(Qt);Qo=a(ap,"@columns"),ap.forEach(n),Vo=a(le,"."),le.forEach(n),Xo=u(Ps),Vt=l(Ps,"LI",{});var op=i(Vt);Zo=a(op,`Add a table-projection to the type of the property. The table-projection defines
the headers of the table and which parts of the list elements are displayed in which row or column.`),op.forEach(n),Ps.forEach(n),es=u(e),Re=l(e,"P",{});var lp=i(Re);el=a(lp,`Note that you only need to include one
table projection for both column and row based tables. ProjectIt will swap the entries when needed.`),lp.forEach(n),ts=u(e),F=l(e,"P",{});var tt=i(F);tl=a(tt,"For example, to project the "),Xt=l(tt,"CODE",{});var ip=i(Xt);nl=a(ip,"functions"),ip.forEach(n),sl=a(tt," property of concept "),Zt=l(tt,"CODE",{});var pp=i(Zt);al=a(pp,"Entity"),pp.forEach(n),ol=a(tt," as a column based table, you can use the following code."),tt.forEach(n),ns=u(e),Ee=l(e,"PRE",{class:!0});var Up=i(Ee);Up.forEach(n),ss=u(e),W=l(e,"P",{});var nt=i(W);ll=a(nt,"Given the above example, there should also be a projection tagged "),en=l(nt,"CODE",{});var rp=i(en);il=a(rp,"@table"),rp.forEach(n),pl=a(nt," for the concept "),tn=l(nt,"CODE",{});var cp=i(tn);rl=a(cp,"EntityFunction"),cp.forEach(n),cl=a(nt,`.
Below four columns/rows are defined, each with its own header.`),nt.forEach(n),as=u(e),ve=l(e,"PRE",{class:!0});var Kp=i(ve);Kp.forEach(n),os=u(e),se=l(e,"P",{});var Ls=i(se);ul=a(Ls,`Note that the manner in which each of the properties of a single function are displayed, will be determined
by their own projections. In this example, `),nn=l(Ls,"CODE",{});var up=i(nn);fl=a(up,"self.parameters"),up.forEach(n),hl=a(Ls,` is a list, and will be displayed as another table.
The inner table will, however, be row-based, as this is the default.`),Ls.forEach(n),ls=u(e),Se=l(e,"P",{});var fp=i(Se);dl=a(fp,`Note also that the whitespace between the headers is not needed. However, for clarity, it is probably
good style to align the column/row-separators.`),fp.forEach(n),is=u(e),Fe=l(e,"H3",{});var hp=i(Fe);kl=a(hp,"Optional Projections"),hp.forEach(n),ps=u(e),ae=l(e,"P",{});var Os=i(ae);ml=a(Os,`When a property is marked optional in the language structure definition (the .ast files), the projection
of this property should also be optional. This is indicated by \u2019`),sn=l(Os,"CODE",{});var dp=i(sn);yl=a(dp,"[?"),dp.forEach(n),wl=a(Os,"\u2018."),Os.forEach(n),rs=u(e),z=l(e,"P",{});var st=i(z);bl=a(st,"In the next example the property "),an=l(st,"CODE",{});var kp=i(an);El=a(kp,"baseEntity"),kp.forEach(n),vl=a(st,` is only shown if it is present. If it is not present,
the text `),on=l(st,"CODE",{});var mp=i(on);_l=a(mp,"base"),mp.forEach(n),xl=a(st," is omitted as well."),st.forEach(n),cs=u(e),$=l(e,"P",{});var ie=i($);Tl=a(ie,"Because, in this case, "),ln=l(ie,"CODE",{});var yp=i(ln);jl=a(yp,"baseEntity"),yp.forEach(n),$l=a(ie,` is a reference property, the element that will be created is an
instance of a special class that represents a reference to an `),pn=l(ie,"CODE",{});var wp=i(pn);Il=a(wp,"Entity"),wp.forEach(n),Pl=a(ie,`. What is shown is the name of the
referred `),rn=l(ie,"CODE",{});var bp=i(rn);Ll=a(bp,"Entity"),bp.forEach(n),Ol=a(ie,"."),ie.forEach(n),us=u(e),_e=l(e,"PRE",{class:!0});var Jp=i(_e);Jp.forEach(n),fs=u(e),xe=l(e,"PRE",{class:!0});var Qp=i(xe);Qp.forEach(n),hs=u(e),We=l(e,"H3",{});var Ep=i(We);Dl=a(Ep,"Keyword Projections"),Ep.forEach(n),ds=u(e),w=l(e,"P",{});var I=i(w);Cl=a(I,"The previous example also shows the special manner in which properties of type "),cn=l(I,"CODE",{});var vp=i(cn);gl=a(vp,"boolean"),vp.forEach(n),Al=a(I,` can be
projected. The property is represented by a keyword. In this case the property is `),un=l(I,"CODE",{});var _p=i(un);Ml=a(_p,"isCompany"),_p.forEach(n),Nl=a(I,` and the
keyword representing the property is `),fn=l(I,"CODE",{});var xp=i(fn);Hl=a(xp,"COMPANY"),xp.forEach(n),Rl=a(I,`. When the value
of the property is `),hn=l(I,"CODE",{});var Tp=i(hn);Sl=a(Tp,"true"),Tp.forEach(n),Fl=a(I,", the keyword is shown. When the value is "),dn=l(I,"CODE",{});var jp=i(dn);Wl=a(jp,"false"),jp.forEach(n),zl=a(I,", the keyword is not shown."),I.forEach(n),ks=u(e),ze=l(e,"P",{});var $p=i(ze);Bl=a($p,"The user can change the value of the property using the keyword as trigger."),$p.forEach(n),ms=u(e),Be=l(e,"P",{});var Ip=i(Be);Gl=a(Ip,"// TODO add limited projections"),Ip.forEach(n),ys=u(e),Ge=l(e,"H3",{});var Pp=i(Ge);Yl=a(Pp,"Projection Names"),Pp.forEach(n),ws=u(e),Ye=l(e,"P",{});var Lp=i(Ye);ql=a(Lp,`Each projection can have a name. Currently, these names are not in use, but in future we plan to
use these names to build a number of sets of projections that are coordinated to operate together.`),Lp.forEach(n),bs=u(e),qe=l(e,"P",{});var Op=i(qe);Ul=a(Op,`For instance, you could have a projection set that shows only part of the properties of some
concepts, whereas another set shows all properties. Or you can have a set that shows suitable concepts
as tables, and another set that shows the same concepts as text.`),Op.forEach(n),this.h()},h(){m(at,"name","editor-three-levels"),m($e,"href","/010_Intro/050_Three_Levels_of_Customization#levels"),m(Ie,"href","/010_Intro/010_Projectional_Editing#expressions"),m(Pe,"href","/030_Developing_a_Language/030_API_Level/010_Editor_API"),m(ft,"name","operand"),m(he,"class","language-ts"),m(de,"class","language-ts"),m(ke,"class","language-ts"),m(me,"class","language-ts"),m(ye,"class","language-ts"),m(Me,"href","/030_Developing_a_Language/020_ProjectIt_Definition_Level/010_Editor_Definition#tables"),m(we,"class","language-ts"),m(Ut,"name","tables"),m(Ee,"class","language-ts"),m(ve,"class","language-ts"),m(_e,"class","language-ts"),m(xe,"class","language-ts")},m(e,p){r(e,h,p),t(h,f),r(e,k,p),r(e,_,p),t(_,C),t(_,q),t(q,U),t(_,d),r(e,x,p),Xl(L,e,p),r(e,wn,p),r(e,pe,p),t(pe,at),t(pe,Ds),r(e,bn,p),r(e,g,p),t(g,Cs),t(g,$e),t($e,gs),t(g,As),t(g,ot),t(ot,Ms),t(g,Ns),r(e,En,p),r(e,A,p),t(A,re),t(re,Hs),t(re,lt),t(lt,Rs),t(re,Ss),t(A,Fs),t(A,ce),t(ce,Ws),t(ce,it),t(it,zs),t(ce,Bs),t(A,Gs),t(A,ue),t(ue,Ys),t(ue,pt),t(pt,qs),t(ue,Us),r(e,vn,p),r(e,j,p),t(j,Ks),t(j,rt),t(rt,Js),t(j,Qs),t(j,ct),t(ct,Vs),t(j,Xs),t(j,Ie),t(Ie,Zs),t(j,ea),r(e,_n,p),r(e,M,p),t(M,ta),t(M,ut),t(ut,na),t(M,sa),t(M,Pe),t(Pe,aa),t(M,oa),r(e,xn,p),r(e,fe,p),t(fe,ft),t(fe,la),r(e,Tn,p),r(e,N,p),t(N,ia),t(N,ht),t(ht,pa),t(N,ra),t(N,dt),t(dt,ca),t(N,ua),r(e,jn,p),r(e,H,p),t(H,K),t(K,kt),t(kt,fa),t(K,ha),t(K,mt),t(mt,da),t(K,ka),t(H,ma),t(H,J),t(J,yt),t(yt,ya),t(J,wa),t(J,wt),t(wt,ba),t(J,Ea),t(H,va),t(H,y),t(y,bt),t(bt,_a),t(y,xa),t(y,Et),t(Et,Ta),t(y,ja),t(y,vt),t(vt,$a),t(y,Ia),t(y,_t),t(_t,Pa),t(y,La),t(y,xt),t(xt,Oa),t(y,Da),t(y,Tt),t(Tt,Ca),t(y,ga),r(e,$n,p),r(e,Le,p),t(Le,Aa),r(e,In,p),r(e,b,p),t(b,Ma),t(b,jt),t(jt,Na),t(b,Ha),t(b,$t),t($t,Ra),t(b,Sa),t(b,It),t(It,Fa),t(b,Wa),t(b,Pt),t(Pt,za),t(b,Ba),r(e,Pn,p),r(e,he,p),he.innerHTML=Dp,r(e,Ln,p),r(e,Oe,p),t(Oe,Ga),r(e,On,p),Xl(Q,e,p),r(e,Dn,p),r(e,V,p),t(V,Ya),t(V,Lt),t(Lt,qa),t(V,Ua),r(e,Cn,p),r(e,de,p),de.innerHTML=Cp,r(e,gn,p),r(e,De,p),t(De,Ka),r(e,An,p),r(e,ke,p),ke.innerHTML=gp,r(e,Mn,p),r(e,Ce,p),t(Ce,Ja),r(e,Nn,p),r(e,X,p),t(X,Qa),t(X,Ot),t(Ot,Va),t(X,Xa),r(e,Hn,p),r(e,O,p),t(O,Za),t(O,Dt),t(Dt,eo),t(O,to),t(O,Ct),t(Ct,no),t(O,so),t(O,gt),t(gt,ao),r(e,Rn,p),r(e,R,p),t(R,oo),t(R,At),t(At,lo),t(R,io),t(R,Mt),t(Mt,po),t(R,ro),r(e,Sn,p),r(e,me,p),me.innerHTML=Ap,r(e,Fn,p),r(e,ge,p),t(ge,co),r(e,Wn,p),r(e,E,p),t(E,uo),t(E,Nt),t(Nt,fo),t(E,ho),t(E,Ht),t(Ht,ko),t(E,mo),t(E,Rt),t(Rt,yo),t(E,wo),t(E,St),t(St,bo),t(E,Eo),r(e,zn,p),r(e,Z,p),t(Z,vo),t(Z,Ft),t(Ft,_o),t(Z,xo),r(e,Bn,p),r(e,ye,p),ye.innerHTML=Mp,r(e,Gn,p),r(e,Ae,p),t(Ae,To),r(e,Yn,p),r(e,ee,p),t(ee,jo),t(ee,Me),t(Me,$o),t(ee,Io),r(e,qn,p),r(e,S,p),t(S,Po),t(S,Wt),t(Wt,Lo),t(S,Oo),t(S,zt),t(zt,Do),t(S,Co),r(e,Un,p),r(e,we,p),we.innerHTML=Np,r(e,Kn,p),r(e,v,p),t(v,go),t(v,Bt),t(Bt,Ao),t(v,Mo),t(v,Gt),t(Gt,No),t(v,Ho),t(v,Yt),t(Yt,Ro),t(v,So),t(v,qt),t(qt,Fo),t(v,Wo),r(e,Jn,p),Xl(te,e,p),r(e,Qn,p),r(e,be,p),t(be,Ut),t(be,zo),r(e,Vn,p),r(e,Ne,p),t(Ne,Bo),r(e,Xn,p),r(e,He,p),t(He,Go),r(e,Zn,p),r(e,ne,p),t(ne,D),t(D,Yo),t(D,Kt),t(Kt,qo),t(D,Uo),t(D,Jt),t(Jt,Ko),t(D,Jo),t(D,Qt),t(Qt,Qo),t(D,Vo),t(ne,Xo),t(ne,Vt),t(Vt,Zo),r(e,es,p),r(e,Re,p),t(Re,el),r(e,ts,p),r(e,F,p),t(F,tl),t(F,Xt),t(Xt,nl),t(F,sl),t(F,Zt),t(Zt,al),t(F,ol),r(e,ns,p),r(e,Ee,p),Ee.innerHTML=Hp,r(e,ss,p),r(e,W,p),t(W,ll),t(W,en),t(en,il),t(W,pl),t(W,tn),t(tn,rl),t(W,cl),r(e,as,p),r(e,ve,p),ve.innerHTML=Rp,r(e,os,p),r(e,se,p),t(se,ul),t(se,nn),t(nn,fl),t(se,hl),r(e,ls,p),r(e,Se,p),t(Se,dl),r(e,is,p),r(e,Fe,p),t(Fe,kl),r(e,ps,p),r(e,ae,p),t(ae,ml),t(ae,sn),t(sn,yl),t(ae,wl),r(e,rs,p),r(e,z,p),t(z,bl),t(z,an),t(an,El),t(z,vl),t(z,on),t(on,_l),t(z,xl),r(e,cs,p),r(e,$,p),t($,Tl),t($,ln),t(ln,jl),t($,$l),t($,pn),t(pn,Il),t($,Pl),t($,rn),t(rn,Ll),t($,Ol),r(e,us,p),r(e,_e,p),_e.innerHTML=Sp,r(e,fs,p),r(e,xe,p),xe.innerHTML=Fp,r(e,hs,p),r(e,We,p),t(We,Dl),r(e,ds,p),r(e,w,p),t(w,Cl),t(w,cn),t(cn,gl),t(w,Al),t(w,un),t(un,Ml),t(w,Nl),t(w,fn),t(fn,Hl),t(w,Rl),t(w,hn),t(hn,Sl),t(w,Fl),t(w,dn),t(dn,Wl),t(w,zl),r(e,ks,p),r(e,ze,p),t(ze,Bl),r(e,ms,p),r(e,Be,p),t(Be,Gl),r(e,ys,p),r(e,Ge,p),t(Ge,Yl),r(e,ws,p),r(e,Ye,p),t(Ye,ql),r(e,bs,p),r(e,qe,p),t(qe,Ul),Es=!0},p(e,[p]){const Te={};p&2&&(Te.$$scope={dirty:p,ctx:e}),L.$set(Te);const kn={};p&2&&(kn.$$scope={dirty:p,ctx:e}),Q.$set(kn);const Ue={};p&2&&(Ue.$$scope={dirty:p,ctx:e}),te.$set(Ue)},i(e){Es||(Zl(L.$$.fragment,e),Zl(Q.$$.fragment,e),Zl(te.$$.fragment,e),Es=!0)},o(e){ei(L.$$.fragment,e),ei(Q.$$.fragment,e),ei(te.$$.fragment,e),Es=!1},d(e){e&&n(h),e&&n(k),e&&n(_),e&&n(x),ti(L,e),e&&n(wn),e&&n(pe),e&&n(bn),e&&n(g),e&&n(En),e&&n(A),e&&n(vn),e&&n(j),e&&n(_n),e&&n(M),e&&n(xn),e&&n(fe),e&&n(Tn),e&&n(N),e&&n(jn),e&&n(H),e&&n($n),e&&n(Le),e&&n(In),e&&n(b),e&&n(Pn),e&&n(he),e&&n(Ln),e&&n(Oe),e&&n(On),ti(Q,e),e&&n(Dn),e&&n(V),e&&n(Cn),e&&n(de),e&&n(gn),e&&n(De),e&&n(An),e&&n(ke),e&&n(Mn),e&&n(Ce),e&&n(Nn),e&&n(X),e&&n(Hn),e&&n(O),e&&n(Rn),e&&n(R),e&&n(Sn),e&&n(me),e&&n(Fn),e&&n(ge),e&&n(Wn),e&&n(E),e&&n(zn),e&&n(Z),e&&n(Bn),e&&n(ye),e&&n(Gn),e&&n(Ae),e&&n(Yn),e&&n(ee),e&&n(qn),e&&n(S),e&&n(Un),e&&n(we),e&&n(Kn),e&&n(v),e&&n(Jn),ti(te,e),e&&n(Qn),e&&n(be),e&&n(Vn),e&&n(Ne),e&&n(Xn),e&&n(He),e&&n(Zn),e&&n(ne),e&&n(es),e&&n(Re),e&&n(ts),e&&n(F),e&&n(ns),e&&n(Ee),e&&n(ss),e&&n(W),e&&n(as),e&&n(ve),e&&n(os),e&&n(se),e&&n(ls),e&&n(Se),e&&n(is),e&&n(Fe),e&&n(ps),e&&n(ae),e&&n(rs),e&&n(z),e&&n(cs),e&&n($),e&&n(us),e&&n(_e),e&&n(fs),e&&n(xe),e&&n(hs),e&&n(We),e&&n(ds),e&&n(w),e&&n(ks),e&&n(ze),e&&n(ms),e&&n(Be),e&&n(ys),e&&n(Ge),e&&n(ws),e&&n(Ye),e&&n(bs),e&&n(qe)}}}function ir(P){return[]}class ur extends Vp{constructor(h){super();Xp(this,h,ir,lr,Zp,{})}}export{ur as default};
