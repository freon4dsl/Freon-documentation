import{S as Ip,i as $p,s as Mp,e as o,t as s,k as r,w as Ya,c as p,a as l,d as e,h as a,m as u,x as qa,b as h,g as c,H as t,y as Ja,q as Ka,o as Qa,B as Xa}from"../../../chunks/vendor-0dc77bd0.js";import{N as Np}from"../../../chunks/Note-b0db7989.js";import{F as kp}from"../../../chunks/Figure-4dd15a94.js";/* empty css                                                         *//* empty css                                                           */function Fp(xt){let f;return{c(){f=s("Use another filename and/or location")},l(m){f=a(m,"Use another filename and/or location")},m(m,A){c(m,f,A)},d(m){m&&e(f)}}}function Wp(xt){let f,m,A;return{c(){f=s("You can rename the file `~/picode/editor/Custom"),m=o("yourLanguageName"),A=s("Projection.ts` and/or put it in another location.\nIn that case, you need to adjust the file `config/ProjectItConfiguration`.")},l(b){f=a(b,"You can rename the file `~/picode/editor/Custom"),m=p(b,"YOURLANGUAGENAME",{});var d=l(m);A=a(d,"Projection.ts` and/or put it in another location.\nIn that case, you need to adjust the file `config/ProjectItConfiguration`."),d.forEach(e)},m(b,d){c(b,f,d),c(b,m,d),t(m,A)},d(b){b&&e(f),b&&e(m)}}}function zp(xt){let f,m,A,b,d,ye,rn,Ln,we,Ee,gn,ve,_e,Tn,be,xe,Bn,je,Le,jt,I,ge,un,Te,Be,Lt,$,Pe,q,Ce,De,gt,J,Se,Pn,Oe,Tt,y,He,Cn,Ae,Ie,Dn,$e,Me,Sn,Ne,Fe,On,We,ze,Hn,Ue,Re,Bt,K,fp=`<code class="language-ts"><span class="token comment">// tutorial-language/editor/CustomEntityProjection.ts#L40-L43</span>

<span class="token function">getBox</span><span class="token punctuation">(</span>element<span class="token operator">:</span> PiElement<span class="token punctuation">)</span><span class="token operator">:</span> Box <span class="token punctuation">&#123;</span>
    <span class="token comment">// Add any handmade projections of your own before next statement</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Pt,M,Ct,dn,Ve,Dt,kn,Ge,St,j,Ye,An,qe,Je,In,Ke,Qe,$n,Xe,Ze,Ot,Q,hp=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.ast#L56-L61</span>

modelunit EntityModelUnit <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> name<span class="token operator">:</span> identifier<span class="token punctuation">;</span>

    functions<span class="token operator">:</span> EntityFunction<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    entities<span class="token operator">:</span> Entity<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ht,w,ns,Mn,ts,es,Nn,ss,as,Fn,os,ps,Wn,ls,is,zn,cs,rs,At,X,mp=`<code class="language-ts"><span class="token comment">// tutorial-language/editor/CustomEntityProjection.ts#L45-L51</span>

<span class="token comment">// Most simple model box</span>
<span class="token keyword">private</span> <span class="token function">createModelBox</span><span class="token punctuation">(</span>model<span class="token operator">:</span> EntityModelUnit<span class="token punctuation">)</span><span class="token operator">:</span> Box <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HorizontalListBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">LabelBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model-label"</span><span class="token punctuation">,</span> <span class="token string">"Model"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">TextBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model-name"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> model<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>model<span class="token punctuation">.</span>name <span class="token operator">=</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,It,fn,us,$t,Z,Mt,hn,ds,Nt,N,Un,ks,fs,Rn,hs,Ft,mn,ms,Wt,L,ys,Vn,ws,Es,Gn,vs,_s,Yn,bs,xs,zt,g,js,qn,Ls,gs,Jn,Ts,Bs,Kn,Ps,Cs,Ut,nn,yp=`<code class="language-ts"><span class="token comment">// tutorial-language/editor/CustomEntityProjection.ts#L53-L63</span>

<span class="token comment">// Modelbox with style added</span>
<span class="token keyword">private</span> <span class="token function">createModelBox2</span><span class="token punctuation">(</span>model<span class="token operator">:</span> EntityModelUnit<span class="token punctuation">)</span><span class="token operator">:</span> Box <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HorizontalListBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">LabelBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model-label"</span><span class="token punctuation">,</span> <span class="token string">"Model"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
            style<span class="token operator">:</span> <span class="token function">styleToCSS</span><span class="token punctuation">(</span>projectitStyles<span class="token punctuation">.</span>keyword<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">TextBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model-name"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> model<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>model<span class="token punctuation">.</span>name <span class="token operator">=</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
            placeHolder<span class="token operator">:</span> <span class="token string">"&lt;name>"</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Rt,yn,Ds,Vt,tn,Gt,T,Ss,Qn,Os,Hs,Xn,As,Is,wn,$s,Ms,Yt,en,wp=`<code class="language-ts"><span class="token comment">// tutorial-language/editor/styles/styles.ts#L37-L40</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> keyword<span class="token operator">:</span> PiStyle <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"font-weight"</span><span class="token operator">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>
    color<span class="token operator">:</span> <span class="token string">"blue"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,qt,En,Ns,Jt,v,Fs,Zn,Ws,zs,nt,Us,Rs,tt,Vs,Gs,et,Ys,qs,Kt,sn,Ep=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.ast#L60-L60</span>

entities<span class="token operator">:</span> Entity<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code>`,Qt,_,Js,st,Ks,Qs,at,Xs,Zs,ot,na,ta,pt,ea,sa,Xt,an,vp=`<code class="language-ts"><span class="token comment">// tutorial-language/editor/CustomEntityProjection.ts#L67-L86</span>

<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VerticalListBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HorizontalListBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model-info"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">LabelBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model-keyword"</span><span class="token punctuation">,</span> <span class="token string">"Model"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
            style<span class="token operator">:</span> <span class="token function">styleToCSS</span><span class="token punctuation">(</span>projectitStyles<span class="token punctuation">.</span>keyword<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">TextBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model-name"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> model<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>model<span class="token punctuation">.</span>name <span class="token operator">=</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
            placeHolder<span class="token operator">:</span> <span class="token string">"&lt;name>"</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">LabelBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"entity-keyword"</span><span class="token punctuation">,</span> <span class="token string">"Entities"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        style<span class="token operator">:</span> <span class="token function">styleToCSS</span><span class="token punctuation">(</span>projectitStyles<span class="token punctuation">.</span>keyword<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">VerticalListBox</span><span class="token punctuation">(</span>
        model<span class="token punctuation">,</span>
        <span class="token string">"entity-list"</span><span class="token punctuation">,</span>
        model<span class="token punctuation">.</span>entities<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ent <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rootProjection<span class="token punctuation">.</span><span class="token function">getBox</span><span class="token punctuation">(</span>ent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Zt,k,aa,lt,oa,pa,it,la,ia,ct,ca,ra,rt,ua,da,ut,ka,fa,dt,ha,ma,vn,ya,wa,ne,F,Ea,kt,va,_a,te,on,_p=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.ast#L26-L32</span>

concept Entity <span class="token keyword">implements</span> <span class="token class-name">Type</span> <span class="token punctuation">&#123;</span>
    isCompany<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    attributes<span class="token operator">:</span> AttributeWithLimitedType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    entAttributes<span class="token operator">:</span> AttributeWithEntityType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    functions<span class="token operator">:</span> EntityFunction<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    reference baseEntity<span class="token operator">?</span><span class="token operator">:</span> Entity<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ee,B,ba,ft,xa,ja,ht,La,ga,mt,Ta,Ba,se,pn,bp=`<code class="language-ts"><span class="token comment">// tutorial-language/editor/CustomEntityProjection.ts#L108-L127</span>

<span class="token keyword">private</span> <span class="token function">createEntityBox</span><span class="token punctuation">(</span>entity<span class="token operator">:</span> Entity<span class="token punctuation">)</span><span class="token operator">:</span> Box <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VerticalListBox</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span><span class="token string">"entity"</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>
            <span class="token keyword">new</span> <span class="token class-name">HorizontalListBox</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span> <span class="token string">"entity-info"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
                <span class="token keyword">new</span> <span class="token class-name">LabelBox</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span> <span class="token string">"entity-keyword"</span><span class="token punctuation">,</span> <span class="token string">"Entity"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
                    style<span class="token operator">:</span> <span class="token function">styleToCSS</span><span class="token punctuation">(</span>projectitStyles<span class="token punctuation">.</span>keyword<span class="token punctuation">)</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">TextBox</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span> <span class="token string">"entity-name"</span><span class="token punctuation">,</span>
                    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> entity<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
                    <span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>entity<span class="token punctuation">.</span>name <span class="token operator">=</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token punctuation">&#123;</span> placeHolder<span class="token operator">:</span> <span class="token string">"&lt;name>"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">VerticalListBox</span><span class="token punctuation">(</span> entity<span class="token punctuation">,</span> <span class="token string">"attribute-list"</span><span class="token punctuation">,</span>
                entity<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>att <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rootProjection<span class="token punctuation">.</span><span class="token function">getBox</span><span class="token punctuation">(</span>att<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ae,S,Pa,yt,Ca,Da,wt,Sa,Oa,oe,ln,xp=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.ast#L71-L74</span>

concept AttributeWithLimitedType <span class="token punctuation">&#123;</span>
    reference declaredType<span class="token operator">:</span> AttributeType<span class="token punctuation">;</span>
    name<span class="token operator">:</span> identifier<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,pe,cn,jp='<code class="language-ts"><span class="token comment">// tutorial-language/editor/CustomEntityProjection.ts#L71-L106</span></code>',le,_n,Ha,ie,bn,Aa,ce,P,Et,Ia,$a,vt,Ma,Na,_t,Fa,Wa,bt,za,re,W,Ua,xn,Ra,Va,ue;return M=new Np({props:{$$slots:{content:[Wp],header:[Fp]},$$scope:{ctx:xt}}}),Z=new kp({props:{imageName:"demomodelname.png",caption:"Simple Projection of a name property",figureNumber:1}}),tn=new kp({props:{imageName:"demomodelname-with-style.png",caption:"Simple Projection with Styles",figureNumber:2}}),{c(){f=o("h1"),m=o("a"),A=s(" Writing Projections in TypeScript"),b=r(),d=o("p"),ye=s(`The editor is always an implementation of the interface
`),rn=o("a"),Ln=o("code"),we=s("PiProjection"),Ee=s(`. The
implementation generated by Freon is located in the file `),gn=o("code"),ve=s("~/picode/editor/gen/<yourLanguageName>ProjectionDefault.ts"),_e=s(`.
It holds projections for `),Tn=o("strong"),be=s("all concepts"),xe=s(" in the language. When a projection is given in the "),Bn=o("code"),je=s(".edit"),Le=s(`
file this is the one that will be in
the implementation, when no projection is defined, a default projection will be generated.`),jt=r(),I=o("p"),ge=s("As you can read in the "),un=o("a"),Te=s("Freon Editor Framework"),Be=s(`  ,
all projections are based on boxes. In the next few steps we will show you how to build a hierarchy
of boxes to project your AST nodes, and how to style these boxes according to your wishes.`),Lt=r(),$=o("p"),Pe=s(`The projections in this section are available in
the `),q=o("a"),Ce=s("ProjectIt-example"),De=s("."),gt=r(),J=o("h2"),Se=s("Customize by implementing "),Pn=o("code"),Oe=s("getBox()"),Tt=r(),y=o("p"),He=s("In order to customize the editor you need to implement the "),Cn=o("code"),Ae=s("getBox(...)"),Ie=s(` method in the
file `),Dn=o("code"),$e=s("~/picode/editor/Custom<yourLanguageName>Projection.ts"),Me=s(`.
For every concept that needs a customized projection, it should
return a `),Sn=o("code"),Ne=s("Box"),Fe=s(" object. For all other concepts it should simply return "),On=o("code"),We=s("null"),ze=s(`.
This way Freon will know that you did not define a projection yourself and will use the projection
defined in `),Hn=o("code"),Ue=s("~/picode/editor/gen/<yourLanguageName>ProjectionDefault"),Re=s("."),Bt=r(),K=o("pre"),Pt=r(),Ya(M.$$.fragment),Ct=r(),dn=o("h2"),Ve=s("How to Create a Box Object"),Dt=r(),kn=o("h3"),Ge=s("Step 1 - Projecting a Simple Property"),St=r(),j=o("p"),Ye=s("We start with building the projection for a simple property of type "),An=o("code"),qe=s("identifier"),Je=s(`:
the name of the unit in our Entity language. In the metamodel this is represented by the value of
the property `),In=o("code"),Ke=s("name"),Qe=s(" of class "),$n=o("code"),Xe=s("EntityModelUnit"),Ze=s("."),Ot=r(),Q=o("pre"),Ht=r(),w=o("p"),ns=s(`A reasonable choice for the projection of this property is a
`),Mn=o("code"),ts=s("HorizontalListBox"),es=s(" which holds a "),Nn=o("code"),ss=s("LabelBox"),as=s(` with
the name of the class, followed by the value stored in the variable `),Fn=o("em"),os=s("name"),ps=s(`.
The following code shows a method that returns
this `),Wn=o("code"),ls=s("HorizontalListBox"),is=s(". This method should be called in the overall method "),zn=o("code"),cs=s("getBox(...)"),rs=s("."),At=r(),X=o("pre"),It=r(),fn=o("p"),us=s("When we start the editor based on this projection, we see the following:"),$t=r(),Ya(Z.$$.fragment),Mt=r(),hn=o("p"),ds=s("It doesn\u2019t look very nice currently."),Nt=r(),N=o("ol"),Un=o("li"),ks=s("The label is not distinguishable from the name of the model."),fs=r(),Rn=o("li"),hs=s("When the name of the model becomes empty, there is no visual clue that you can add a name."),Ft=r(),mn=o("h3"),ms=s("Step 2 - Adding Style and a PlaceHolder"),Wt=r(),L=o("p"),ys=s(`To make the label look different from the value of the property, we need to add a style
to the `),Vn=o("code"),ws=s("LabelBox"),Es=s(". To do so, we associate the "),Gn=o("code"),vs=s("LabelBox"),_s=s(" with the style "),Yn=o("code"),bs=s("projectitStyles.keyword"),xs=s(`.
This will project it in a different color.`),zt=r(),g=o("p"),js=s("Also, we give the "),qn=o("code"),Ls=s("TextBox"),gs=s(" has a "),Jn=o("code"),Ts=s("placeHolder"),Bs=s(` property. The placeholder will be shown
whenever the contents of the `),Kn=o("code"),Ps=s("TextBox"),Cs=s(`
is empty, giving the user a visual clue that a name could be entered.`),Ut=r(),nn=o("pre"),Rt=r(),yn=o("p"),Ds=s("The result looks a lot better."),Vt=r(),Ya(tn.$$.fragment),Gt=r(),T=o("p"),Ss=s("The style "),Qn=o("code"),Os=s("projectitStyles.keyword"),Hs=s(" is defined in the file "),Xn=o("code"),As=s("~/picode/editor/styles/styles.ts"),Is=s(` as follows.
In principle all CSS styles can be used here. Learn more about styling
in `),wn=o("a"),$s=s("Styling"),Ms=s("."),Yt=r(),en=o("pre"),qt=r(),En=o("h3"),Ns=s("Step 3 - Projecting a List"),Jt=r(),v=o("p"),Fs=s("Next, we will add the "),Zn=o("code"),Ws=s("entities"),zs=s(" property of the "),nt=o("code"),Us=s("EntityModelUnit"),Rs=s(` to the projection.
The `),tt=o("code"),Vs=s("entities"),Gs=s(" property is a list of "),et=o("code"),Ys=s("Entity"),qs=s("."),Kt=r(),sn=o("pre"),Qt=r(),_=o("p"),Js=s("In the projection we add a "),st=o("code"),Ks=s("LabelBox"),Qs=s(`, to be shown
before the list, and the list itself using a `),at=o("code"),Xs=s("VerticalListBox"),Zs=s(` to make sure that this list is
displayed vertically. Note that the `),ot=o("code"),na=s("LabelBox"),ta=s(" is styled as a keyword, like the "),pt=o("code"),ea=s("LabelBox"),sa=s(`
in the previous step.`),Xt=r(),an=o("pre"),Zt=r(),k=o("p"),aa=s("The projection of a single "),lt=o("code"),oa=s("Entity"),pa=s(" is done using "),it=o("code"),la=s("this.rootProjection.getBox(ent)"),ia=s(`. This will call a
separate function (here called `),ct=o("code"),ca=s("createEntityBox"),ra=s(") that also returns a "),rt=o("code"),ua=s("Box"),da=s(`, thus building a hierarchy of boxes. The use of
`),ut=o("code"),ka=s("this.rootProjection.getBox(ent)"),fa=s(", instead of directly calling "),dt=o("code"),ha=s("createEntityBox"),ma=s(`,
ensures that the proper projection for entity is used, following the rules laid down in
`),vn=o("a"),ya=s("customize projections"),wa=s("."),ne=r(),F=o("p"),Ea=s("We can track the hierarchy of boxes. First, have a look at the projection for "),kt=o("code"),va=s("Entity"),_a=s(", which is defines as follows in the .ast."),te=r(),on=o("pre"),ee=r(),B=o("p"),ba=s("Its projection is very similar to the projection of the "),ft=o("code"),xa=s("EntityModel"),ja=s(`,
showing the keyword `),ht=o("em"),La=s("Entity"),ga=s(` followed by its name and below all properties of the
entity in a `),mt=o("code"),Ta=s("VerticalListBox"),Ba=s("."),se=r(),pn=o("pre"),ae=r(),S=o("p"),Pa=s("Next in the hierarchy of boxes is the projection of the elements of the "),yt=o("code"),Ca=s("attributes"),Da=s(` list. Once again,
this projection is defined in its own function. Have a look at the .ast definition and the projection method.
Here, we use a `),wt=o("code"),Sa=s("HorizontalListBox"),Oa=s(` to show the property name, followed by a colon,
followed by its type.`),oe=r(),ln=o("pre"),pe=r(),cn=o("pre"),le=r(),_n=o("h3"),Ha=s("Step 4 - Adding Behavior"),ie=r(),bn=o("p"),Aa=s(`The projection so far is exactly that: a projection. There are no actions defined yet,
which we need to enable the user to change the model and add elements to it. However,
we do have the built-in default behavior of the editor:`),ce=r(),P=o("ul"),Et=o("li"),Ia=s("Inside a TextBox the text can be edited."),$a=r(),vt=o("li"),Ma=s("Using the arrow keys the user can navigate the projection."),Na=r(),_t=o("li"),Fa=s("Using Ctrl-Arrow the user can navigate up and down the model/AST."),Wa=r(),bt=o("li"),za=s("When an element is selected, it can be deleted with the DEL key."),re=r(),W=o("p"),Ua=s(`The default behavior takes care of changing simple AST nodes and deleting both simple and
complex AST nodes. Find out more about adding behavior in `),xn=o("a"),Ra=s("Writing Actions"),Va=s("."),this.h()},l(n){f=p(n,"H1",{});var i=l(f);m=p(i,"A",{name:!0}),l(m).forEach(e),A=a(i," Writing Projections in TypeScript"),i.forEach(e),b=u(n),d=p(n,"P",{});var x=l(d);ye=a(x,`The editor is always an implementation of the interface
`),rn=p(x,"A",{href:!0});var Za=l(rn);Ln=p(Za,"CODE",{});var no=l(Ln);we=a(no,"PiProjection"),no.forEach(e),Za.forEach(e),Ee=a(x,`. The
implementation generated by Freon is located in the file `),gn=p(x,"CODE",{});var to=l(gn);ve=a(to,"~/picode/editor/gen/<yourLanguageName>ProjectionDefault.ts"),to.forEach(e),_e=a(x,`.
It holds projections for `),Tn=p(x,"STRONG",{});var eo=l(Tn);be=a(eo,"all concepts"),eo.forEach(e),xe=a(x," in the language. When a projection is given in the "),Bn=p(x,"CODE",{});var so=l(Bn);je=a(so,".edit"),so.forEach(e),Le=a(x,`
file this is the one that will be in
the implementation, when no projection is defined, a default projection will be generated.`),x.forEach(e),jt=u(n),I=p(n,"P",{});var de=l(I);ge=a(de,"As you can read in the "),un=p(de,"A",{href:!0});var ao=l(un);Te=a(ao,"Freon Editor Framework"),ao.forEach(e),Be=a(de,`  ,
all projections are based on boxes. In the next few steps we will show you how to build a hierarchy
of boxes to project your AST nodes, and how to style these boxes according to your wishes.`),de.forEach(e),Lt=u(n),$=p(n,"P",{});var ke=l($);Pe=a(ke,`The projections in this section are available in
the `),q=p(ke,"A",{href:!0,target:!0});var oo=l(q);Ce=a(oo,"ProjectIt-example"),oo.forEach(e),De=a(ke,"."),ke.forEach(e),gt=u(n),J=p(n,"H2",{});var Ga=l(J);Se=a(Ga,"Customize by implementing "),Pn=p(Ga,"CODE",{});var po=l(Pn);Oe=a(po,"getBox()"),po.forEach(e),Ga.forEach(e),Tt=u(n),y=p(n,"P",{});var C=l(y);He=a(C,"In order to customize the editor you need to implement the "),Cn=p(C,"CODE",{});var lo=l(Cn);Ae=a(lo,"getBox(...)"),lo.forEach(e),Ie=a(C,` method in the
file `),Dn=p(C,"CODE",{});var io=l(Dn);$e=a(io,"~/picode/editor/Custom<yourLanguageName>Projection.ts"),io.forEach(e),Me=a(C,`.
For every concept that needs a customized projection, it should
return a `),Sn=p(C,"CODE",{});var co=l(Sn);Ne=a(co,"Box"),co.forEach(e),Fe=a(C," object. For all other concepts it should simply return "),On=p(C,"CODE",{});var ro=l(On);We=a(ro,"null"),ro.forEach(e),ze=a(C,`.
This way Freon will know that you did not define a projection yourself and will use the projection
defined in `),Hn=p(C,"CODE",{});var uo=l(Hn);Ue=a(uo,"~/picode/editor/gen/<yourLanguageName>ProjectionDefault"),uo.forEach(e),Re=a(C,"."),C.forEach(e),Bt=u(n),K=p(n,"PRE",{class:!0});var Lp=l(K);Lp.forEach(e),Pt=u(n),qa(M.$$.fragment,n),Ct=u(n),dn=p(n,"H2",{});var ko=l(dn);Ve=a(ko,"How to Create a Box Object"),ko.forEach(e),Dt=u(n),kn=p(n,"H3",{});var fo=l(kn);Ge=a(fo,"Step 1 - Projecting a Simple Property"),fo.forEach(e),St=u(n),j=p(n,"P",{});var z=l(j);Ye=a(z,"We start with building the projection for a simple property of type "),An=p(z,"CODE",{});var ho=l(An);qe=a(ho,"identifier"),ho.forEach(e),Je=a(z,`:
the name of the unit in our Entity language. In the metamodel this is represented by the value of
the property `),In=p(z,"CODE",{});var mo=l(In);Ke=a(mo,"name"),mo.forEach(e),Qe=a(z," of class "),$n=p(z,"CODE",{});var yo=l($n);Xe=a(yo,"EntityModelUnit"),yo.forEach(e),Ze=a(z,"."),z.forEach(e),Ot=u(n),Q=p(n,"PRE",{class:!0});var gp=l(Q);gp.forEach(e),Ht=u(n),w=p(n,"P",{});var D=l(w);ns=a(D,`A reasonable choice for the projection of this property is a
`),Mn=p(D,"CODE",{});var wo=l(Mn);ts=a(wo,"HorizontalListBox"),wo.forEach(e),es=a(D," which holds a "),Nn=p(D,"CODE",{});var Eo=l(Nn);ss=a(Eo,"LabelBox"),Eo.forEach(e),as=a(D,` with
the name of the class, followed by the value stored in the variable `),Fn=p(D,"EM",{});var vo=l(Fn);os=a(vo,"name"),vo.forEach(e),ps=a(D,`.
The following code shows a method that returns
this `),Wn=p(D,"CODE",{});var _o=l(Wn);ls=a(_o,"HorizontalListBox"),_o.forEach(e),is=a(D,". This method should be called in the overall method "),zn=p(D,"CODE",{});var bo=l(zn);cs=a(bo,"getBox(...)"),bo.forEach(e),rs=a(D,"."),D.forEach(e),At=u(n),X=p(n,"PRE",{class:!0});var Tp=l(X);Tp.forEach(e),It=u(n),fn=p(n,"P",{});var xo=l(fn);us=a(xo,"When we start the editor based on this projection, we see the following:"),xo.forEach(e),$t=u(n),qa(Z.$$.fragment,n),Mt=u(n),hn=p(n,"P",{});var jo=l(hn);ds=a(jo,"It doesn\u2019t look very nice currently."),jo.forEach(e),Nt=u(n),N=p(n,"OL",{});var fe=l(N);Un=p(fe,"LI",{});var Lo=l(Un);ks=a(Lo,"The label is not distinguishable from the name of the model."),Lo.forEach(e),fs=u(fe),Rn=p(fe,"LI",{});var go=l(Rn);hs=a(go,"When the name of the model becomes empty, there is no visual clue that you can add a name."),go.forEach(e),fe.forEach(e),Ft=u(n),mn=p(n,"H3",{});var To=l(mn);ms=a(To,"Step 2 - Adding Style and a PlaceHolder"),To.forEach(e),Wt=u(n),L=p(n,"P",{});var U=l(L);ys=a(U,`To make the label look different from the value of the property, we need to add a style
to the `),Vn=p(U,"CODE",{});var Bo=l(Vn);ws=a(Bo,"LabelBox"),Bo.forEach(e),Es=a(U,". To do so, we associate the "),Gn=p(U,"CODE",{});var Po=l(Gn);vs=a(Po,"LabelBox"),Po.forEach(e),_s=a(U," with the style "),Yn=p(U,"CODE",{});var Co=l(Yn);bs=a(Co,"projectitStyles.keyword"),Co.forEach(e),xs=a(U,`.
This will project it in a different color.`),U.forEach(e),zt=u(n),g=p(n,"P",{});var R=l(g);js=a(R,"Also, we give the "),qn=p(R,"CODE",{});var Do=l(qn);Ls=a(Do,"TextBox"),Do.forEach(e),gs=a(R," has a "),Jn=p(R,"CODE",{});var So=l(Jn);Ts=a(So,"placeHolder"),So.forEach(e),Bs=a(R,` property. The placeholder will be shown
whenever the contents of the `),Kn=p(R,"CODE",{});var Oo=l(Kn);Ps=a(Oo,"TextBox"),Oo.forEach(e),Cs=a(R,`
is empty, giving the user a visual clue that a name could be entered.`),R.forEach(e),Ut=u(n),nn=p(n,"PRE",{class:!0});var Bp=l(nn);Bp.forEach(e),Rt=u(n),yn=p(n,"P",{});var Ho=l(yn);Ds=a(Ho,"The result looks a lot better."),Ho.forEach(e),Vt=u(n),qa(tn.$$.fragment,n),Gt=u(n),T=p(n,"P",{});var V=l(T);Ss=a(V,"The style "),Qn=p(V,"CODE",{});var Ao=l(Qn);Os=a(Ao,"projectitStyles.keyword"),Ao.forEach(e),Hs=a(V," is defined in the file "),Xn=p(V,"CODE",{});var Io=l(Xn);As=a(Io,"~/picode/editor/styles/styles.ts"),Io.forEach(e),Is=a(V,` as follows.
In principle all CSS styles can be used here. Learn more about styling
in `),wn=p(V,"A",{href:!0});var $o=l(wn);$s=a($o,"Styling"),$o.forEach(e),Ms=a(V,"."),V.forEach(e),Yt=u(n),en=p(n,"PRE",{class:!0});var Pp=l(en);Pp.forEach(e),qt=u(n),En=p(n,"H3",{});var Mo=l(En);Ns=a(Mo,"Step 3 - Projecting a List"),Mo.forEach(e),Jt=u(n),v=p(n,"P",{});var O=l(v);Fs=a(O,"Next, we will add the "),Zn=p(O,"CODE",{});var No=l(Zn);Ws=a(No,"entities"),No.forEach(e),zs=a(O," property of the "),nt=p(O,"CODE",{});var Fo=l(nt);Us=a(Fo,"EntityModelUnit"),Fo.forEach(e),Rs=a(O,` to the projection.
The `),tt=p(O,"CODE",{});var Wo=l(tt);Vs=a(Wo,"entities"),Wo.forEach(e),Gs=a(O," property is a list of "),et=p(O,"CODE",{});var zo=l(et);Ys=a(zo,"Entity"),zo.forEach(e),qs=a(O,"."),O.forEach(e),Kt=u(n),sn=p(n,"PRE",{class:!0});var Cp=l(sn);Cp.forEach(e),Qt=u(n),_=p(n,"P",{});var H=l(_);Js=a(H,"In the projection we add a "),st=p(H,"CODE",{});var Uo=l(st);Ks=a(Uo,"LabelBox"),Uo.forEach(e),Qs=a(H,`, to be shown
before the list, and the list itself using a `),at=p(H,"CODE",{});var Ro=l(at);Xs=a(Ro,"VerticalListBox"),Ro.forEach(e),Zs=a(H,` to make sure that this list is
displayed vertically. Note that the `),ot=p(H,"CODE",{});var Vo=l(ot);na=a(Vo,"LabelBox"),Vo.forEach(e),ta=a(H," is styled as a keyword, like the "),pt=p(H,"CODE",{});var Go=l(pt);ea=a(Go,"LabelBox"),Go.forEach(e),sa=a(H,`
in the previous step.`),H.forEach(e),Xt=u(n),an=p(n,"PRE",{class:!0});var Dp=l(an);Dp.forEach(e),Zt=u(n),k=p(n,"P",{});var E=l(k);aa=a(E,"The projection of a single "),lt=p(E,"CODE",{});var Yo=l(lt);oa=a(Yo,"Entity"),Yo.forEach(e),pa=a(E," is done using "),it=p(E,"CODE",{});var qo=l(it);la=a(qo,"this.rootProjection.getBox(ent)"),qo.forEach(e),ia=a(E,`. This will call a
separate function (here called `),ct=p(E,"CODE",{});var Jo=l(ct);ca=a(Jo,"createEntityBox"),Jo.forEach(e),ra=a(E,") that also returns a "),rt=p(E,"CODE",{});var Ko=l(rt);ua=a(Ko,"Box"),Ko.forEach(e),da=a(E,`, thus building a hierarchy of boxes. The use of
`),ut=p(E,"CODE",{});var Qo=l(ut);ka=a(Qo,"this.rootProjection.getBox(ent)"),Qo.forEach(e),fa=a(E,", instead of directly calling "),dt=p(E,"CODE",{});var Xo=l(dt);ha=a(Xo,"createEntityBox"),Xo.forEach(e),ma=a(E,`,
ensures that the proper projection for entity is used, following the rules laid down in
`),vn=p(E,"A",{href:!0});var Zo=l(vn);ya=a(Zo,"customize projections"),Zo.forEach(e),wa=a(E,"."),E.forEach(e),ne=u(n),F=p(n,"P",{});var he=l(F);Ea=a(he,"We can track the hierarchy of boxes. First, have a look at the projection for "),kt=p(he,"CODE",{});var np=l(kt);va=a(np,"Entity"),np.forEach(e),_a=a(he,", which is defines as follows in the .ast."),he.forEach(e),te=u(n),on=p(n,"PRE",{class:!0});var Sp=l(on);Sp.forEach(e),ee=u(n),B=p(n,"P",{});var G=l(B);ba=a(G,"Its projection is very similar to the projection of the "),ft=p(G,"CODE",{});var tp=l(ft);xa=a(tp,"EntityModel"),tp.forEach(e),ja=a(G,`,
showing the keyword `),ht=p(G,"EM",{});var ep=l(ht);La=a(ep,"Entity"),ep.forEach(e),ga=a(G,` followed by its name and below all properties of the
entity in a `),mt=p(G,"CODE",{});var sp=l(mt);Ta=a(sp,"VerticalListBox"),sp.forEach(e),Ba=a(G,"."),G.forEach(e),se=u(n),pn=p(n,"PRE",{class:!0});var Op=l(pn);Op.forEach(e),ae=u(n),S=p(n,"P",{});var jn=l(S);Pa=a(jn,"Next in the hierarchy of boxes is the projection of the elements of the "),yt=p(jn,"CODE",{});var ap=l(yt);Ca=a(ap,"attributes"),ap.forEach(e),Da=a(jn,` list. Once again,
this projection is defined in its own function. Have a look at the .ast definition and the projection method.
Here, we use a `),wt=p(jn,"CODE",{});var op=l(wt);Sa=a(op,"HorizontalListBox"),op.forEach(e),Oa=a(jn,` to show the property name, followed by a colon,
followed by its type.`),jn.forEach(e),oe=u(n),ln=p(n,"PRE",{class:!0});var Hp=l(ln);Hp.forEach(e),pe=u(n),cn=p(n,"PRE",{class:!0});var Ap=l(cn);Ap.forEach(e),le=u(n),_n=p(n,"H3",{});var pp=l(_n);Ha=a(pp,"Step 4 - Adding Behavior"),pp.forEach(e),ie=u(n),bn=p(n,"P",{});var lp=l(bn);Aa=a(lp,`The projection so far is exactly that: a projection. There are no actions defined yet,
which we need to enable the user to change the model and add elements to it. However,
we do have the built-in default behavior of the editor:`),lp.forEach(e),ce=u(n),P=p(n,"UL",{});var Y=l(P);Et=p(Y,"LI",{});var ip=l(Et);Ia=a(ip,"Inside a TextBox the text can be edited."),ip.forEach(e),$a=u(Y),vt=p(Y,"LI",{});var cp=l(vt);Ma=a(cp,"Using the arrow keys the user can navigate the projection."),cp.forEach(e),Na=u(Y),_t=p(Y,"LI",{});var rp=l(_t);Fa=a(rp,"Using Ctrl-Arrow the user can navigate up and down the model/AST."),rp.forEach(e),Wa=u(Y),bt=p(Y,"LI",{});var up=l(bt);za=a(up,"When an element is selected, it can be deleted with the DEL key."),up.forEach(e),Y.forEach(e),re=u(n),W=p(n,"P",{});var me=l(W);Ua=a(me,`The default behavior takes care of changing simple AST nodes and deleting both simple and
complex AST nodes. Find out more about adding behavior in `),xn=p(me,"A",{href:!0});var dp=l(xn);Ra=a(dp,"Writing Actions"),dp.forEach(e),Va=a(me,"."),me.forEach(e),this.h()},h(){h(m,"name","writing-projections"),h(rn,"href","/060_Under_the_Hood/010_The_Editor_Framework/020_The_Editor_Interfaces/010_PiProjection_Interface"),h(un,"href","/060_Under_the_Hood/010_The_Editor_Framework"),h(q,"href","https://github.com/projectit-org/ProjectIt-example"),h(q,"target","_blank"),h(K,"class","language-ts"),h(Q,"class","language-ts"),h(X,"class","language-ts"),h(nn,"class","language-ts"),h(wn,"href","/030_Developing_a_Language/040_Styling"),h(en,"class","language-ts"),h(sn,"class","language-ts"),h(an,"class","language-ts"),h(vn,"href","/030_Developing_a_Language/020_Definition_Level/010_Editor_Definition#editor-three-levels"),h(on,"class","language-ts"),h(pn,"class","language-ts"),h(ln,"class","language-ts"),h(cn,"class","language-ts"),h(xn,"href","/030_Developing_a_Language/030_API_Level/030_Writing_Actions")},m(n,i){c(n,f,i),t(f,m),t(f,A),c(n,b,i),c(n,d,i),t(d,ye),t(d,rn),t(rn,Ln),t(Ln,we),t(d,Ee),t(d,gn),t(gn,ve),t(d,_e),t(d,Tn),t(Tn,be),t(d,xe),t(d,Bn),t(Bn,je),t(d,Le),c(n,jt,i),c(n,I,i),t(I,ge),t(I,un),t(un,Te),t(I,Be),c(n,Lt,i),c(n,$,i),t($,Pe),t($,q),t(q,Ce),t($,De),c(n,gt,i),c(n,J,i),t(J,Se),t(J,Pn),t(Pn,Oe),c(n,Tt,i),c(n,y,i),t(y,He),t(y,Cn),t(Cn,Ae),t(y,Ie),t(y,Dn),t(Dn,$e),t(y,Me),t(y,Sn),t(Sn,Ne),t(y,Fe),t(y,On),t(On,We),t(y,ze),t(y,Hn),t(Hn,Ue),t(y,Re),c(n,Bt,i),c(n,K,i),K.innerHTML=fp,c(n,Pt,i),Ja(M,n,i),c(n,Ct,i),c(n,dn,i),t(dn,Ve),c(n,Dt,i),c(n,kn,i),t(kn,Ge),c(n,St,i),c(n,j,i),t(j,Ye),t(j,An),t(An,qe),t(j,Je),t(j,In),t(In,Ke),t(j,Qe),t(j,$n),t($n,Xe),t(j,Ze),c(n,Ot,i),c(n,Q,i),Q.innerHTML=hp,c(n,Ht,i),c(n,w,i),t(w,ns),t(w,Mn),t(Mn,ts),t(w,es),t(w,Nn),t(Nn,ss),t(w,as),t(w,Fn),t(Fn,os),t(w,ps),t(w,Wn),t(Wn,ls),t(w,is),t(w,zn),t(zn,cs),t(w,rs),c(n,At,i),c(n,X,i),X.innerHTML=mp,c(n,It,i),c(n,fn,i),t(fn,us),c(n,$t,i),Ja(Z,n,i),c(n,Mt,i),c(n,hn,i),t(hn,ds),c(n,Nt,i),c(n,N,i),t(N,Un),t(Un,ks),t(N,fs),t(N,Rn),t(Rn,hs),c(n,Ft,i),c(n,mn,i),t(mn,ms),c(n,Wt,i),c(n,L,i),t(L,ys),t(L,Vn),t(Vn,ws),t(L,Es),t(L,Gn),t(Gn,vs),t(L,_s),t(L,Yn),t(Yn,bs),t(L,xs),c(n,zt,i),c(n,g,i),t(g,js),t(g,qn),t(qn,Ls),t(g,gs),t(g,Jn),t(Jn,Ts),t(g,Bs),t(g,Kn),t(Kn,Ps),t(g,Cs),c(n,Ut,i),c(n,nn,i),nn.innerHTML=yp,c(n,Rt,i),c(n,yn,i),t(yn,Ds),c(n,Vt,i),Ja(tn,n,i),c(n,Gt,i),c(n,T,i),t(T,Ss),t(T,Qn),t(Qn,Os),t(T,Hs),t(T,Xn),t(Xn,As),t(T,Is),t(T,wn),t(wn,$s),t(T,Ms),c(n,Yt,i),c(n,en,i),en.innerHTML=wp,c(n,qt,i),c(n,En,i),t(En,Ns),c(n,Jt,i),c(n,v,i),t(v,Fs),t(v,Zn),t(Zn,Ws),t(v,zs),t(v,nt),t(nt,Us),t(v,Rs),t(v,tt),t(tt,Vs),t(v,Gs),t(v,et),t(et,Ys),t(v,qs),c(n,Kt,i),c(n,sn,i),sn.innerHTML=Ep,c(n,Qt,i),c(n,_,i),t(_,Js),t(_,st),t(st,Ks),t(_,Qs),t(_,at),t(at,Xs),t(_,Zs),t(_,ot),t(ot,na),t(_,ta),t(_,pt),t(pt,ea),t(_,sa),c(n,Xt,i),c(n,an,i),an.innerHTML=vp,c(n,Zt,i),c(n,k,i),t(k,aa),t(k,lt),t(lt,oa),t(k,pa),t(k,it),t(it,la),t(k,ia),t(k,ct),t(ct,ca),t(k,ra),t(k,rt),t(rt,ua),t(k,da),t(k,ut),t(ut,ka),t(k,fa),t(k,dt),t(dt,ha),t(k,ma),t(k,vn),t(vn,ya),t(k,wa),c(n,ne,i),c(n,F,i),t(F,Ea),t(F,kt),t(kt,va),t(F,_a),c(n,te,i),c(n,on,i),on.innerHTML=_p,c(n,ee,i),c(n,B,i),t(B,ba),t(B,ft),t(ft,xa),t(B,ja),t(B,ht),t(ht,La),t(B,ga),t(B,mt),t(mt,Ta),t(B,Ba),c(n,se,i),c(n,pn,i),pn.innerHTML=bp,c(n,ae,i),c(n,S,i),t(S,Pa),t(S,yt),t(yt,Ca),t(S,Da),t(S,wt),t(wt,Sa),t(S,Oa),c(n,oe,i),c(n,ln,i),ln.innerHTML=xp,c(n,pe,i),c(n,cn,i),cn.innerHTML=jp,c(n,le,i),c(n,_n,i),t(_n,Ha),c(n,ie,i),c(n,bn,i),t(bn,Aa),c(n,ce,i),c(n,P,i),t(P,Et),t(Et,Ia),t(P,$a),t(P,vt),t(vt,Ma),t(P,Na),t(P,_t),t(_t,Fa),t(P,Wa),t(P,bt),t(bt,za),c(n,re,i),c(n,W,i),t(W,Ua),t(W,xn),t(xn,Ra),t(W,Va),ue=!0},p(n,[i]){const x={};i&1&&(x.$$scope={dirty:i,ctx:n}),M.$set(x)},i(n){ue||(Ka(M.$$.fragment,n),Ka(Z.$$.fragment,n),Ka(tn.$$.fragment,n),ue=!0)},o(n){Qa(M.$$.fragment,n),Qa(Z.$$.fragment,n),Qa(tn.$$.fragment,n),ue=!1},d(n){n&&e(f),n&&e(b),n&&e(d),n&&e(jt),n&&e(I),n&&e(Lt),n&&e($),n&&e(gt),n&&e(J),n&&e(Tt),n&&e(y),n&&e(Bt),n&&e(K),n&&e(Pt),Xa(M,n),n&&e(Ct),n&&e(dn),n&&e(Dt),n&&e(kn),n&&e(St),n&&e(j),n&&e(Ot),n&&e(Q),n&&e(Ht),n&&e(w),n&&e(At),n&&e(X),n&&e(It),n&&e(fn),n&&e($t),Xa(Z,n),n&&e(Mt),n&&e(hn),n&&e(Nt),n&&e(N),n&&e(Ft),n&&e(mn),n&&e(Wt),n&&e(L),n&&e(zt),n&&e(g),n&&e(Ut),n&&e(nn),n&&e(Rt),n&&e(yn),n&&e(Vt),Xa(tn,n),n&&e(Gt),n&&e(T),n&&e(Yt),n&&e(en),n&&e(qt),n&&e(En),n&&e(Jt),n&&e(v),n&&e(Kt),n&&e(sn),n&&e(Qt),n&&e(_),n&&e(Xt),n&&e(an),n&&e(Zt),n&&e(k),n&&e(ne),n&&e(F),n&&e(te),n&&e(on),n&&e(ee),n&&e(B),n&&e(se),n&&e(pn),n&&e(ae),n&&e(S),n&&e(oe),n&&e(ln),n&&e(pe),n&&e(cn),n&&e(le),n&&e(_n),n&&e(ie),n&&e(bn),n&&e(ce),n&&e(P),n&&e(re),n&&e(W)}}}class qp extends Ip{constructor(f){super();$p(this,f,null,zp,Mp,{})}}export{qp as default};
