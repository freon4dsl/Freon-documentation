import{S as fn,i as kn,s as yn,e as p,t as s,k as r,c as i,a as c,d as e,h as a,m as u,b as it,g as l,H as n,J as Be}from"../../../chunks/vendor-492729b6.js";/* empty css                                                         *//* empty css                                                           */function mn(pn){let m,K,Dt,ct,_,Lt,F,Bt,Nt,lt,b,St,V,jt,It,rt,x,cn=`<code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MANUAL_EXPRESSION_CREATORS</span><span class="token operator">:</span> PiExpressionCreator<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment">// Add your own custom expression creators here</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MANUAL_BINARY_EXPRESSION_CREATORS</span><span class="token operator">:</span> PiBinaryExpressionCreator<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment">// Add your own custom binary expression creators here</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MANUAL_CUSTOM_BEHAVIORS</span><span class="token operator">:</span> PiCustomBehavior<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment">// Add your own custom behavior here</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MANUAL_KEYBOARD</span><span class="token operator">:</span> KeyboardShortcutBehavior<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment">// Add your own custom keyboard shortcuts here</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code>`,ut,P,Rt,dt,k,Ht,X,Wt,Mt,Y,Ut,gt,ht,d,Kt,D,Ft,Vt,q,Xt,Yt,J,qt,Jt,z,zt,Gt,ft,O,ln=`<code class="language-ts"><span class="token comment">// tutorial-language/editor/CustomEntityProjection.ts#L141-L146</span>

<span class="token keyword">new</span> <span class="token class-name">VerticalListBox</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span><span class="token string">"attributes"</span><span class="token punctuation">,</span>
    entity<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>att <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBox</span><span class="token punctuation">(</span>att<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AliasBox</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span> <span class="token string">"end-of-attribute-list"</span><span class="token punctuation">,</span>
    <span class="token string">"add attribute"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,kt,h,Qt,G,Zt,$t,Q,te,ee,Z,ne,se,yt,C,rn=`<code class="language-ts"><span class="token comment">// tutorial-language/editor/CustomEntityActions.ts#L39-L51</span>

    <span class="token comment">// Add your own custom behavior here</span>
    <span class="token punctuation">&#123;</span>
        activeInBoxRoles<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"end-of-attribute-list"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                            <span class="token comment">// &lt;1></span>
        trigger<span class="token operator">:</span> <span class="token string">"attribute"</span><span class="token punctuation">,</span>                                                                   <span class="token comment">// &lt;2></span>
        action<span class="token operator">:</span> <span class="token punctuation">(</span>box<span class="token operator">:</span> Box<span class="token punctuation">,</span> trigger<span class="token operator">:</span> PiTriggerType<span class="token punctuation">,</span> editor<span class="token operator">:</span> PiEditor<span class="token punctuation">)</span><span class="token operator">:</span> PiElement <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>     <span class="token comment">// &lt;3></span>
            <span class="token keyword">var</span> entity<span class="token operator">:</span> Entity <span class="token operator">=</span> box<span class="token punctuation">.</span>element <span class="token keyword">as</span> Entity<span class="token punctuation">;</span>
            <span class="token keyword">const</span> attribute<span class="token operator">:</span> AttributeWithLimitedType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttributeWithLimitedType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            entity<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> attribute<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        boxRoleToSelect<span class="token operator">:</span> <span class="token string">"Attribute-name"</span>                                                       <span class="token comment">// &lt;4></span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code>`,mt,L,ae,Et,f,$,oe,pe,E,ie,tt,ce,le,et,re,ue,de,v,he,nt,fe,ke,st,ye,me,w,Ee,at,we,_e,ot,be,ve,wt,B,Ae,_t,N,Te,bt,S,xe,vt,j,Oe,At,I,Ce,Tt,R,Pe,xt,H,De,Ot,W,Le;return{c(){m=p("h1"),K=p("a"),Dt=s(" Writing Actions in TypeScript"),ct=r(),_=p("p"),Lt=s(`When you have created your own custom projection, this projection is exactly that:
a projection. Other than the built-in default behavior (held in the file
`),F=p("code"),Bt=s("~/picode/editor/<yourLanguageName>DefaultActions.ts"),Nt=s(`), there are no actions defined yet.
Actions are necessary to enable the user to change the model and add elements to it.
The projections only describe what you will see in the editor.
Actions determine what you can do, how you interact with the editor.`),lt=r(),b=p("p"),St=s("As a convenience, the file "),V=p("code"),jt=s("~/picode/editor/Custom<yourLanguageName>Actions.ts"),It=s(` is generated, which is a placeholder
for your own actions written in TypeScript. This file contains four constants for
different kind of actions. What you need to
do is to define these constants. Then ProjectIt will merge your actions
with the default actions. If a trigger for an action is identical to a default one,
your custom actions take precedence.`),rt=r(),x=p("pre"),ut=r(),P=p("h2"),Rt=s("Creation of New Elements"),dt=r(),k=p("p"),Ht=s("Now, let\u2019s start with adding an element, e.g. adding a new "),X=p("code"),Wt=s("property"),Mt=s(` to an
`),Y=p("code"),Ut=s("Entity"),gt=s("."),ht=r(),d=p("p"),Kt=s("From "),D=p("a"),Ft=s("Actions"),Vt=s(` you will have learned
that an `),q=p("code"),Xt=s("AliasBox"),Yt=s(` is a predefined box where the user can type text to trigger some action.
Thus, we add an `),J=p("code"),qt=s("AliasBox"),Jt=s(` to the projection of the property list.
Note the role of the box: `),z=p("em"),zt=s("end-of-property-list"),Gt=s("."),ft=r(),O=p("pre"),kt=r(),h=p("p"),Qt=s("Then we create the actual action and attach it to the role of the "),G=p("code"),Zt=s("AliasBox"),$t=s(`. Note that the projection
and action
are defined in two different files, respectively `),Q=p("code"),te=s("CustomEntityProjections.ts"),ee=s(" and "),Z=p("code"),ne=s("CustomEntityActions.ts"),se=s("."),yt=r(),C=p("pre"),mt=r(),L=p("p"),ae=s("The numbers in the comments indicate what happens here:"),Et=r(),f=p("ol"),$=p("li"),oe=s("The action is attached to each box with the role \u201Cend-of-property-list\u201D."),pe=r(),E=p("li"),ie=s("The action will be triggered when the user types "),tt=p("code"),ce=s('"attribute"'),le=s(" inside the "),et=p("code"),re=s("AliasBox"),ue=s("."),de=r(),v=p("li"),he=s("The executable code for the action. It creates a new "),nt=p("code"),fe=s("AttributeWithLimitedType"),ke=s(" and attaches is to "),st=p("code"),ye=s("entity"),me=r(),w=p("li"),Ee=s("The focus of the editor is returned to the "),at=p("code"),we=s("Box"),_e=s(" with the role "),ot=p("code"),be=s('"Attribute-name"'),ve=s(`
within the entity. This ensures that the user can immediately start typing the name of the entity after it has been created.`),wt=r(),B=p("p"),Ae=s(`There can be many boxes with the same role in the editor, as long as their model element is different.
This way, the above action is available for each attribute list in each entity.`),_t=r(),N=p("p"),Te=s("// TODO: describe the optional properties"),bt=r(),S=p("h2"),xe=s("Custom Actions"),vt=r(),j=p("p"),Oe=s("// TODO document other custom actions"),At=r(),I=p("h2"),Ce=s("Expressions and Binary Expressions"),Tt=r(),R=p("p"),Pe=s("// TODO Advanced expression editing."),xt=r(),H=p("h2"),De=s("Keyboard Shortcuts"),Ot=r(),W=p("p"),Le=s("// TODO A keyboard shortcut specifies an action that is triggered by special keys, like e.g. Ctrl-A."),this.h()},l(t){m=i(t,"H1",{});var o=c(m);K=i(o,"A",{name:!0}),c(K).forEach(e),Dt=a(o," Writing Actions in TypeScript"),o.forEach(e),ct=u(t),_=i(t,"P",{});var Ct=c(_);Lt=a(Ct,`When you have created your own custom projection, this projection is exactly that:
a projection. Other than the built-in default behavior (held in the file
`),F=i(Ct,"CODE",{});var Ne=c(F);Bt=a(Ne,"~/picode/editor/<yourLanguageName>DefaultActions.ts"),Ne.forEach(e),Nt=a(Ct,`), there are no actions defined yet.
Actions are necessary to enable the user to change the model and add elements to it.
The projections only describe what you will see in the editor.
Actions determine what you can do, how you interact with the editor.`),Ct.forEach(e),lt=u(t),b=i(t,"P",{});var Pt=c(b);St=a(Pt,"As a convenience, the file "),V=i(Pt,"CODE",{});var Se=c(V);jt=a(Se,"~/picode/editor/Custom<yourLanguageName>Actions.ts"),Se.forEach(e),It=a(Pt,` is generated, which is a placeholder
for your own actions written in TypeScript. This file contains four constants for
different kind of actions. What you need to
do is to define these constants. Then ProjectIt will merge your actions
with the default actions. If a trigger for an action is identical to a default one,
your custom actions take precedence.`),Pt.forEach(e),rt=u(t),x=i(t,"PRE",{class:!0});var un=c(x);un.forEach(e),ut=u(t),P=i(t,"H2",{});var je=c(P);Rt=a(je,"Creation of New Elements"),je.forEach(e),dt=u(t),k=i(t,"P",{});var M=c(k);Ht=a(M,"Now, let\u2019s start with adding an element, e.g. adding a new "),X=i(M,"CODE",{});var Ie=c(X);Wt=a(Ie,"property"),Ie.forEach(e),Mt=a(M,` to an
`),Y=i(M,"CODE",{});var Re=c(Y);Ut=a(Re,"Entity"),Re.forEach(e),gt=a(M,"."),M.forEach(e),ht=u(t),d=i(t,"P",{});var y=c(d);Kt=a(y,"From "),D=i(y,"A",{href:!0});var He=c(D);Ft=a(He,"Actions"),He.forEach(e),Vt=a(y,` you will have learned
that an `),q=i(y,"CODE",{});var We=c(q);Xt=a(We,"AliasBox"),We.forEach(e),Yt=a(y,` is a predefined box where the user can type text to trigger some action.
Thus, we add an `),J=i(y,"CODE",{});var Me=c(J);qt=a(Me,"AliasBox"),Me.forEach(e),Jt=a(y,` to the projection of the property list.
Note the role of the box: `),z=i(y,"EM",{});var Ue=c(z);zt=a(Ue,"end-of-property-list"),Ue.forEach(e),Gt=a(y,"."),y.forEach(e),ft=u(t),O=i(t,"PRE",{class:!0});var dn=c(O);dn.forEach(e),kt=u(t),h=i(t,"P",{});var A=c(h);Qt=a(A,"Then we create the actual action and attach it to the role of the "),G=i(A,"CODE",{});var ge=c(G);Zt=a(ge,"AliasBox"),ge.forEach(e),$t=a(A,`. Note that the projection
and action
are defined in two different files, respectively `),Q=i(A,"CODE",{});var Ke=c(Q);te=a(Ke,"CustomEntityProjections.ts"),Ke.forEach(e),ee=a(A," and "),Z=i(A,"CODE",{});var Fe=c(Z);ne=a(Fe,"CustomEntityActions.ts"),Fe.forEach(e),se=a(A,"."),A.forEach(e),yt=u(t),C=i(t,"PRE",{class:!0});var hn=c(C);hn.forEach(e),mt=u(t),L=i(t,"P",{});var Ve=c(L);ae=a(Ve,"The numbers in the comments indicate what happens here:"),Ve.forEach(e),Et=u(t),f=i(t,"OL",{});var T=c(f);$=i(T,"LI",{});var Xe=c($);oe=a(Xe,"The action is attached to each box with the role \u201Cend-of-property-list\u201D."),Xe.forEach(e),pe=u(T),E=i(T,"LI",{});var U=c(E);ie=a(U,"The action will be triggered when the user types "),tt=i(U,"CODE",{});var Ye=c(tt);ce=a(Ye,'"attribute"'),Ye.forEach(e),le=a(U," inside the "),et=i(U,"CODE",{});var qe=c(et);re=a(qe,"AliasBox"),qe.forEach(e),ue=a(U,"."),U.forEach(e),de=u(T),v=i(T,"LI",{});var pt=c(v);he=a(pt,"The executable code for the action. It creates a new "),nt=i(pt,"CODE",{});var Je=c(nt);fe=a(Je,"AttributeWithLimitedType"),Je.forEach(e),ke=a(pt," and attaches is to "),st=i(pt,"CODE",{});var ze=c(st);ye=a(ze,"entity"),ze.forEach(e),pt.forEach(e),me=u(T),w=i(T,"LI",{});var g=c(w);Ee=a(g,"The focus of the editor is returned to the "),at=i(g,"CODE",{});var Ge=c(at);we=a(Ge,"Box"),Ge.forEach(e),_e=a(g," with the role "),ot=i(g,"CODE",{});var Qe=c(ot);be=a(Qe,'"Attribute-name"'),Qe.forEach(e),ve=a(g,`
within the entity. This ensures that the user can immediately start typing the name of the entity after it has been created.`),g.forEach(e),T.forEach(e),wt=u(t),B=i(t,"P",{});var Ze=c(B);Ae=a(Ze,`There can be many boxes with the same role in the editor, as long as their model element is different.
This way, the above action is available for each attribute list in each entity.`),Ze.forEach(e),_t=u(t),N=i(t,"P",{});var $e=c(N);Te=a($e,"// TODO: describe the optional properties"),$e.forEach(e),bt=u(t),S=i(t,"H2",{});var tn=c(S);xe=a(tn,"Custom Actions"),tn.forEach(e),vt=u(t),j=i(t,"P",{});var en=c(j);Oe=a(en,"// TODO document other custom actions"),en.forEach(e),At=u(t),I=i(t,"H2",{});var nn=c(I);Ce=a(nn,"Expressions and Binary Expressions"),nn.forEach(e),Tt=u(t),R=i(t,"P",{});var sn=c(R);Pe=a(sn,"// TODO Advanced expression editing."),sn.forEach(e),xt=u(t),H=i(t,"H2",{});var an=c(H);De=a(an,"Keyboard Shortcuts"),an.forEach(e),Ot=u(t),W=i(t,"P",{});var on=c(W);Le=a(on,"// TODO A keyboard shortcut specifies an action that is triggered by special keys, like e.g. Ctrl-A."),on.forEach(e),this.h()},h(){it(K,"name","writing-actions"),it(x,"class","language-ts"),it(D,"href","/060_Under_the_Hood/010_The_Editor_Framework#defining-actions"),it(O,"class","language-ts"),it(C,"class","language-ts")},m(t,o){l(t,m,o),n(m,K),n(m,Dt),l(t,ct,o),l(t,_,o),n(_,Lt),n(_,F),n(F,Bt),n(_,Nt),l(t,lt,o),l(t,b,o),n(b,St),n(b,V),n(V,jt),n(b,It),l(t,rt,o),l(t,x,o),x.innerHTML=cn,l(t,ut,o),l(t,P,o),n(P,Rt),l(t,dt,o),l(t,k,o),n(k,Ht),n(k,X),n(X,Wt),n(k,Mt),n(k,Y),n(Y,Ut),n(k,gt),l(t,ht,o),l(t,d,o),n(d,Kt),n(d,D),n(D,Ft),n(d,Vt),n(d,q),n(q,Xt),n(d,Yt),n(d,J),n(J,qt),n(d,Jt),n(d,z),n(z,zt),n(d,Gt),l(t,ft,o),l(t,O,o),O.innerHTML=ln,l(t,kt,o),l(t,h,o),n(h,Qt),n(h,G),n(G,Zt),n(h,$t),n(h,Q),n(Q,te),n(h,ee),n(h,Z),n(Z,ne),n(h,se),l(t,yt,o),l(t,C,o),C.innerHTML=rn,l(t,mt,o),l(t,L,o),n(L,ae),l(t,Et,o),l(t,f,o),n(f,$),n($,oe),n(f,pe),n(f,E),n(E,ie),n(E,tt),n(tt,ce),n(E,le),n(E,et),n(et,re),n(E,ue),n(f,de),n(f,v),n(v,he),n(v,nt),n(nt,fe),n(v,ke),n(v,st),n(st,ye),n(f,me),n(f,w),n(w,Ee),n(w,at),n(at,we),n(w,_e),n(w,ot),n(ot,be),n(w,ve),l(t,wt,o),l(t,B,o),n(B,Ae),l(t,_t,o),l(t,N,o),n(N,Te),l(t,bt,o),l(t,S,o),n(S,xe),l(t,vt,o),l(t,j,o),n(j,Oe),l(t,At,o),l(t,I,o),n(I,Ce),l(t,Tt,o),l(t,R,o),n(R,Pe),l(t,xt,o),l(t,H,o),n(H,De),l(t,Ot,o),l(t,W,o),n(W,Le)},p:Be,i:Be,o:Be,d(t){t&&e(m),t&&e(ct),t&&e(_),t&&e(lt),t&&e(b),t&&e(rt),t&&e(x),t&&e(ut),t&&e(P),t&&e(dt),t&&e(k),t&&e(ht),t&&e(d),t&&e(ft),t&&e(O),t&&e(kt),t&&e(h),t&&e(yt),t&&e(C),t&&e(mt),t&&e(L),t&&e(Et),t&&e(f),t&&e(wt),t&&e(B),t&&e(_t),t&&e(N),t&&e(bt),t&&e(S),t&&e(vt),t&&e(j),t&&e(At),t&&e(I),t&&e(Tt),t&&e(R),t&&e(xt),t&&e(H),t&&e(Ot),t&&e(W)}}}class bn extends fn{constructor(m){super();kn(this,m,null,mn,yn,{})}}export{bn as default};
