import{S as Mn,i as Un,s as Vn,e as o,t as s,k as y,c as p,a as c,h as e,d as a,m as _,b as T,g as r,H as t,J as En}from"../../../chunks/vendor-492729b6.js";function Bn(Wn){let f,q,Y,l,J,w,H,R,K,E,D,Q,X,g,Z,$,z,j,nn,M,u,tn,F,an,sn,O,en,on,N,pn,cn,U,v,rn,V,d,ln,x,un,dn,W,kn,fn,B,P,Yn=`<code class="language-ts"><span class="token comment">// tutorial-language/projectit/ProjectitConfiguration.ts</span>

<span class="token comment">// Generated by the ProjectIt Language Generator.</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> PiProjection<span class="token punctuation">,</span> PiActions<span class="token punctuation">,</span> PiTyperPart <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@projectit/core"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CustomEntityActions<span class="token punctuation">,</span> CustomEntityProjection <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../editor"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CustomEntityTyperPart <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../typer"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CustomEntityValidator <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../validator"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> EntityCheckerInterface <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../validator/gen"</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * Class ProjectitConfiguration is the place where you can add all your customisations.
 * These will be used through the 'projectitConfiguration' constant by any generated
 * part of your language environment.
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ProjectitConfiguration</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// add your custom editor projections here</span>
    customProjection<span class="token operator">:</span> PiProjection<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CustomEntityProjection</span><span class="token punctuation">(</span><span class="token string">"manual"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// add your custom editor actions here</span>
    customActions<span class="token operator">:</span> PiActions<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CustomEntityActions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// add your custom validations here</span>
    customValidations<span class="token operator">:</span> EntityCheckerInterface<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CustomEntityValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// add your custom type-providers here</span>
    customTypers<span class="token operator">:</span> PiTyperPart<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CustomEntityTyperPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> projectitConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProjectitConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code>`,G,C,mn,S,k,hn,A,yn,_n,I,Pn,wn;return{c(){f=o("h1"),q=s("Customization of the Editor at the API level"),Y=y(),l=o("p"),J=s(`At the API level the editor can be changed by implementing two interfaces:
`),w=o("a"),H=o("code"),R=s("PiProjection"),K=s(` and
`),E=o("a"),D=o("code"),Q=s("PiAction"),X=s(`. But
before you dive into all this, we suggest that you become familiar with the information
about the `),g=o("a"),Z=s("ProjectIt Editor Framework"),$=s("."),z=y(),j=o("h2"),nn=s("Convenience Custom\u2026 Files"),M=y(),u=o("p"),tn=s(`As a convenience, ProjectIt generates templates for
your customization in the files `),F=o("code"),an=s("~/picode/editor/Custom<yourLanguageName>Projection.ts"),sn=s(" and "),O=o("code"),en=s("~/picode/editor/Custom<yourLanguageName>Actions.ts"),on=s(`
(`),N=o("code"),pn=s("<yourLanguageName>"),cn=s(` is a placeholder for the name of the language as defined in your .ast file). You can use
these two files to add your own special projections and corresponding actions.`),U=y(),v=o("h2"),rn=s("Adding your Own Files"),V=y(),d=o("p"),ln=s("You can rename the file "),x=o("code"),un=s("~/picode/editor/Custom<yourLanguageName>Projection.ts"),dn=s(` and/or put it in another location, or create your
own set of custom projection files.
In that case, you need to adjust the file `),W=o("code"),kn=s("~/picode/projectit/ProjectItConfiguration"),fn=s("."),B=y(),P=o("pre"),G=y(),C=o("h2"),mn=s("Learning More"),S=y(),k=o("p"),hn=s("You can learn how to write projections from "),A=o("a"),yn=s("Writing Projections"),_n=s(`.
How to create the action to accompany the projection can be learned from
`),I=o("a"),Pn=s("Writing Actions\u2019"),wn=s("."),this.h()},l(n){f=p(n,"H1",{});var i=c(f);q=e(i,"Customization of the Editor at the API level"),i.forEach(a),Y=_(n),l=p(n,"P",{});var m=c(l);J=e(m,`At the API level the editor can be changed by implementing two interfaces:
`),w=p(m,"A",{href:!0});var gn=c(w);H=p(gn,"CODE",{});var jn=c(H);R=e(jn,"PiProjection"),jn.forEach(a),gn.forEach(a),K=e(m,` and
`),E=p(m,"A",{href:!0});var vn=c(E);D=p(vn,"CODE",{});var Cn=c(D);Q=e(Cn,"PiAction"),Cn.forEach(a),vn.forEach(a),X=e(m,`. But
before you dive into all this, we suggest that you become familiar with the information
about the `),g=p(m,"A",{href:!0});var An=c(g);Z=e(An,"ProjectIt Editor Framework"),An.forEach(a),$=e(m,"."),m.forEach(a),z=_(n),j=p(n,"H2",{});var In=c(j);nn=e(In,"Convenience Custom\u2026 Files"),In.forEach(a),M=_(n),u=p(n,"P",{});var h=c(u);tn=e(h,`As a convenience, ProjectIt generates templates for
your customization in the files `),F=p(h,"CODE",{});var bn=c(F);an=e(bn,"~/picode/editor/Custom<yourLanguageName>Projection.ts"),bn.forEach(a),sn=e(h," and "),O=p(h,"CODE",{});var Ln=c(O);en=e(Ln,"~/picode/editor/Custom<yourLanguageName>Actions.ts"),Ln.forEach(a),on=e(h,`
(`),N=p(h,"CODE",{});var Tn=c(N);pn=e(Tn,"<yourLanguageName>"),Tn.forEach(a),cn=e(h,` is a placeholder for the name of the language as defined in your .ast file). You can use
these two files to add your own special projections and corresponding actions.`),h.forEach(a),U=_(n),v=p(n,"H2",{});var Hn=c(v);rn=e(Hn,"Adding your Own Files"),Hn.forEach(a),V=_(n),d=p(n,"P",{});var b=c(d);ln=e(b,"You can rename the file "),x=p(b,"CODE",{});var Dn=c(x);un=e(Dn,"~/picode/editor/Custom<yourLanguageName>Projection.ts"),Dn.forEach(a),dn=e(b,` and/or put it in another location, or create your
own set of custom projection files.
In that case, you need to adjust the file `),W=p(b,"CODE",{});var Fn=c(W);kn=e(Fn,"~/picode/projectit/ProjectItConfiguration"),Fn.forEach(a),fn=e(b,"."),b.forEach(a),B=_(n),P=p(n,"PRE",{class:!0});var zn=c(P);zn.forEach(a),G=_(n),C=p(n,"H2",{});var On=c(C);mn=e(On,"Learning More"),On.forEach(a),S=_(n),k=p(n,"P",{});var L=c(k);hn=e(L,"You can learn how to write projections from "),A=p(L,"A",{href:!0});var Nn=c(A);yn=e(Nn,"Writing Projections"),Nn.forEach(a),_n=e(L,`.
How to create the action to accompany the projection can be learned from
`),I=p(L,"A",{href:!0});var xn=c(I);Pn=e(xn,"Writing Actions\u2019"),xn.forEach(a),wn=e(L,"."),L.forEach(a),this.h()},h(){T(w,"href","/060_Under_the_Hood/010_The_Editor_Framework/020_The_Editor_Interfaces/010_PiProjection_Interface"),T(E,"href","/060_Under_the_Hood/010_The_Editor_Framework/020_The_Editor_Interfaces/020_PiAction_Interface"),T(g,"href","/060_Under_the_Hood/010_The_Editor_Framework"),T(P,"class","language-ts"),T(A,"href","/030_Developing_a_Language/030_API_Level/020_Writing_Projections"),T(I,"href","/030_Developing_a_Language/030_API_Level/030_Writing_Actions")},m(n,i){r(n,f,i),t(f,q),r(n,Y,i),r(n,l,i),t(l,J),t(l,w),t(w,H),t(H,R),t(l,K),t(l,E),t(E,D),t(D,Q),t(l,X),t(l,g),t(g,Z),t(l,$),r(n,z,i),r(n,j,i),t(j,nn),r(n,M,i),r(n,u,i),t(u,tn),t(u,F),t(F,an),t(u,sn),t(u,O),t(O,en),t(u,on),t(u,N),t(N,pn),t(u,cn),r(n,U,i),r(n,v,i),t(v,rn),r(n,V,i),r(n,d,i),t(d,ln),t(d,x),t(x,un),t(d,dn),t(d,W),t(W,kn),t(d,fn),r(n,B,i),r(n,P,i),P.innerHTML=Yn,r(n,G,i),r(n,C,i),t(C,mn),r(n,S,i),r(n,k,i),t(k,hn),t(k,A),t(A,yn),t(k,_n),t(k,I),t(I,Pn),t(k,wn)},p:En,i:En,o:En,d(n){n&&a(f),n&&a(Y),n&&a(l),n&&a(z),n&&a(j),n&&a(M),n&&a(u),n&&a(U),n&&a(v),n&&a(V),n&&a(d),n&&a(B),n&&a(P),n&&a(G),n&&a(C),n&&a(S),n&&a(k)}}}class Sn extends Mn{constructor(f){super();Un(this,f,null,Bn,Vn,{})}}export{Sn as default};
