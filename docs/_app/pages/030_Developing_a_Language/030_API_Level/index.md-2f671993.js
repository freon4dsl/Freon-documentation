import{S as da,i as _a,s as ka,e as n,t as r,k as i,w as ma,c as s,a as o,h as l,d as t,m as u,x as ha,b as k,g as c,H as a,y as Pa,q as ya,o as va,B as Ea}from"../../../chunks/vendor-0dc77bd0.js";import{N as Ia}from"../../../chunks/Note-b0db7989.js";/* empty css                                                         */function wa(de){let f;return{c(){f=r("Parts of this documentation are outdated")},l(_){f=l(_,"Parts of this documentation are outdated")},m(_,y){c(_,f,y)},d(_){_&&t(f)}}}function ja(de){let f;return{c(){f=r(`Sorry, ProjectIt / Freon is constantly in development, therefore parts of this section are outdated. 
In the future the documentation will be updated.`)},l(_){f=l(_,`Sorry, ProjectIt / Freon is constantly in development, therefore parts of this section are outdated. 
In the future the documentation will be updated.`)},m(_,y){c(_,f,y)},d(_){_&&t(f)}}}function Ta(de){let f,_,y,v,_e,E,ge,D,Ue,Ve,ke,S,Ne,me,I,Fe,K,Re,Oe,he,P,Q,$,Me,qe,X,H,We,Ge,Z,x,Ye,Pe,w,Be,z,Je,Ke,ye,g,Qe,ve,m,Xe,ee,Ze,et,te,tt,at,ae,nt,st,Ee,j,ot,ne,rt,lt,Ie,b,ua=`<code class="language-ts"><span class="token comment">// docu-project/config/ProjectitConfiguration.ts</span>

<span class="token operator">/</span> Generated by the ProjectIt Language Generator<span class="token punctuation">.</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> PiProjection<span class="token punctuation">,</span> PiActions<span class="token punctuation">,</span> PiTyperPart<span class="token punctuation">,</span> PiStdlib <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@projectit/core"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CustomDocuProjectActions<span class="token punctuation">,</span> CustomDocuProjectProjection <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../editor"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CustomDocuProjectTyperPart <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../typer"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CustomDocuProjectValidator <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../validator"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CustomDocuProjectStdlib <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../stdlib"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> DocuProjectCheckerInterface <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../validator/gen"</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * Class ProjectitConfiguration is the place where you can add all your customisations.
 * These will be used through the 'projectitConfiguration' constant by any generated
 * part of your language environment.
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ProjectitConfiguration</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// add your custom editor projections here</span>
    customProjection<span class="token operator">:</span> PiProjection<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CustomDocuProjectProjection</span><span class="token punctuation">(</span><span class="token string">"manual"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// add your custom editor actions here</span>
    customActions<span class="token operator">:</span> PiActions<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CustomDocuProjectActions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// add your custom validations here</span>
    customValidations<span class="token operator">:</span> DocuProjectCheckerInterface<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CustomDocuProjectValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// add your custom type-providers here</span>
    customTypers<span class="token operator">:</span> PiTyperPart<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CustomDocuProjectTyperPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// add extra predefined instances here</span>
    customStdLibs<span class="token operator">:</span> PiStdlib<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CustomDocuProjectStdlib</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> projectitConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProjectitConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code>`,we,U,pt,je,T,ct,se,it,ut,Te,V,ft,Ae,A,oe,N,dt,_t,re,F,kt,Le,R,mt,be,O,ht,Ce,d,le,M,Pt,yt,pe,q,vt,Et,ce,W,It,wt,ie,G,jt,Tt,ue,Y,At,Lt,fe,B,bt,De;return v=new Ia({props:{$$slots:{content:[ja],header:[wa]},$$scope:{ctx:de}}}),{c(){f=n("h1"),_=r("The API Level"),y=i(),ma(v.$$.fragment),_e=i(),E=n("p"),ge=r("Please, become acquainted with the "),D=n("a"),Ue=r("three levels of customization"),Ve=r(`
used by ProjectIt.
This section explains the 3rd of these three levels where you can customize ProjectIt in TypeScript.`),ke=i(),S=n("h2"),Ne=r("Customize a Pi-tool"),me=i(),I=n("p"),Fe=r("Third level full adaptability "),K=n("em"),Re=r("per concept"),Oe=r(" is currently possible for:"),he=i(),P=n("ul"),Q=n("li"),$=n("a"),Me=r("Editor"),qe=i(),X=n("li"),H=n("a"),We=r("Validator"),Ge=i(),Z=n("li"),x=n("a"),Ye=r("Typer"),Pe=i(),w=n("p"),Be=r(`To add third level adaptability for the scoper, parser and unparser is one of the
entries in our `),z=n("a"),Je=r("wish list"),Ke=r("."),ye=i(),g=n("h2"),Qe=r("Adding your Own Files"),ve=i(),m=n("p"),Xe=r(`As a convenience, ProjectIt generates templates for
your customization in the files `),ee=n("code"),Ze=r("~/picode/editor/Custom<yourLanguageName>Projection.ts"),et=r(", "),te=n("code"),tt=r("~/picode/editor/Custom<yourLanguageName>Actions.ts"),at=r(`, etc
(`),ae=n("code"),nt=r("<yourLanguageName>"),st=r(` is a placeholder for the name of the language as defined in your .ast file). You can use
these files to add your own special elements.`),Ee=i(),j=n("p"),ot=r(`The custom files can be renamed and/or
put it in another location, or you can create your own set of custom projection files.
In that case, you need to adjust the file `),ne=n("code"),rt=r("~/picode/projectit/ProjectItConfiguration"),lt=r("."),Ie=i(),b=n("pre"),we=i(),U=n("h2"),pt=r("Replacing a Pi-tool"),je=i(),T=n("p"),ct=r("All parts can be "),se=n("em"),it=r("completely replaced"),ut=r(` at the 3rd level, thereby completely
disregarding the default and definition levels.
This is done by implementing their respective interfaces.`),Te=i(),V=n("p"),ft=r("For the scoper, parser and unparser this is currently the only way to customize."),Ae=i(),A=n("ul"),oe=n("li"),N=n("a"),dt=r("scoper"),_t=i(),re=n("li"),F=n("a"),kt=r("parser"),Le=i(),R=n("h3"),mt=r("Pi-tool Interfaces"),be=i(),O=n("p"),ht=r("More information on the interfaces can be found here:"),Ce=i(),d=n("ul"),le=n("li"),M=n("a"),Pt=r("PiScoper"),yt=i(),pe=n("li"),q=n("a"),vt=r("PiTyper"),Et=i(),ce=n("li"),W=n("a"),It=r("PiValidator"),wt=i(),ie=n("li"),G=n("a"),jt=r("PiReader"),Tt=i(),ue=n("li"),Y=n("a"),At=r("PiWriter"),Lt=i(),fe=n("li"),B=n("a"),bt=r("PiStdlib"),this.h()},l(e){f=s(e,"H1",{});var p=o(f);_=l(p,"The API Level"),p.forEach(t),y=u(e),ha(v.$$.fragment,e),_e=u(e),E=s(e,"P",{});var C=o(E);ge=l(C,"Please, become acquainted with the "),D=s(C,"A",{href:!0});var Ct=o(D);Ue=l(Ct,"three levels of customization"),Ct.forEach(t),Ve=l(C,`
used by ProjectIt.
This section explains the 3rd of these three levels where you can customize ProjectIt in TypeScript.`),C.forEach(t),ke=u(e),S=s(e,"H2",{});var Dt=o(S);Ne=l(Dt,"Customize a Pi-tool"),Dt.forEach(t),me=u(e),I=s(e,"P",{});var Se=o(I);Fe=l(Se,"Third level full adaptability "),K=s(Se,"EM",{});var St=o(K);Re=l(St,"per concept"),St.forEach(t),Oe=l(Se," is currently possible for:"),Se.forEach(t),he=u(e),P=s(e,"UL",{});var J=o(P);Q=s(J,"LI",{});var $t=o(Q);$=s($t,"A",{href:!0});var Ht=o($);Me=l(Ht,"Editor"),Ht.forEach(t),$t.forEach(t),qe=u(J),X=s(J,"LI",{});var xt=o(X);H=s(xt,"A",{href:!0});var zt=o(H);We=l(zt,"Validator"),zt.forEach(t),xt.forEach(t),Ge=u(J),Z=s(J,"LI",{});var gt=o(Z);x=s(gt,"A",{href:!0});var Ut=o(x);Ye=l(Ut,"Typer"),Ut.forEach(t),gt.forEach(t),J.forEach(t),Pe=u(e),w=s(e,"P",{});var $e=o(w);Be=l($e,`To add third level adaptability for the scoper, parser and unparser is one of the
entries in our `),z=s($e,"A",{href:!0});var Vt=o(z);Je=l(Vt,"wish list"),Vt.forEach(t),Ke=l($e,"."),$e.forEach(t),ye=u(e),g=s(e,"H2",{});var Nt=o(g);Qe=l(Nt,"Adding your Own Files"),Nt.forEach(t),ve=u(e),m=s(e,"P",{});var L=o(m);Xe=l(L,`As a convenience, ProjectIt generates templates for
your customization in the files `),ee=s(L,"CODE",{});var Ft=o(ee);Ze=l(Ft,"~/picode/editor/Custom<yourLanguageName>Projection.ts"),Ft.forEach(t),et=l(L,", "),te=s(L,"CODE",{});var Rt=o(te);tt=l(Rt,"~/picode/editor/Custom<yourLanguageName>Actions.ts"),Rt.forEach(t),at=l(L,`, etc
(`),ae=s(L,"CODE",{});var Ot=o(ae);nt=l(Ot,"<yourLanguageName>"),Ot.forEach(t),st=l(L,` is a placeholder for the name of the language as defined in your .ast file). You can use
these files to add your own special elements.`),L.forEach(t),Ee=u(e),j=s(e,"P",{});var He=o(j);ot=l(He,`The custom files can be renamed and/or
put it in another location, or you can create your own set of custom projection files.
In that case, you need to adjust the file `),ne=s(He,"CODE",{});var Mt=o(ne);rt=l(Mt,"~/picode/projectit/ProjectItConfiguration"),Mt.forEach(t),lt=l(He,"."),He.forEach(t),Ie=u(e),b=s(e,"PRE",{class:!0});var fa=o(b);fa.forEach(t),we=u(e),U=s(e,"H2",{});var qt=o(U);pt=l(qt,"Replacing a Pi-tool"),qt.forEach(t),je=u(e),T=s(e,"P",{});var xe=o(T);ct=l(xe,"All parts can be "),se=s(xe,"EM",{});var Wt=o(se);it=l(Wt,"completely replaced"),Wt.forEach(t),ut=l(xe,` at the 3rd level, thereby completely
disregarding the default and definition levels.
This is done by implementing their respective interfaces.`),xe.forEach(t),Te=u(e),V=s(e,"P",{});var Gt=o(V);ft=l(Gt,"For the scoper, parser and unparser this is currently the only way to customize."),Gt.forEach(t),Ae=u(e),A=s(e,"UL",{});var ze=o(A);oe=s(ze,"LI",{});var Yt=o(oe);N=s(Yt,"A",{href:!0});var Bt=o(N);dt=l(Bt,"scoper"),Bt.forEach(t),Yt.forEach(t),_t=u(ze),re=s(ze,"LI",{});var Jt=o(re);F=s(Jt,"A",{href:!0});var Kt=o(F);kt=l(Kt,"parser"),Kt.forEach(t),Jt.forEach(t),ze.forEach(t),Le=u(e),R=s(e,"H3",{});var Qt=o(R);mt=l(Qt,"Pi-tool Interfaces"),Qt.forEach(t),be=u(e),O=s(e,"P",{});var Xt=o(O);ht=l(Xt,"More information on the interfaces can be found here:"),Xt.forEach(t),Ce=u(e),d=s(e,"UL",{});var h=o(d);le=s(h,"LI",{});var Zt=o(le);M=s(Zt,"A",{href:!0});var ea=o(M);Pt=l(ea,"PiScoper"),ea.forEach(t),Zt.forEach(t),yt=u(h),pe=s(h,"LI",{});var ta=o(pe);q=s(ta,"A",{href:!0});var aa=o(q);vt=l(aa,"PiTyper"),aa.forEach(t),ta.forEach(t),Et=u(h),ce=s(h,"LI",{});var na=o(ce);W=s(na,"A",{href:!0});var sa=o(W);It=l(sa,"PiValidator"),sa.forEach(t),na.forEach(t),wt=u(h),ie=s(h,"LI",{});var oa=o(ie);G=s(oa,"A",{href:!0});var ra=o(G);jt=l(ra,"PiReader"),ra.forEach(t),oa.forEach(t),Tt=u(h),ue=s(h,"LI",{});var la=o(ue);Y=s(la,"A",{href:!0});var pa=o(Y);At=l(pa,"PiWriter"),pa.forEach(t),la.forEach(t),Lt=u(h),fe=s(h,"LI",{});var ca=o(fe);B=s(ca,"A",{href:!0});var ia=o(B);bt=l(ia,"PiStdlib"),ia.forEach(t),ca.forEach(t),h.forEach(t),this.h()},h(){k(D,"href","/010_Intro/050_Three_Levels_of_Customization"),k($,"href","/030_Developing_a_Language/030_API_Level/010_Editor_API"),k(H,"href","/030_Developing_a_Language/030_API_Level/040_Validator_API"),k(x,"href","/030_Developing_a_Language/030_API_Level/050_Typer_API"),k(z,"href","/010_Intro/090_Future_Developments"),k(b,"class","language-ts"),k(N,"href","/030_Developing_a_Language/030_API_Level/060_Scoper_API"),k(F,"href","/030_Developing_a_Language/030_API_Level/070_Reader_API"),k(M,"href","/060_Under_the_Hood/020_The_PiTool_Interfaces/020_PiScoper_Interface"),k(q,"href","/060_Under_the_Hood/020_The_PiTool_Interfaces/050_PiTyper_Interface"),k(W,"href","/060_Under_the_Hood/020_The_PiTool_Interfaces/040_PiValidator_Interface"),k(G,"href","/060_Under_the_Hood/020_The_PiTool_Interfaces/060_PiReader_Interface"),k(Y,"href","/060_Under_the_Hood/020_The_PiTool_Interfaces/070_PiWriter_Interface"),k(B,"href","/060_Under_the_Hood/020_The_PiTool_Interfaces/080_PiStandardlib_Interface")},m(e,p){c(e,f,p),a(f,_),c(e,y,p),Pa(v,e,p),c(e,_e,p),c(e,E,p),a(E,ge),a(E,D),a(D,Ue),a(E,Ve),c(e,ke,p),c(e,S,p),a(S,Ne),c(e,me,p),c(e,I,p),a(I,Fe),a(I,K),a(K,Re),a(I,Oe),c(e,he,p),c(e,P,p),a(P,Q),a(Q,$),a($,Me),a(P,qe),a(P,X),a(X,H),a(H,We),a(P,Ge),a(P,Z),a(Z,x),a(x,Ye),c(e,Pe,p),c(e,w,p),a(w,Be),a(w,z),a(z,Je),a(w,Ke),c(e,ye,p),c(e,g,p),a(g,Qe),c(e,ve,p),c(e,m,p),a(m,Xe),a(m,ee),a(ee,Ze),a(m,et),a(m,te),a(te,tt),a(m,at),a(m,ae),a(ae,nt),a(m,st),c(e,Ee,p),c(e,j,p),a(j,ot),a(j,ne),a(ne,rt),a(j,lt),c(e,Ie,p),c(e,b,p),b.innerHTML=ua,c(e,we,p),c(e,U,p),a(U,pt),c(e,je,p),c(e,T,p),a(T,ct),a(T,se),a(se,it),a(T,ut),c(e,Te,p),c(e,V,p),a(V,ft),c(e,Ae,p),c(e,A,p),a(A,oe),a(oe,N),a(N,dt),a(A,_t),a(A,re),a(re,F),a(F,kt),c(e,Le,p),c(e,R,p),a(R,mt),c(e,be,p),c(e,O,p),a(O,ht),c(e,Ce,p),c(e,d,p),a(d,le),a(le,M),a(M,Pt),a(d,yt),a(d,pe),a(pe,q),a(q,vt),a(d,Et),a(d,ce),a(ce,W),a(W,It),a(d,wt),a(d,ie),a(ie,G),a(G,jt),a(d,Tt),a(d,ue),a(ue,Y),a(Y,At),a(d,Lt),a(d,fe),a(fe,B),a(B,bt),De=!0},p(e,[p]){const C={};p&1&&(C.$$scope={dirty:p,ctx:e}),v.$set(C)},i(e){De||(ya(v.$$.fragment,e),De=!0)},o(e){va(v.$$.fragment,e),De=!1},d(e){e&&t(f),e&&t(y),Ea(v,e),e&&t(_e),e&&t(E),e&&t(ke),e&&t(S),e&&t(me),e&&t(I),e&&t(he),e&&t(P),e&&t(Pe),e&&t(w),e&&t(ye),e&&t(g),e&&t(ve),e&&t(m),e&&t(Ee),e&&t(j),e&&t(Ie),e&&t(b),e&&t(we),e&&t(U),e&&t(je),e&&t(T),e&&t(Te),e&&t(V),e&&t(Ae),e&&t(A),e&&t(Le),e&&t(R),e&&t(be),e&&t(O),e&&t(Ce),e&&t(d)}}}class Ca extends da{constructor(f){super();_a(this,f,null,Ta,ka,{})}}export{Ca as default};
