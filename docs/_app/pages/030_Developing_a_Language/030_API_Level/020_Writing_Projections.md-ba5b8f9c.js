import{S as Ip,i as $p,s as Mp,e as o,t as s,k as r,w as Ya,c as p,a as l,d as e,h as a,m as u,x as qa,b as h,g as c,H as n,y as Ja,q as Ka,o as Qa,B as Xa}from"../../../chunks/vendor-0dc77bd0.js";import{N as Np}from"../../../chunks/Note-b0db7989.js";import{F as kp}from"../../../chunks/Figure-4dd15a94.js";/* empty css                                                         *//* empty css                                                           */function Wp(xn){let f;return{c(){f=s("Use another filename and/or location")},l(m){f=a(m,"Use another filename and/or location")},m(m,A){c(m,f,A)},d(m){m&&e(f)}}}function zp(xn){let f,m,A;return{c(){f=s("You can rename the file `~/picode/editor/Custom"),m=o("yourLanguageName"),A=s("Projection.ts` and/or put it in another location.\nIn that case, you need to adjust the file `config/ProjectItConfiguration`.")},l(b){f=a(b,"You can rename the file `~/picode/editor/Custom"),m=p(b,"YOURLANGUAGENAME",{});var d=l(m);A=a(d,"Projection.ts` and/or put it in another location.\nIn that case, you need to adjust the file `config/ProjectItConfiguration`."),d.forEach(e)},m(b,d){c(b,f,d),c(b,m,d),n(m,A)},d(b){b&&e(f),b&&e(m)}}}function Up(xn){let f,m,A,b,d,ye,ct,jt,we,Ee,Lt,ve,_e,gt,be,xe,Tt,je,Le,jn,I,ge,rt,Te,Pe,Ln,$,Be,q,Ce,De,gn,J,Se,Pt,Oe,Tn,y,He,Bt,Ae,Ie,Ct,$e,Me,Dt,Ne,We,St,ze,Ue,Ot,Fe,Re,Pn,K,fp=`<code class="language-ts"><span class="token comment">// tutorial-language/editor/CustomEntityProjection.ts#L40-L43</span>

<span class="token function">getBox</span><span class="token punctuation">(</span>element<span class="token operator">:</span> PiElement<span class="token punctuation">)</span><span class="token operator">:</span> Box <span class="token punctuation">&#123;</span>
    <span class="token comment">// Add any handmade projections of your own before next statement</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Bn,M,Cn,ut,Ve,Dn,dt,Ge,Sn,j,Ye,Ht,qe,Je,At,Ke,Qe,It,Xe,Ze,On,Q,hp=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.ast#L56-L61</span>

modelunit EntityModelUnit <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> name<span class="token operator">:</span> identifier<span class="token punctuation">;</span>

    functions<span class="token operator">:</span> EntityFunction<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    entities<span class="token operator">:</span> Entity<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Hn,w,ts,$t,ns,es,Mt,ss,as,Nt,os,ps,Wt,ls,is,zt,cs,rs,An,X,mp=`<code class="language-ts"><span class="token comment">// tutorial-language/editor/CustomEntityProjection.ts#L45-L51</span>

<span class="token comment">// Most simple model box</span>
<span class="token keyword">private</span> <span class="token function">createModelBox</span><span class="token punctuation">(</span>model<span class="token operator">:</span> EntityModelUnit<span class="token punctuation">)</span><span class="token operator">:</span> Box <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HorizontalListBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">LabelBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model-label"</span><span class="token punctuation">,</span> <span class="token string">"Model"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">TextBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model-name"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> model<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>model<span class="token punctuation">.</span>name <span class="token operator">=</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,In,kt,us,$n,Z,Mn,ft,ds,Nn,N,Ut,ks,fs,Ft,hs,Wn,ht,ms,zn,L,ys,Rt,ws,Es,Vt,vs,_s,Gt,bs,xs,Un,g,js,Yt,Ls,gs,qt,Ts,Ps,Jt,Bs,Cs,Fn,tt,yp=`<code class="language-ts"><span class="token comment">// tutorial-language/editor/CustomEntityProjection.ts#L53-L63</span>

<span class="token comment">// Modelbox with style added</span>
<span class="token keyword">private</span> <span class="token function">createModelBox2</span><span class="token punctuation">(</span>model<span class="token operator">:</span> EntityModelUnit<span class="token punctuation">)</span><span class="token operator">:</span> Box <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HorizontalListBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">LabelBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model-label"</span><span class="token punctuation">,</span> <span class="token string">"Model"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
            style<span class="token operator">:</span> <span class="token function">styleToCSS</span><span class="token punctuation">(</span>projectitStyles<span class="token punctuation">.</span>keyword<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">TextBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model-name"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> model<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>model<span class="token punctuation">.</span>name <span class="token operator">=</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
            placeHolder<span class="token operator">:</span> <span class="token string">"&lt;name>"</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Rn,mt,Ds,Vn,nt,Gn,T,Ss,Kt,Os,Hs,Qt,As,Is,yt,$s,Ms,Yn,et,wp=`<code class="language-ts"><span class="token comment">// tutorial-language/editor/styles/styles.ts#L37-L40</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> keyword<span class="token operator">:</span> PiStyle <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"font-weight"</span><span class="token operator">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>
    color<span class="token operator">:</span> <span class="token string">"blue"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,qn,wt,Ns,Jn,v,Ws,Xt,zs,Us,Zt,Fs,Rs,tn,Vs,Gs,nn,Ys,qs,Kn,st,Ep=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.ast#L60-L60</span>

entities<span class="token operator">:</span> Entity<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code>`,Qn,_,Js,en,Ks,Qs,sn,Xs,Zs,an,ta,na,on,ea,sa,Xn,at,vp=`<code class="language-ts"><span class="token comment">// tutorial-language/editor/CustomEntityProjection.ts#L67-L86</span>

<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VerticalListBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HorizontalListBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model-info"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">LabelBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model-keyword"</span><span class="token punctuation">,</span> <span class="token string">"Model"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
            style<span class="token operator">:</span> <span class="token function">styleToCSS</span><span class="token punctuation">(</span>projectitStyles<span class="token punctuation">.</span>keyword<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">TextBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"model-name"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> model<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>model<span class="token punctuation">.</span>name <span class="token operator">=</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
            placeHolder<span class="token operator">:</span> <span class="token string">"&lt;name>"</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">LabelBox</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"entity-keyword"</span><span class="token punctuation">,</span> <span class="token string">"Entities"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        style<span class="token operator">:</span> <span class="token function">styleToCSS</span><span class="token punctuation">(</span>projectitStyles<span class="token punctuation">.</span>keyword<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">VerticalListBox</span><span class="token punctuation">(</span>
        model<span class="token punctuation">,</span>
        <span class="token string">"entity-list"</span><span class="token punctuation">,</span>
        model<span class="token punctuation">.</span>entities<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ent <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rootProjection<span class="token punctuation">.</span><span class="token function">getBox</span><span class="token punctuation">(</span>ent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Zn,k,aa,pn,oa,pa,ln,la,ia,cn,ca,ra,rn,ua,da,un,ka,fa,dn,ha,ma,Et,ya,wa,te,W,Ea,kn,va,_a,ne,ot,_p=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.ast#L26-L32</span>

concept Entity <span class="token keyword">implements</span> <span class="token class-name">Type</span> <span class="token punctuation">&#123;</span>
    isCompany<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    attributes<span class="token operator">:</span> AttributeWithLimitedType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    entAttributes<span class="token operator">:</span> AttributeWithEntityType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    functions<span class="token operator">:</span> EntityFunction<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    reference baseEntity<span class="token operator">?</span><span class="token operator">:</span> Entity<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ee,P,ba,fn,xa,ja,hn,La,ga,mn,Ta,Pa,se,pt,bp=`<code class="language-ts"><span class="token comment">// tutorial-language/editor/CustomEntityProjection.ts#L108-L127</span>

<span class="token keyword">private</span> <span class="token function">createEntityBox</span><span class="token punctuation">(</span>entity<span class="token operator">:</span> Entity<span class="token punctuation">)</span><span class="token operator">:</span> Box <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VerticalListBox</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span><span class="token string">"entity"</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>
            <span class="token keyword">new</span> <span class="token class-name">HorizontalListBox</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span> <span class="token string">"entity-info"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
                <span class="token keyword">new</span> <span class="token class-name">LabelBox</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span> <span class="token string">"entity-keyword"</span><span class="token punctuation">,</span> <span class="token string">"Entity"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
                    style<span class="token operator">:</span> <span class="token function">styleToCSS</span><span class="token punctuation">(</span>projectitStyles<span class="token punctuation">.</span>keyword<span class="token punctuation">)</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">TextBox</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span> <span class="token string">"entity-name"</span><span class="token punctuation">,</span>
                    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> entity<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
                    <span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>entity<span class="token punctuation">.</span>name <span class="token operator">=</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token punctuation">&#123;</span> placeHolder<span class="token operator">:</span> <span class="token string">"&lt;name>"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">VerticalListBox</span><span class="token punctuation">(</span> entity<span class="token punctuation">,</span> <span class="token string">"attribute-list"</span><span class="token punctuation">,</span>
                entity<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>att <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rootProjection<span class="token punctuation">.</span><span class="token function">getBox</span><span class="token punctuation">(</span>att<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ae,S,Ba,yn,Ca,Da,wn,Sa,Oa,oe,lt,xp=`<code class="language-ts"><span class="token comment">// tutorial-language/defs/LanguageDefinition.ast#L71-L74</span>

concept AttributeWithLimitedType <span class="token punctuation">&#123;</span>
    reference declaredType<span class="token operator">:</span> AttributeType<span class="token punctuation">;</span>
    name<span class="token operator">:</span> identifier<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,pe,it,jp='<code class="language-ts"><span class="token comment">// tutorial-language/editor/CustomEntityProjection.ts#L71-L106</span></code>',le,vt,Ha,ie,_t,Aa,ce,B,En,Ia,$a,vn,Ma,Na,_n,Wa,za,bn,Ua,re,z,Fa,bt,Ra,Va,ue;return M=new Np({props:{$$slots:{content:[zp],header:[Wp]},$$scope:{ctx:xn}}}),Z=new kp({props:{imageName:"demomodelname.png",caption:"Simple Projection of a name property",figureNumber:1}}),nt=new kp({props:{imageName:"demomodelname-with-style.png",caption:"Simple Projection with Styles",figureNumber:2}}),{c(){f=o("h1"),m=o("a"),A=s(" Writing Projections in TypeScript"),b=r(),d=o("p"),ye=s(`The editor is always an implementation of the interface
`),ct=o("a"),jt=o("code"),we=s("PiProjection"),Ee=s(`. The
implementation generated by ProjectIt is located in the file `),Lt=o("code"),ve=s("~/picode/editor/gen/<yourLanguageName>ProjectionDefault.ts"),_e=s(`.
It holds projections for `),gt=o("strong"),be=s("all concepts"),xe=s(" in the language. When a projection is given in the "),Tt=o("code"),je=s(".edit"),Le=s(`
file this is the one that will be in
the implementation, when no projection is defined, a default projection will be generated.`),jn=r(),I=o("p"),ge=s("As you can read in the "),rt=o("a"),Te=s("ProjectIt Editor Framework"),Pe=s(`  ,
all projections are based on boxes. In the next few steps we will show you how to build a hierarchy
of boxes to project your AST nodes, and how to style these boxes according to your wishes.`),Ln=r(),$=o("p"),Be=s(`The projections in this section are available in
the `),q=o("a"),Ce=s("ProjectIt-example"),De=s("."),gn=r(),J=o("h2"),Se=s("Customize by implementing "),Pt=o("code"),Oe=s("getBox()"),Tn=r(),y=o("p"),He=s("In order to customize the editor you need to implement the "),Bt=o("code"),Ae=s("getBox(...)"),Ie=s(` method in the
file `),Ct=o("code"),$e=s("~/picode/editor/Custom<yourLanguageName>Projection.ts"),Me=s(`.
For every concept that needs a customized projection, it should
return a `),Dt=o("code"),Ne=s("Box"),We=s(" object. For all other concepts it should simply return "),St=o("code"),ze=s("null"),Ue=s(`.
This way ProjectIt will know that you did not define a projection yourself and will use the projection
defined in `),Ot=o("code"),Fe=s("~/picode/editor/gen/<yourLanguageName>ProjectionDefault"),Re=s("."),Pn=r(),K=o("pre"),Bn=r(),Ya(M.$$.fragment),Cn=r(),ut=o("h2"),Ve=s("How to Create a Box Object"),Dn=r(),dt=o("h3"),Ge=s("Step 1 - Projecting a Simple Property"),Sn=r(),j=o("p"),Ye=s("We start with building the projection for a simple property of type "),Ht=o("code"),qe=s("identifier"),Je=s(`:
the name of the unit in our Entity language. In the metamodel this is represented by the value of
the property `),At=o("code"),Ke=s("name"),Qe=s(" of class "),It=o("code"),Xe=s("EntityModelUnit"),Ze=s("."),On=r(),Q=o("pre"),Hn=r(),w=o("p"),ts=s(`A reasonable choice for the projection of this property is a
`),$t=o("code"),ns=s("HorizontalListBox"),es=s(" which holds a "),Mt=o("code"),ss=s("LabelBox"),as=s(` with
the name of the class, followed by the value stored in the variable `),Nt=o("em"),os=s("name"),ps=s(`.
The following code shows a method that returns
this `),Wt=o("code"),ls=s("HorizontalListBox"),is=s(". This method should be called in the overall method "),zt=o("code"),cs=s("getBox(...)"),rs=s("."),An=r(),X=o("pre"),In=r(),kt=o("p"),us=s("When we start the editor based on this projection, we see the following:"),$n=r(),Ya(Z.$$.fragment),Mn=r(),ft=o("p"),ds=s("It doesn\u2019t look very nice currently."),Nn=r(),N=o("ol"),Ut=o("li"),ks=s("The label is not distinguishable from the name of the model."),fs=r(),Ft=o("li"),hs=s("When the name of the model becomes empty, there is no visual clue that you can add a name."),Wn=r(),ht=o("h3"),ms=s("Step 2 - Adding Style and a PlaceHolder"),zn=r(),L=o("p"),ys=s(`To make the label look different from the value of the property, we need to add a style
to the `),Rt=o("code"),ws=s("LabelBox"),Es=s(". To do so, we associate the "),Vt=o("code"),vs=s("LabelBox"),_s=s(" with the style "),Gt=o("code"),bs=s("projectitStyles.keyword"),xs=s(`.
This will project it in a different color.`),Un=r(),g=o("p"),js=s("Also, we give the "),Yt=o("code"),Ls=s("TextBox"),gs=s(" has a "),qt=o("code"),Ts=s("placeHolder"),Ps=s(` property. The placeholder will be shown
whenever the contents of the `),Jt=o("code"),Bs=s("TextBox"),Cs=s(`
is empty, giving the user a visual clue that a name could be entered.`),Fn=r(),tt=o("pre"),Rn=r(),mt=o("p"),Ds=s("The result looks a lot better."),Vn=r(),Ya(nt.$$.fragment),Gn=r(),T=o("p"),Ss=s("The style "),Kt=o("code"),Os=s("projectitStyles.keyword"),Hs=s(" is defined in the file "),Qt=o("code"),As=s("~/picode/editor/styles/styles.ts"),Is=s(` as follows.
In principle all CSS styles can be used here. Learn more about styling
in `),yt=o("a"),$s=s("Styling"),Ms=s("."),Yn=r(),et=o("pre"),qn=r(),wt=o("h3"),Ns=s("Step 3 - Projecting a List"),Jn=r(),v=o("p"),Ws=s("Next, we will add the "),Xt=o("code"),zs=s("entities"),Us=s(" property of the "),Zt=o("code"),Fs=s("EntityModelUnit"),Rs=s(` to the projection.
The `),tn=o("code"),Vs=s("entities"),Gs=s(" property is a list of "),nn=o("code"),Ys=s("Entity"),qs=s("."),Kn=r(),st=o("pre"),Qn=r(),_=o("p"),Js=s("In the projection we add a "),en=o("code"),Ks=s("LabelBox"),Qs=s(`, to be shown
before the list, and the list itself using a `),sn=o("code"),Xs=s("VerticalListBox"),Zs=s(` to make sure that this list is
displayed vertically. Note that the `),an=o("code"),ta=s("LabelBox"),na=s(" is styled as a keyword, like the "),on=o("code"),ea=s("LabelBox"),sa=s(`
in the previous step.`),Xn=r(),at=o("pre"),Zn=r(),k=o("p"),aa=s("The projection of a single "),pn=o("code"),oa=s("Entity"),pa=s(" is done using "),ln=o("code"),la=s("this.rootProjection.getBox(ent)"),ia=s(`. This will call a
separate function (here called `),cn=o("code"),ca=s("createEntityBox"),ra=s(") that also returns a "),rn=o("code"),ua=s("Box"),da=s(`, thus building a hierarchy of boxes. The use of
`),un=o("code"),ka=s("this.rootProjection.getBox(ent)"),fa=s(", instead of directly calling "),dn=o("code"),ha=s("createEntityBox"),ma=s(`,
ensures that the proper projection for entity is used, following the rules laid down in
`),Et=o("a"),ya=s("customize projections"),wa=s("."),te=r(),W=o("p"),Ea=s("We can track the hierarchy of boxes. First, have a look at the projection for "),kn=o("code"),va=s("Entity"),_a=s(", which is defines as follows in the .ast."),ne=r(),ot=o("pre"),ee=r(),P=o("p"),ba=s("Its projection is very similar to the projection of the "),fn=o("code"),xa=s("EntityModel"),ja=s(`,
showing the keyword `),hn=o("em"),La=s("Entity"),ga=s(` followed by its name and below all properties of the
entity in a `),mn=o("code"),Ta=s("VerticalListBox"),Pa=s("."),se=r(),pt=o("pre"),ae=r(),S=o("p"),Ba=s("Next in the hierarchy of boxes is the projection of the elements of the "),yn=o("code"),Ca=s("attributes"),Da=s(` list. Once again,
this projection is defined in its own function. Have a look at the .ast definition and the projection method.
Here, we use a `),wn=o("code"),Sa=s("HorizontalListBox"),Oa=s(` to show the property name, followed by a colon,
followed by its type.`),oe=r(),lt=o("pre"),pe=r(),it=o("pre"),le=r(),vt=o("h3"),Ha=s("Step 4 - Adding Behavior"),ie=r(),_t=o("p"),Aa=s(`The projection so far is exactly that: a projection. There are no actions defined yet,
which we need to enable the user to change the model and add elements to it. However,
we do have the built-in default behavior of the editor:`),ce=r(),B=o("ul"),En=o("li"),Ia=s("Inside a TextBox the text can be edited."),$a=r(),vn=o("li"),Ma=s("Using the arrow keys the user can navigate the projection."),Na=r(),_n=o("li"),Wa=s("Using Ctrl-Arrow the user can navigate up and down the model/AST."),za=r(),bn=o("li"),Ua=s("When an element is selected, it can be deleted with the DEL key."),re=r(),z=o("p"),Fa=s(`The default behavior takes care of changing simple AST nodes and deleting both simple and
complex AST nodes. Find out more about adding behavior in `),bt=o("a"),Ra=s("Writing Actions"),Va=s("."),this.h()},l(t){f=p(t,"H1",{});var i=l(f);m=p(i,"A",{name:!0}),l(m).forEach(e),A=a(i," Writing Projections in TypeScript"),i.forEach(e),b=u(t),d=p(t,"P",{});var x=l(d);ye=a(x,`The editor is always an implementation of the interface
`),ct=p(x,"A",{href:!0});var Za=l(ct);jt=p(Za,"CODE",{});var to=l(jt);we=a(to,"PiProjection"),to.forEach(e),Za.forEach(e),Ee=a(x,`. The
implementation generated by ProjectIt is located in the file `),Lt=p(x,"CODE",{});var no=l(Lt);ve=a(no,"~/picode/editor/gen/<yourLanguageName>ProjectionDefault.ts"),no.forEach(e),_e=a(x,`.
It holds projections for `),gt=p(x,"STRONG",{});var eo=l(gt);be=a(eo,"all concepts"),eo.forEach(e),xe=a(x," in the language. When a projection is given in the "),Tt=p(x,"CODE",{});var so=l(Tt);je=a(so,".edit"),so.forEach(e),Le=a(x,`
file this is the one that will be in
the implementation, when no projection is defined, a default projection will be generated.`),x.forEach(e),jn=u(t),I=p(t,"P",{});var de=l(I);ge=a(de,"As you can read in the "),rt=p(de,"A",{href:!0});var ao=l(rt);Te=a(ao,"ProjectIt Editor Framework"),ao.forEach(e),Pe=a(de,`  ,
all projections are based on boxes. In the next few steps we will show you how to build a hierarchy
of boxes to project your AST nodes, and how to style these boxes according to your wishes.`),de.forEach(e),Ln=u(t),$=p(t,"P",{});var ke=l($);Be=a(ke,`The projections in this section are available in
the `),q=p(ke,"A",{href:!0,target:!0});var oo=l(q);Ce=a(oo,"ProjectIt-example"),oo.forEach(e),De=a(ke,"."),ke.forEach(e),gn=u(t),J=p(t,"H2",{});var Ga=l(J);Se=a(Ga,"Customize by implementing "),Pt=p(Ga,"CODE",{});var po=l(Pt);Oe=a(po,"getBox()"),po.forEach(e),Ga.forEach(e),Tn=u(t),y=p(t,"P",{});var C=l(y);He=a(C,"In order to customize the editor you need to implement the "),Bt=p(C,"CODE",{});var lo=l(Bt);Ae=a(lo,"getBox(...)"),lo.forEach(e),Ie=a(C,` method in the
file `),Ct=p(C,"CODE",{});var io=l(Ct);$e=a(io,"~/picode/editor/Custom<yourLanguageName>Projection.ts"),io.forEach(e),Me=a(C,`.
For every concept that needs a customized projection, it should
return a `),Dt=p(C,"CODE",{});var co=l(Dt);Ne=a(co,"Box"),co.forEach(e),We=a(C," object. For all other concepts it should simply return "),St=p(C,"CODE",{});var ro=l(St);ze=a(ro,"null"),ro.forEach(e),Ue=a(C,`.
This way ProjectIt will know that you did not define a projection yourself and will use the projection
defined in `),Ot=p(C,"CODE",{});var uo=l(Ot);Fe=a(uo,"~/picode/editor/gen/<yourLanguageName>ProjectionDefault"),uo.forEach(e),Re=a(C,"."),C.forEach(e),Pn=u(t),K=p(t,"PRE",{class:!0});var Lp=l(K);Lp.forEach(e),Bn=u(t),qa(M.$$.fragment,t),Cn=u(t),ut=p(t,"H2",{});var ko=l(ut);Ve=a(ko,"How to Create a Box Object"),ko.forEach(e),Dn=u(t),dt=p(t,"H3",{});var fo=l(dt);Ge=a(fo,"Step 1 - Projecting a Simple Property"),fo.forEach(e),Sn=u(t),j=p(t,"P",{});var U=l(j);Ye=a(U,"We start with building the projection for a simple property of type "),Ht=p(U,"CODE",{});var ho=l(Ht);qe=a(ho,"identifier"),ho.forEach(e),Je=a(U,`:
the name of the unit in our Entity language. In the metamodel this is represented by the value of
the property `),At=p(U,"CODE",{});var mo=l(At);Ke=a(mo,"name"),mo.forEach(e),Qe=a(U," of class "),It=p(U,"CODE",{});var yo=l(It);Xe=a(yo,"EntityModelUnit"),yo.forEach(e),Ze=a(U,"."),U.forEach(e),On=u(t),Q=p(t,"PRE",{class:!0});var gp=l(Q);gp.forEach(e),Hn=u(t),w=p(t,"P",{});var D=l(w);ts=a(D,`A reasonable choice for the projection of this property is a
`),$t=p(D,"CODE",{});var wo=l($t);ns=a(wo,"HorizontalListBox"),wo.forEach(e),es=a(D," which holds a "),Mt=p(D,"CODE",{});var Eo=l(Mt);ss=a(Eo,"LabelBox"),Eo.forEach(e),as=a(D,` with
the name of the class, followed by the value stored in the variable `),Nt=p(D,"EM",{});var vo=l(Nt);os=a(vo,"name"),vo.forEach(e),ps=a(D,`.
The following code shows a method that returns
this `),Wt=p(D,"CODE",{});var _o=l(Wt);ls=a(_o,"HorizontalListBox"),_o.forEach(e),is=a(D,". This method should be called in the overall method "),zt=p(D,"CODE",{});var bo=l(zt);cs=a(bo,"getBox(...)"),bo.forEach(e),rs=a(D,"."),D.forEach(e),An=u(t),X=p(t,"PRE",{class:!0});var Tp=l(X);Tp.forEach(e),In=u(t),kt=p(t,"P",{});var xo=l(kt);us=a(xo,"When we start the editor based on this projection, we see the following:"),xo.forEach(e),$n=u(t),qa(Z.$$.fragment,t),Mn=u(t),ft=p(t,"P",{});var jo=l(ft);ds=a(jo,"It doesn\u2019t look very nice currently."),jo.forEach(e),Nn=u(t),N=p(t,"OL",{});var fe=l(N);Ut=p(fe,"LI",{});var Lo=l(Ut);ks=a(Lo,"The label is not distinguishable from the name of the model."),Lo.forEach(e),fs=u(fe),Ft=p(fe,"LI",{});var go=l(Ft);hs=a(go,"When the name of the model becomes empty, there is no visual clue that you can add a name."),go.forEach(e),fe.forEach(e),Wn=u(t),ht=p(t,"H3",{});var To=l(ht);ms=a(To,"Step 2 - Adding Style and a PlaceHolder"),To.forEach(e),zn=u(t),L=p(t,"P",{});var F=l(L);ys=a(F,`To make the label look different from the value of the property, we need to add a style
to the `),Rt=p(F,"CODE",{});var Po=l(Rt);ws=a(Po,"LabelBox"),Po.forEach(e),Es=a(F,". To do so, we associate the "),Vt=p(F,"CODE",{});var Bo=l(Vt);vs=a(Bo,"LabelBox"),Bo.forEach(e),_s=a(F," with the style "),Gt=p(F,"CODE",{});var Co=l(Gt);bs=a(Co,"projectitStyles.keyword"),Co.forEach(e),xs=a(F,`.
This will project it in a different color.`),F.forEach(e),Un=u(t),g=p(t,"P",{});var R=l(g);js=a(R,"Also, we give the "),Yt=p(R,"CODE",{});var Do=l(Yt);Ls=a(Do,"TextBox"),Do.forEach(e),gs=a(R," has a "),qt=p(R,"CODE",{});var So=l(qt);Ts=a(So,"placeHolder"),So.forEach(e),Ps=a(R,` property. The placeholder will be shown
whenever the contents of the `),Jt=p(R,"CODE",{});var Oo=l(Jt);Bs=a(Oo,"TextBox"),Oo.forEach(e),Cs=a(R,`
is empty, giving the user a visual clue that a name could be entered.`),R.forEach(e),Fn=u(t),tt=p(t,"PRE",{class:!0});var Pp=l(tt);Pp.forEach(e),Rn=u(t),mt=p(t,"P",{});var Ho=l(mt);Ds=a(Ho,"The result looks a lot better."),Ho.forEach(e),Vn=u(t),qa(nt.$$.fragment,t),Gn=u(t),T=p(t,"P",{});var V=l(T);Ss=a(V,"The style "),Kt=p(V,"CODE",{});var Ao=l(Kt);Os=a(Ao,"projectitStyles.keyword"),Ao.forEach(e),Hs=a(V," is defined in the file "),Qt=p(V,"CODE",{});var Io=l(Qt);As=a(Io,"~/picode/editor/styles/styles.ts"),Io.forEach(e),Is=a(V,` as follows.
In principle all CSS styles can be used here. Learn more about styling
in `),yt=p(V,"A",{href:!0});var $o=l(yt);$s=a($o,"Styling"),$o.forEach(e),Ms=a(V,"."),V.forEach(e),Yn=u(t),et=p(t,"PRE",{class:!0});var Bp=l(et);Bp.forEach(e),qn=u(t),wt=p(t,"H3",{});var Mo=l(wt);Ns=a(Mo,"Step 3 - Projecting a List"),Mo.forEach(e),Jn=u(t),v=p(t,"P",{});var O=l(v);Ws=a(O,"Next, we will add the "),Xt=p(O,"CODE",{});var No=l(Xt);zs=a(No,"entities"),No.forEach(e),Us=a(O," property of the "),Zt=p(O,"CODE",{});var Wo=l(Zt);Fs=a(Wo,"EntityModelUnit"),Wo.forEach(e),Rs=a(O,` to the projection.
The `),tn=p(O,"CODE",{});var zo=l(tn);Vs=a(zo,"entities"),zo.forEach(e),Gs=a(O," property is a list of "),nn=p(O,"CODE",{});var Uo=l(nn);Ys=a(Uo,"Entity"),Uo.forEach(e),qs=a(O,"."),O.forEach(e),Kn=u(t),st=p(t,"PRE",{class:!0});var Cp=l(st);Cp.forEach(e),Qn=u(t),_=p(t,"P",{});var H=l(_);Js=a(H,"In the projection we add a "),en=p(H,"CODE",{});var Fo=l(en);Ks=a(Fo,"LabelBox"),Fo.forEach(e),Qs=a(H,`, to be shown
before the list, and the list itself using a `),sn=p(H,"CODE",{});var Ro=l(sn);Xs=a(Ro,"VerticalListBox"),Ro.forEach(e),Zs=a(H,` to make sure that this list is
displayed vertically. Note that the `),an=p(H,"CODE",{});var Vo=l(an);ta=a(Vo,"LabelBox"),Vo.forEach(e),na=a(H," is styled as a keyword, like the "),on=p(H,"CODE",{});var Go=l(on);ea=a(Go,"LabelBox"),Go.forEach(e),sa=a(H,`
in the previous step.`),H.forEach(e),Xn=u(t),at=p(t,"PRE",{class:!0});var Dp=l(at);Dp.forEach(e),Zn=u(t),k=p(t,"P",{});var E=l(k);aa=a(E,"The projection of a single "),pn=p(E,"CODE",{});var Yo=l(pn);oa=a(Yo,"Entity"),Yo.forEach(e),pa=a(E," is done using "),ln=p(E,"CODE",{});var qo=l(ln);la=a(qo,"this.rootProjection.getBox(ent)"),qo.forEach(e),ia=a(E,`. This will call a
separate function (here called `),cn=p(E,"CODE",{});var Jo=l(cn);ca=a(Jo,"createEntityBox"),Jo.forEach(e),ra=a(E,") that also returns a "),rn=p(E,"CODE",{});var Ko=l(rn);ua=a(Ko,"Box"),Ko.forEach(e),da=a(E,`, thus building a hierarchy of boxes. The use of
`),un=p(E,"CODE",{});var Qo=l(un);ka=a(Qo,"this.rootProjection.getBox(ent)"),Qo.forEach(e),fa=a(E,", instead of directly calling "),dn=p(E,"CODE",{});var Xo=l(dn);ha=a(Xo,"createEntityBox"),Xo.forEach(e),ma=a(E,`,
ensures that the proper projection for entity is used, following the rules laid down in
`),Et=p(E,"A",{href:!0});var Zo=l(Et);ya=a(Zo,"customize projections"),Zo.forEach(e),wa=a(E,"."),E.forEach(e),te=u(t),W=p(t,"P",{});var he=l(W);Ea=a(he,"We can track the hierarchy of boxes. First, have a look at the projection for "),kn=p(he,"CODE",{});var tp=l(kn);va=a(tp,"Entity"),tp.forEach(e),_a=a(he,", which is defines as follows in the .ast."),he.forEach(e),ne=u(t),ot=p(t,"PRE",{class:!0});var Sp=l(ot);Sp.forEach(e),ee=u(t),P=p(t,"P",{});var G=l(P);ba=a(G,"Its projection is very similar to the projection of the "),fn=p(G,"CODE",{});var np=l(fn);xa=a(np,"EntityModel"),np.forEach(e),ja=a(G,`,
showing the keyword `),hn=p(G,"EM",{});var ep=l(hn);La=a(ep,"Entity"),ep.forEach(e),ga=a(G,` followed by its name and below all properties of the
entity in a `),mn=p(G,"CODE",{});var sp=l(mn);Ta=a(sp,"VerticalListBox"),sp.forEach(e),Pa=a(G,"."),G.forEach(e),se=u(t),pt=p(t,"PRE",{class:!0});var Op=l(pt);Op.forEach(e),ae=u(t),S=p(t,"P",{});var xt=l(S);Ba=a(xt,"Next in the hierarchy of boxes is the projection of the elements of the "),yn=p(xt,"CODE",{});var ap=l(yn);Ca=a(ap,"attributes"),ap.forEach(e),Da=a(xt,` list. Once again,
this projection is defined in its own function. Have a look at the .ast definition and the projection method.
Here, we use a `),wn=p(xt,"CODE",{});var op=l(wn);Sa=a(op,"HorizontalListBox"),op.forEach(e),Oa=a(xt,` to show the property name, followed by a colon,
followed by its type.`),xt.forEach(e),oe=u(t),lt=p(t,"PRE",{class:!0});var Hp=l(lt);Hp.forEach(e),pe=u(t),it=p(t,"PRE",{class:!0});var Ap=l(it);Ap.forEach(e),le=u(t),vt=p(t,"H3",{});var pp=l(vt);Ha=a(pp,"Step 4 - Adding Behavior"),pp.forEach(e),ie=u(t),_t=p(t,"P",{});var lp=l(_t);Aa=a(lp,`The projection so far is exactly that: a projection. There are no actions defined yet,
which we need to enable the user to change the model and add elements to it. However,
we do have the built-in default behavior of the editor:`),lp.forEach(e),ce=u(t),B=p(t,"UL",{});var Y=l(B);En=p(Y,"LI",{});var ip=l(En);Ia=a(ip,"Inside a TextBox the text can be edited."),ip.forEach(e),$a=u(Y),vn=p(Y,"LI",{});var cp=l(vn);Ma=a(cp,"Using the arrow keys the user can navigate the projection."),cp.forEach(e),Na=u(Y),_n=p(Y,"LI",{});var rp=l(_n);Wa=a(rp,"Using Ctrl-Arrow the user can navigate up and down the model/AST."),rp.forEach(e),za=u(Y),bn=p(Y,"LI",{});var up=l(bn);Ua=a(up,"When an element is selected, it can be deleted with the DEL key."),up.forEach(e),Y.forEach(e),re=u(t),z=p(t,"P",{});var me=l(z);Fa=a(me,`The default behavior takes care of changing simple AST nodes and deleting both simple and
complex AST nodes. Find out more about adding behavior in `),bt=p(me,"A",{href:!0});var dp=l(bt);Ra=a(dp,"Writing Actions"),dp.forEach(e),Va=a(me,"."),me.forEach(e),this.h()},h(){h(m,"name","writing-projections"),h(ct,"href","/060_Under_the_Hood/010_The_Editor_Framework/020_The_Editor_Interfaces/010_PiProjection_Interface"),h(rt,"href","/060_Under_the_Hood/010_The_Editor_Framework"),h(q,"href","https://github.com/projectit-org/ProjectIt-example"),h(q,"target","_blank"),h(K,"class","language-ts"),h(Q,"class","language-ts"),h(X,"class","language-ts"),h(tt,"class","language-ts"),h(yt,"href","/030_Developing_a_Language/040_Styling"),h(et,"class","language-ts"),h(st,"class","language-ts"),h(at,"class","language-ts"),h(Et,"href","/030_Developing_a_Language/020_Definition_Level/010_Editor_Definition#editor-three-levels"),h(ot,"class","language-ts"),h(pt,"class","language-ts"),h(lt,"class","language-ts"),h(it,"class","language-ts"),h(bt,"href","/030_Developing_a_Language/030_API_Level/030_Writing_Actions")},m(t,i){c(t,f,i),n(f,m),n(f,A),c(t,b,i),c(t,d,i),n(d,ye),n(d,ct),n(ct,jt),n(jt,we),n(d,Ee),n(d,Lt),n(Lt,ve),n(d,_e),n(d,gt),n(gt,be),n(d,xe),n(d,Tt),n(Tt,je),n(d,Le),c(t,jn,i),c(t,I,i),n(I,ge),n(I,rt),n(rt,Te),n(I,Pe),c(t,Ln,i),c(t,$,i),n($,Be),n($,q),n(q,Ce),n($,De),c(t,gn,i),c(t,J,i),n(J,Se),n(J,Pt),n(Pt,Oe),c(t,Tn,i),c(t,y,i),n(y,He),n(y,Bt),n(Bt,Ae),n(y,Ie),n(y,Ct),n(Ct,$e),n(y,Me),n(y,Dt),n(Dt,Ne),n(y,We),n(y,St),n(St,ze),n(y,Ue),n(y,Ot),n(Ot,Fe),n(y,Re),c(t,Pn,i),c(t,K,i),K.innerHTML=fp,c(t,Bn,i),Ja(M,t,i),c(t,Cn,i),c(t,ut,i),n(ut,Ve),c(t,Dn,i),c(t,dt,i),n(dt,Ge),c(t,Sn,i),c(t,j,i),n(j,Ye),n(j,Ht),n(Ht,qe),n(j,Je),n(j,At),n(At,Ke),n(j,Qe),n(j,It),n(It,Xe),n(j,Ze),c(t,On,i),c(t,Q,i),Q.innerHTML=hp,c(t,Hn,i),c(t,w,i),n(w,ts),n(w,$t),n($t,ns),n(w,es),n(w,Mt),n(Mt,ss),n(w,as),n(w,Nt),n(Nt,os),n(w,ps),n(w,Wt),n(Wt,ls),n(w,is),n(w,zt),n(zt,cs),n(w,rs),c(t,An,i),c(t,X,i),X.innerHTML=mp,c(t,In,i),c(t,kt,i),n(kt,us),c(t,$n,i),Ja(Z,t,i),c(t,Mn,i),c(t,ft,i),n(ft,ds),c(t,Nn,i),c(t,N,i),n(N,Ut),n(Ut,ks),n(N,fs),n(N,Ft),n(Ft,hs),c(t,Wn,i),c(t,ht,i),n(ht,ms),c(t,zn,i),c(t,L,i),n(L,ys),n(L,Rt),n(Rt,ws),n(L,Es),n(L,Vt),n(Vt,vs),n(L,_s),n(L,Gt),n(Gt,bs),n(L,xs),c(t,Un,i),c(t,g,i),n(g,js),n(g,Yt),n(Yt,Ls),n(g,gs),n(g,qt),n(qt,Ts),n(g,Ps),n(g,Jt),n(Jt,Bs),n(g,Cs),c(t,Fn,i),c(t,tt,i),tt.innerHTML=yp,c(t,Rn,i),c(t,mt,i),n(mt,Ds),c(t,Vn,i),Ja(nt,t,i),c(t,Gn,i),c(t,T,i),n(T,Ss),n(T,Kt),n(Kt,Os),n(T,Hs),n(T,Qt),n(Qt,As),n(T,Is),n(T,yt),n(yt,$s),n(T,Ms),c(t,Yn,i),c(t,et,i),et.innerHTML=wp,c(t,qn,i),c(t,wt,i),n(wt,Ns),c(t,Jn,i),c(t,v,i),n(v,Ws),n(v,Xt),n(Xt,zs),n(v,Us),n(v,Zt),n(Zt,Fs),n(v,Rs),n(v,tn),n(tn,Vs),n(v,Gs),n(v,nn),n(nn,Ys),n(v,qs),c(t,Kn,i),c(t,st,i),st.innerHTML=Ep,c(t,Qn,i),c(t,_,i),n(_,Js),n(_,en),n(en,Ks),n(_,Qs),n(_,sn),n(sn,Xs),n(_,Zs),n(_,an),n(an,ta),n(_,na),n(_,on),n(on,ea),n(_,sa),c(t,Xn,i),c(t,at,i),at.innerHTML=vp,c(t,Zn,i),c(t,k,i),n(k,aa),n(k,pn),n(pn,oa),n(k,pa),n(k,ln),n(ln,la),n(k,ia),n(k,cn),n(cn,ca),n(k,ra),n(k,rn),n(rn,ua),n(k,da),n(k,un),n(un,ka),n(k,fa),n(k,dn),n(dn,ha),n(k,ma),n(k,Et),n(Et,ya),n(k,wa),c(t,te,i),c(t,W,i),n(W,Ea),n(W,kn),n(kn,va),n(W,_a),c(t,ne,i),c(t,ot,i),ot.innerHTML=_p,c(t,ee,i),c(t,P,i),n(P,ba),n(P,fn),n(fn,xa),n(P,ja),n(P,hn),n(hn,La),n(P,ga),n(P,mn),n(mn,Ta),n(P,Pa),c(t,se,i),c(t,pt,i),pt.innerHTML=bp,c(t,ae,i),c(t,S,i),n(S,Ba),n(S,yn),n(yn,Ca),n(S,Da),n(S,wn),n(wn,Sa),n(S,Oa),c(t,oe,i),c(t,lt,i),lt.innerHTML=xp,c(t,pe,i),c(t,it,i),it.innerHTML=jp,c(t,le,i),c(t,vt,i),n(vt,Ha),c(t,ie,i),c(t,_t,i),n(_t,Aa),c(t,ce,i),c(t,B,i),n(B,En),n(En,Ia),n(B,$a),n(B,vn),n(vn,Ma),n(B,Na),n(B,_n),n(_n,Wa),n(B,za),n(B,bn),n(bn,Ua),c(t,re,i),c(t,z,i),n(z,Fa),n(z,bt),n(bt,Ra),n(z,Va),ue=!0},p(t,[i]){const x={};i&1&&(x.$$scope={dirty:i,ctx:t}),M.$set(x)},i(t){ue||(Ka(M.$$.fragment,t),Ka(Z.$$.fragment,t),Ka(nt.$$.fragment,t),ue=!0)},o(t){Qa(M.$$.fragment,t),Qa(Z.$$.fragment,t),Qa(nt.$$.fragment,t),ue=!1},d(t){t&&e(f),t&&e(b),t&&e(d),t&&e(jn),t&&e(I),t&&e(Ln),t&&e($),t&&e(gn),t&&e(J),t&&e(Tn),t&&e(y),t&&e(Pn),t&&e(K),t&&e(Bn),Xa(M,t),t&&e(Cn),t&&e(ut),t&&e(Dn),t&&e(dt),t&&e(Sn),t&&e(j),t&&e(On),t&&e(Q),t&&e(Hn),t&&e(w),t&&e(An),t&&e(X),t&&e(In),t&&e(kt),t&&e($n),Xa(Z,t),t&&e(Mn),t&&e(ft),t&&e(Nn),t&&e(N),t&&e(Wn),t&&e(ht),t&&e(zn),t&&e(L),t&&e(Un),t&&e(g),t&&e(Fn),t&&e(tt),t&&e(Rn),t&&e(mt),t&&e(Vn),Xa(nt,t),t&&e(Gn),t&&e(T),t&&e(Yn),t&&e(et),t&&e(qn),t&&e(wt),t&&e(Jn),t&&e(v),t&&e(Kn),t&&e(st),t&&e(Qn),t&&e(_),t&&e(Xn),t&&e(at),t&&e(Zn),t&&e(k),t&&e(te),t&&e(W),t&&e(ne),t&&e(ot),t&&e(ee),t&&e(P),t&&e(se),t&&e(pt),t&&e(ae),t&&e(S),t&&e(oe),t&&e(lt),t&&e(pe),t&&e(it),t&&e(le),t&&e(vt),t&&e(ie),t&&e(_t),t&&e(ce),t&&e(B),t&&e(re),t&&e(z)}}}class qp extends Ip{constructor(f){super();$p(this,f,null,Up,Mp,{})}}export{qp as default};
