import{S as da,i as _a,s as ka,e as n,t as r,k as c,w as ma,c as s,a as o,h as l,d as t,m as u,x as ha,b as k,g as i,H as a,y as ya,q as Pa,o as va,B as Ea}from"../../../chunks/vendor-0dc77bd0.js";import{N as Ia}from"../../../chunks/Note-b0db7989.js";/* empty css                                                         */function wa(de){let f;return{c(){f=r("Parts of this documentation are outdated")},l(_){f=l(_,"Parts of this documentation are outdated")},m(_,P){i(_,f,P)},d(_){_&&t(f)}}}function Ta(de){let f;return{c(){f=r(`Sorry, Freon / Freon is constantly in development, therefore parts of this section are outdated. 
In the future the documentation will be updated.`)},l(_){f=l(_,`Sorry, Freon / Freon is constantly in development, therefore parts of this section are outdated. 
In the future the documentation will be updated.`)},m(_,P){i(_,f,P)},d(_){_&&t(f)}}}function Aa(de){let f,_,P,v,_e,E,ze,D,ge,Ue,ke,S,Ve,me,I,Ne,K,Re,Oe,he,y,Q,F,Me,qe,X,$,We,Ge,Z,H,Ye,ye,w,Be,x,Je,Ke,Pe,z,Qe,ve,m,Xe,ee,Ze,et,te,tt,at,ae,nt,st,Ee,T,ot,ne,rt,lt,Ie,b,ua=`<code class="language-ts"><span class="token comment">// docu-project/config/ProjectitConfiguration.ts</span>

<span class="token operator">/</span> Generated by the ProjectIt Language Generator<span class="token punctuation">.</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> PiProjection<span class="token punctuation">,</span> PiActions<span class="token punctuation">,</span> PiTyperPart<span class="token punctuation">,</span> PiStdlib <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@projectit/core"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CustomDocuProjectActions<span class="token punctuation">,</span> CustomDocuProjectProjection <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../editor"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CustomDocuProjectTyperPart <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../typer"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CustomDocuProjectValidator <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../validator"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CustomDocuProjectStdlib <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../stdlib"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> DocuProjectCheckerInterface <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../validator/gen"</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * Class ProjectitConfiguration is the place where you can add all your customisations.
 * These will be used through the 'projectitConfiguration' constant by any generated
 * part of your language environment.
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ProjectitConfiguration</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// add your custom editor projections here</span>
    customProjection<span class="token operator">:</span> PiProjection<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CustomDocuProjectProjection</span><span class="token punctuation">(</span><span class="token string">"manual"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// add your custom editor actions here</span>
    customActions<span class="token operator">:</span> PiActions<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CustomDocuProjectActions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// add your custom validations here</span>
    customValidations<span class="token operator">:</span> DocuProjectCheckerInterface<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CustomDocuProjectValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// add your custom type-providers here</span>
    customTypers<span class="token operator">:</span> PiTyperPart<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CustomDocuProjectTyperPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// add extra predefined instances here</span>
    customStdLibs<span class="token operator">:</span> PiStdlib<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CustomDocuProjectStdlib</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> projectitConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProjectitConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code>`,we,g,pt,Te,A,it,se,ct,ut,Ae,U,ft,je,j,oe,V,dt,_t,re,N,kt,Le,R,mt,be,O,ht,Ce,d,le,M,yt,Pt,pe,q,vt,Et,ie,W,It,wt,ce,G,Tt,At,ue,Y,jt,Lt,fe,B,bt,De;return v=new Ia({props:{$$slots:{content:[Ta],header:[wa]},$$scope:{ctx:de}}}),{c(){f=n("h1"),_=r("The API Level"),P=c(),ma(v.$$.fragment),_e=c(),E=n("p"),ze=r("Please, become acquainted with the "),D=n("a"),ge=r("three levels of customization"),Ue=r(`
used by Freon.
This section explains the 3rd of these three levels where you can customize Freon in TypeScript.`),ke=c(),S=n("h2"),Ve=r("Customize a Pi-tool"),me=c(),I=n("p"),Ne=r("Third level full adaptability "),K=n("em"),Re=r("per concept"),Oe=r(" is currently possible for:"),he=c(),y=n("ul"),Q=n("li"),F=n("a"),Me=r("Editor"),qe=c(),X=n("li"),$=n("a"),We=r("Validator"),Ge=c(),Z=n("li"),H=n("a"),Ye=r("Typer"),ye=c(),w=n("p"),Be=r(`To add third level adaptability for the scoper, parser and unparser is one of the
entries in our `),x=n("a"),Je=r("wish list"),Ke=r("."),Pe=c(),z=n("h2"),Qe=r("Adding your Own Files"),ve=c(),m=n("p"),Xe=r(`As a convenience, Freon generates templates for
your customization in the files `),ee=n("code"),Ze=r("~/picode/editor/Custom<yourLanguageName>Projection.ts"),et=r(", "),te=n("code"),tt=r("~/picode/editor/Custom<yourLanguageName>Actions.ts"),at=r(`, etc
(`),ae=n("code"),nt=r("<yourLanguageName>"),st=r(` is a placeholder for the name of the language as defined in your .ast file). You can use
these files to add your own special elements.`),Ee=c(),T=n("p"),ot=r(`The custom files can be renamed and/or
put it in another location, or you can create your own set of custom projection files.
In that case, you need to adjust the file `),ne=n("code"),rt=r("~/picode/projectit/ProjectItConfiguration"),lt=r("."),Ie=c(),b=n("pre"),we=c(),g=n("h2"),pt=r("Replacing a Pi-tool"),Te=c(),A=n("p"),it=r("All parts can be "),se=n("em"),ct=r("completely replaced"),ut=r(` at the 3rd level, thereby completely
disregarding the default and definition levels.
This is done by implementing their respective interfaces.`),Ae=c(),U=n("p"),ft=r("For the scoper, parser and unparser this is currently the only way to customize."),je=c(),j=n("ul"),oe=n("li"),V=n("a"),dt=r("scoper"),_t=c(),re=n("li"),N=n("a"),kt=r("parser"),Le=c(),R=n("h3"),mt=r("Pi-tool Interfaces"),be=c(),O=n("p"),ht=r("More information on the interfaces can be found here:"),Ce=c(),d=n("ul"),le=n("li"),M=n("a"),yt=r("PiScoper"),Pt=c(),pe=n("li"),q=n("a"),vt=r("PiTyper"),Et=c(),ie=n("li"),W=n("a"),It=r("PiValidator"),wt=c(),ce=n("li"),G=n("a"),Tt=r("PiReader"),At=c(),ue=n("li"),Y=n("a"),jt=r("PiWriter"),Lt=c(),fe=n("li"),B=n("a"),bt=r("PiStdlib"),this.h()},l(e){f=s(e,"H1",{});var p=o(f);_=l(p,"The API Level"),p.forEach(t),P=u(e),ha(v.$$.fragment,e),_e=u(e),E=s(e,"P",{});var C=o(E);ze=l(C,"Please, become acquainted with the "),D=s(C,"A",{href:!0});var Ct=o(D);ge=l(Ct,"three levels of customization"),Ct.forEach(t),Ue=l(C,`
used by Freon.
This section explains the 3rd of these three levels where you can customize Freon in TypeScript.`),C.forEach(t),ke=u(e),S=s(e,"H2",{});var Dt=o(S);Ve=l(Dt,"Customize a Pi-tool"),Dt.forEach(t),me=u(e),I=s(e,"P",{});var Se=o(I);Ne=l(Se,"Third level full adaptability "),K=s(Se,"EM",{});var St=o(K);Re=l(St,"per concept"),St.forEach(t),Oe=l(Se," is currently possible for:"),Se.forEach(t),he=u(e),y=s(e,"UL",{});var J=o(y);Q=s(J,"LI",{});var Ft=o(Q);F=s(Ft,"A",{href:!0});var $t=o(F);Me=l($t,"Editor"),$t.forEach(t),Ft.forEach(t),qe=u(J),X=s(J,"LI",{});var Ht=o(X);$=s(Ht,"A",{href:!0});var xt=o($);We=l(xt,"Validator"),xt.forEach(t),Ht.forEach(t),Ge=u(J),Z=s(J,"LI",{});var zt=o(Z);H=s(zt,"A",{href:!0});var gt=o(H);Ye=l(gt,"Typer"),gt.forEach(t),zt.forEach(t),J.forEach(t),ye=u(e),w=s(e,"P",{});var Fe=o(w);Be=l(Fe,`To add third level adaptability for the scoper, parser and unparser is one of the
entries in our `),x=s(Fe,"A",{href:!0});var Ut=o(x);Je=l(Ut,"wish list"),Ut.forEach(t),Ke=l(Fe,"."),Fe.forEach(t),Pe=u(e),z=s(e,"H2",{});var Vt=o(z);Qe=l(Vt,"Adding your Own Files"),Vt.forEach(t),ve=u(e),m=s(e,"P",{});var L=o(m);Xe=l(L,`As a convenience, Freon generates templates for
your customization in the files `),ee=s(L,"CODE",{});var Nt=o(ee);Ze=l(Nt,"~/picode/editor/Custom<yourLanguageName>Projection.ts"),Nt.forEach(t),et=l(L,", "),te=s(L,"CODE",{});var Rt=o(te);tt=l(Rt,"~/picode/editor/Custom<yourLanguageName>Actions.ts"),Rt.forEach(t),at=l(L,`, etc
(`),ae=s(L,"CODE",{});var Ot=o(ae);nt=l(Ot,"<yourLanguageName>"),Ot.forEach(t),st=l(L,` is a placeholder for the name of the language as defined in your .ast file). You can use
these files to add your own special elements.`),L.forEach(t),Ee=u(e),T=s(e,"P",{});var $e=o(T);ot=l($e,`The custom files can be renamed and/or
put it in another location, or you can create your own set of custom projection files.
In that case, you need to adjust the file `),ne=s($e,"CODE",{});var Mt=o(ne);rt=l(Mt,"~/picode/projectit/ProjectItConfiguration"),Mt.forEach(t),lt=l($e,"."),$e.forEach(t),Ie=u(e),b=s(e,"PRE",{class:!0});var fa=o(b);fa.forEach(t),we=u(e),g=s(e,"H2",{});var qt=o(g);pt=l(qt,"Replacing a Pi-tool"),qt.forEach(t),Te=u(e),A=s(e,"P",{});var He=o(A);it=l(He,"All parts can be "),se=s(He,"EM",{});var Wt=o(se);ct=l(Wt,"completely replaced"),Wt.forEach(t),ut=l(He,` at the 3rd level, thereby completely
disregarding the default and definition levels.
This is done by implementing their respective interfaces.`),He.forEach(t),Ae=u(e),U=s(e,"P",{});var Gt=o(U);ft=l(Gt,"For the scoper, parser and unparser this is currently the only way to customize."),Gt.forEach(t),je=u(e),j=s(e,"UL",{});var xe=o(j);oe=s(xe,"LI",{});var Yt=o(oe);V=s(Yt,"A",{href:!0});var Bt=o(V);dt=l(Bt,"scoper"),Bt.forEach(t),Yt.forEach(t),_t=u(xe),re=s(xe,"LI",{});var Jt=o(re);N=s(Jt,"A",{href:!0});var Kt=o(N);kt=l(Kt,"parser"),Kt.forEach(t),Jt.forEach(t),xe.forEach(t),Le=u(e),R=s(e,"H3",{});var Qt=o(R);mt=l(Qt,"Pi-tool Interfaces"),Qt.forEach(t),be=u(e),O=s(e,"P",{});var Xt=o(O);ht=l(Xt,"More information on the interfaces can be found here:"),Xt.forEach(t),Ce=u(e),d=s(e,"UL",{});var h=o(d);le=s(h,"LI",{});var Zt=o(le);M=s(Zt,"A",{href:!0});var ea=o(M);yt=l(ea,"PiScoper"),ea.forEach(t),Zt.forEach(t),Pt=u(h),pe=s(h,"LI",{});var ta=o(pe);q=s(ta,"A",{href:!0});var aa=o(q);vt=l(aa,"PiTyper"),aa.forEach(t),ta.forEach(t),Et=u(h),ie=s(h,"LI",{});var na=o(ie);W=s(na,"A",{href:!0});var sa=o(W);It=l(sa,"PiValidator"),sa.forEach(t),na.forEach(t),wt=u(h),ce=s(h,"LI",{});var oa=o(ce);G=s(oa,"A",{href:!0});var ra=o(G);Tt=l(ra,"PiReader"),ra.forEach(t),oa.forEach(t),At=u(h),ue=s(h,"LI",{});var la=o(ue);Y=s(la,"A",{href:!0});var pa=o(Y);jt=l(pa,"PiWriter"),pa.forEach(t),la.forEach(t),Lt=u(h),fe=s(h,"LI",{});var ia=o(fe);B=s(ia,"A",{href:!0});var ca=o(B);bt=l(ca,"PiStdlib"),ca.forEach(t),ia.forEach(t),h.forEach(t),this.h()},h(){k(D,"href","/010_Intro/050_Three_Levels_of_Customization"),k(F,"href","/030_Developing_a_Language/030_API_Level/010_Editor_API"),k($,"href","/030_Developing_a_Language/030_API_Level/040_Validator_API"),k(H,"href","/030_Developing_a_Language/030_API_Level/050_Typer_API"),k(x,"href","/010_Intro/090_Future_Developments"),k(b,"class","language-ts"),k(V,"href","/030_Developing_a_Language/030_API_Level/060_Scoper_API"),k(N,"href","/030_Developing_a_Language/030_API_Level/070_Reader_API"),k(M,"href","/060_Under_the_Hood/020_The_PiTool_Interfaces/020_PiScoper_Interface"),k(q,"href","/060_Under_the_Hood/020_The_PiTool_Interfaces/050_PiTyper_Interface"),k(W,"href","/060_Under_the_Hood/020_The_PiTool_Interfaces/040_PiValidator_Interface"),k(G,"href","/060_Under_the_Hood/020_The_PiTool_Interfaces/060_PiReader_Interface"),k(Y,"href","/060_Under_the_Hood/020_The_PiTool_Interfaces/070_PiWriter_Interface"),k(B,"href","/060_Under_the_Hood/020_The_PiTool_Interfaces/080_PiStandardlib_Interface")},m(e,p){i(e,f,p),a(f,_),i(e,P,p),ya(v,e,p),i(e,_e,p),i(e,E,p),a(E,ze),a(E,D),a(D,ge),a(E,Ue),i(e,ke,p),i(e,S,p),a(S,Ve),i(e,me,p),i(e,I,p),a(I,Ne),a(I,K),a(K,Re),a(I,Oe),i(e,he,p),i(e,y,p),a(y,Q),a(Q,F),a(F,Me),a(y,qe),a(y,X),a(X,$),a($,We),a(y,Ge),a(y,Z),a(Z,H),a(H,Ye),i(e,ye,p),i(e,w,p),a(w,Be),a(w,x),a(x,Je),a(w,Ke),i(e,Pe,p),i(e,z,p),a(z,Qe),i(e,ve,p),i(e,m,p),a(m,Xe),a(m,ee),a(ee,Ze),a(m,et),a(m,te),a(te,tt),a(m,at),a(m,ae),a(ae,nt),a(m,st),i(e,Ee,p),i(e,T,p),a(T,ot),a(T,ne),a(ne,rt),a(T,lt),i(e,Ie,p),i(e,b,p),b.innerHTML=ua,i(e,we,p),i(e,g,p),a(g,pt),i(e,Te,p),i(e,A,p),a(A,it),a(A,se),a(se,ct),a(A,ut),i(e,Ae,p),i(e,U,p),a(U,ft),i(e,je,p),i(e,j,p),a(j,oe),a(oe,V),a(V,dt),a(j,_t),a(j,re),a(re,N),a(N,kt),i(e,Le,p),i(e,R,p),a(R,mt),i(e,be,p),i(e,O,p),a(O,ht),i(e,Ce,p),i(e,d,p),a(d,le),a(le,M),a(M,yt),a(d,Pt),a(d,pe),a(pe,q),a(q,vt),a(d,Et),a(d,ie),a(ie,W),a(W,It),a(d,wt),a(d,ce),a(ce,G),a(G,Tt),a(d,At),a(d,ue),a(ue,Y),a(Y,jt),a(d,Lt),a(d,fe),a(fe,B),a(B,bt),De=!0},p(e,[p]){const C={};p&1&&(C.$$scope={dirty:p,ctx:e}),v.$set(C)},i(e){De||(Pa(v.$$.fragment,e),De=!0)},o(e){va(v.$$.fragment,e),De=!1},d(e){e&&t(f),e&&t(P),Ea(v,e),e&&t(_e),e&&t(E),e&&t(ke),e&&t(S),e&&t(me),e&&t(I),e&&t(he),e&&t(y),e&&t(ye),e&&t(w),e&&t(Pe),e&&t(z),e&&t(ve),e&&t(m),e&&t(Ee),e&&t(T),e&&t(Ie),e&&t(b),e&&t(we),e&&t(g),e&&t(Te),e&&t(A),e&&t(Ae),e&&t(U),e&&t(je),e&&t(j),e&&t(Le),e&&t(R),e&&t(be),e&&t(O),e&&t(Ce),e&&t(d)}}}class Ca extends da{constructor(f){super();_a(this,f,null,Aa,ka,{})}}export{Ca as default};
