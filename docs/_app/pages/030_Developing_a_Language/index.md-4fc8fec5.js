import{S as ct,i as ft,s as ht,e as n,t as a,k as p,w as ut,c as i,a as s,h as l,d as o,m,x as dt,b as $,g as f,H as e,y as pt,J as mt,q as _t,o as vt,B as gt}from"../../chunks/vendor-492729b6.js";import{F as Et}from"../../chunks/Figure-d1c3817f.js";/* empty css                                                        */function It(rt){let v,ae,Y,y,le,J,h,I,ne,b,ie,se,re,P,ce,A,fe,he,ue,D,de,T,pe,me,_e,w,ve,j,ge,Ee,z,C,Ie,G,c,Pe,H,De,we,F,Le,xe,B,ye,be,M,Ae,Te,U,je,Ce,K,u,Oe,q,ke,$e,N,He,Fe,S,Be,Me,Q,O,Ue,R,L,V,_,qe,W,Ne,Se,x,We,Ye,X;return L=new Et({props:{imageName:"docu-project-uml.png",caption:"UML diagram of Insurance Project",figureNumber:1}}),{c(){v=n("h1"),ae=a("Developing a Language with ProjectIt"),Y=p(),y=n("p"),le=a("Developing a Language with ProjectIt is usually done taking the following steps."),J=p(),h=n("ol"),I=n("li"),ne=a("Develop the "),b=n("a"),ie=a("metamodel"),se=a("."),re=p(),P=n("li"),ce=a(`Add the concrete syntax by adding an
`),A=n("a"),fe=a("editor definition"),he=a("."),ue=p(),D=n("li"),de=a(`Add scoping, typing and validation information
(see `),T=n("a"),pe=a("ProjectIt Definition level"),me=a(")."),_e=p(),w=n("li"),ve=a("Fine-tune the result on the "),j=n("a"),ge=a("API level"),Ee=a("."),z=p(),C=n("h2"),Ie=a("The Example"),G=p(),c=n("p"),Pe=a("In this section we will be using the "),H=n("em"),De=a("Insurance"),we=a(" language as example. The gist of the "),F=n("em"),Le=a("Insurance"),xe=a(` language is
that it defines two types of units. One unit holds  set of parts of insurance products for a single theme,
like \u2018Home\u2019, or \u2018Health\u2019. This set is called a `),B=n("code"),ye=a("BaseProduct"),be=a(`. The second contains a complete insurance
product that consists of a number of insurance parts from one or more `),M=n("code"),Ae=a("BaseProducts"),Te=a(`. This is called an
`),U=n("code"),je=a("InsuranceProduct"),Ce=a("."),K=p(),u=n("p"),Oe=a("An "),q=n("code"),ke=a("InsuranceProduct"),$e=a(" has an expression called "),N=n("code"),He=a("calculation"),Fe=a(` that describes the expected cost of this product.
To simplify this expression helpers function may be defined. Each of these is called a `),S=n("code"),Be=a("CalcFunction"),Me=a("."),Q=p(),O=n("p"),Ue=a("The following figure shows a UML class diagram of the concepts in the language."),R=p(),ut(L.$$.fragment),V=p(),_=n("p"),qe=a("We are working on a few other examples. You can find them in the "),W=n("code"),Ne=a("samples"),Se=a(` folder in the
development branch of `),x=n("a"),We=a("ProjectIt"),Ye=a("."),this.h()},l(t){v=i(t,"H1",{});var r=s(v);ae=l(r,"Developing a Language with ProjectIt"),r.forEach(o),Y=m(t),y=i(t,"P",{});var Je=s(y);le=l(Je,"Developing a Language with ProjectIt is usually done taking the following steps."),Je.forEach(o),J=m(t),h=i(t,"OL",{});var g=s(h);I=i(g,"LI",{});var Z=s(I);ne=l(Z,"Develop the "),b=i(Z,"A",{href:!0});var ze=s(b);ie=l(ze,"metamodel"),ze.forEach(o),se=l(Z,"."),Z.forEach(o),re=m(g),P=i(g,"LI",{});var ee=s(P);ce=l(ee,`Add the concrete syntax by adding an
`),A=i(ee,"A",{href:!0});var Ge=s(A);fe=l(Ge,"editor definition"),Ge.forEach(o),he=l(ee,"."),ee.forEach(o),ue=m(g),D=i(g,"LI",{});var te=s(D);de=l(te,`Add scoping, typing and validation information
(see `),T=i(te,"A",{href:!0});var Ke=s(T);pe=l(Ke,"ProjectIt Definition level"),Ke.forEach(o),me=l(te,")."),te.forEach(o),_e=m(g),w=i(g,"LI",{});var oe=s(w);ve=l(oe,"Fine-tune the result on the "),j=i(oe,"A",{href:!0});var Qe=s(j);ge=l(Qe,"API level"),Qe.forEach(o),Ee=l(oe,"."),oe.forEach(o),g.forEach(o),z=m(t),C=i(t,"H2",{});var Re=s(C);Ie=l(Re,"The Example"),Re.forEach(o),G=m(t),c=i(t,"P",{});var d=s(c);Pe=l(d,"In this section we will be using the "),H=i(d,"EM",{});var Ve=s(H);De=l(Ve,"Insurance"),Ve.forEach(o),we=l(d," language as example. The gist of the "),F=i(d,"EM",{});var Xe=s(F);Le=l(Xe,"Insurance"),Xe.forEach(o),xe=l(d,` language is
that it defines two types of units. One unit holds  set of parts of insurance products for a single theme,
like \u2018Home\u2019, or \u2018Health\u2019. This set is called a `),B=i(d,"CODE",{});var Ze=s(B);ye=l(Ze,"BaseProduct"),Ze.forEach(o),be=l(d,`. The second contains a complete insurance
product that consists of a number of insurance parts from one or more `),M=i(d,"CODE",{});var et=s(M);Ae=l(et,"BaseProducts"),et.forEach(o),Te=l(d,`. This is called an
`),U=i(d,"CODE",{});var tt=s(U);je=l(tt,"InsuranceProduct"),tt.forEach(o),Ce=l(d,"."),d.forEach(o),K=m(t),u=i(t,"P",{});var E=s(u);Oe=l(E,"An "),q=i(E,"CODE",{});var ot=s(q);ke=l(ot,"InsuranceProduct"),ot.forEach(o),$e=l(E," has an expression called "),N=i(E,"CODE",{});var at=s(N);He=l(at,"calculation"),at.forEach(o),Fe=l(E,` that describes the expected cost of this product.
To simplify this expression helpers function may be defined. Each of these is called a `),S=i(E,"CODE",{});var lt=s(S);Be=l(lt,"CalcFunction"),lt.forEach(o),Me=l(E,"."),E.forEach(o),Q=m(t),O=i(t,"P",{});var nt=s(O);Ue=l(nt,"The following figure shows a UML class diagram of the concepts in the language."),nt.forEach(o),R=m(t),dt(L.$$.fragment,t),V=m(t),_=i(t,"P",{});var k=s(_);qe=l(k,"We are working on a few other examples. You can find them in the "),W=i(k,"CODE",{});var it=s(W);Ne=l(it,"samples"),it.forEach(o),Se=l(k,` folder in the
development branch of `),x=i(k,"A",{href:!0,target:!0});var st=s(x);We=l(st,"ProjectIt"),st.forEach(o),Ye=l(k,"."),k.forEach(o),this.h()},h(){$(b,"href","/030_Developing_a_Language/010_Default_Level"),$(A,"href","/030_Developing_a_Language/020_Definition_Level/010_Editor_Definition"),$(T,"href","/030_Developing_a_Language/020_Definition_Level"),$(j,"href","/030_Developing_a_Language/030_API_Level"),$(x,"href","https://github.com/projectit-org/ProjectIt"),$(x,"target","_blank")},m(t,r){f(t,v,r),e(v,ae),f(t,Y,r),f(t,y,r),e(y,le),f(t,J,r),f(t,h,r),e(h,I),e(I,ne),e(I,b),e(b,ie),e(I,se),e(h,re),e(h,P),e(P,ce),e(P,A),e(A,fe),e(P,he),e(h,ue),e(h,D),e(D,de),e(D,T),e(T,pe),e(D,me),e(h,_e),e(h,w),e(w,ve),e(w,j),e(j,ge),e(w,Ee),f(t,z,r),f(t,C,r),e(C,Ie),f(t,G,r),f(t,c,r),e(c,Pe),e(c,H),e(H,De),e(c,we),e(c,F),e(F,Le),e(c,xe),e(c,B),e(B,ye),e(c,be),e(c,M),e(M,Ae),e(c,Te),e(c,U),e(U,je),e(c,Ce),f(t,K,r),f(t,u,r),e(u,Oe),e(u,q),e(q,ke),e(u,$e),e(u,N),e(N,He),e(u,Fe),e(u,S),e(S,Be),e(u,Me),f(t,Q,r),f(t,O,r),e(O,Ue),f(t,R,r),pt(L,t,r),f(t,V,r),f(t,_,r),e(_,qe),e(_,W),e(W,Ne),e(_,Se),e(_,x),e(x,We),e(_,Ye),X=!0},p:mt,i(t){X||(_t(L.$$.fragment,t),X=!0)},o(t){vt(L.$$.fragment,t),X=!1},d(t){t&&o(v),t&&o(Y),t&&o(y),t&&o(J),t&&o(h),t&&o(z),t&&o(C),t&&o(G),t&&o(c),t&&o(K),t&&o(u),t&&o(Q),t&&o(O),t&&o(R),gt(L,t),t&&o(V),t&&o(_)}}}class Lt extends ct{constructor(v){super();ft(this,v,null,It,ht,{})}}export{Lt as default};
