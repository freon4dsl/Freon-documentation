import{S as pt,i as ct,s as it,e as p,t as a,k as f,c,a as i,h as n,d as t,m as d,b as tt,g as l,H as s,J as Re}from"../../../chunks/vendor-492729b6.js";function rt(st){let y,ee,U,x,te,q,m,se,J,S,ae,z,w,ne,F,k,oe,le,pe,C,ce,ie,K,h,re,B,ue,fe,N,v,at=`<code class="language-ts"><span class="token keyword">const</span> editorStyle<span class="token operator">:</span> PiEditorStyle <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    global<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        light<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            label<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                color<span class="token operator">:</span> <span class="token string">"black"</span><span class="token punctuation">,</span>
                background<span class="token operator">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        dark<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            label<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                color<span class="token operator">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span>
                background<span class="token operator">:</span> <span class="token string">"black"</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Q,g,de,V,r,be,O,ke,ye,H,he,Ee,j,ve,_e,I,xe,me,L,Se,we,R,ge,Te,W,_,nt=`<code class="language-ts"><span class="token keyword">const</span> editorStyle<span class="token operator">:</span> PiEditorStyle <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    Entity<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        light<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            label<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                color<span class="token operator">:</span> <span class="token string">"blue"</span><span class="token punctuation">,</span>
                background<span class="token operator">:</span> <span class="token string">"white"</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        dark<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            label<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                color<span class="token operator">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span>
                background<span class="token operator">:</span> <span class="token string">"blue"</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,X,b,Pe,A,De,Ce,G,Be,Oe,M,He,je,Y,T,Ie,Z,P,Le;return{c(){y=p("h1"),ee=a("Styling the editor"),U=f(),x=p("p"),te=a("The editor can be styled at various levels:"),q=f(),m=p("h2"),se=a("Default Styles"),J=f(),S=p("p"),ae=a("Each type of box has default styling incorporated."),z=f(),w=p("h2"),ne=a("Styles per Box Type"),F=f(),k=p("p"),oe=a(`Specific styles for each box type (LabelBox, TextBox, SelectBox, etc.) can be defined using the PiEditorStyle object.
An empty object of this type is generated, which can be filled in by the language engineer.`),le=p("br"),pe=a(`
This file can  be found under `),C=p("code"),ce=a("editor/styles"),ie=a(" after generation."),K=f(),h=p("p"),re=a("This is done using the "),B=p("code"),ue=a("global"),fe=a(" property as follows:"),N=f(),v=p("pre"),Q=f(),g=p("p"),de=a("The above defines the color and background of all label boxes in the editor, thus overriding the default values."),V=f(),r=p("p"),be=a(`Using the same approach the style for each type of box can be defined per concept.
If my language includes the concepts `),O=p("code"),ke=a("Entity"),ye=a(`, the following style specifies that all labels belonging
to `),H=p("code"),he=a("Entity"),Ee=a(" are "),j=p("code"),ve=a("blue"),_e=a(" on "),I=p("code"),xe=a("white"),me=a(" or "),L=p("code"),Se=a("white"),we=a(" on "),R=p("code"),ge=a("blue"),Te=a("."),W=f(),_=p("pre"),X=f(),b=p("p"),Pe=a(`Global and concept specific box styles can be combined.
If the `),A=p("code"),De=a("global"),Ce=a(" and the "),G=p("code"),Be=a("Entity"),Oe=a(` styles above are combined, then all labels will be black,
except for the label belonging to `),M=p("code"),He=a("Entity"),je=a("."),Y=f(),T=p("h2"),Ie=a("Style per Box"),Z=f(),P=p("p"),Le=a("TypeScript code level: style parameter."),this.h()},l(e){y=c(e,"H1",{});var o=i(y);ee=n(o,"Styling the editor"),o.forEach(t),U=d(e),x=c(e,"P",{});var Ae=i(x);te=n(Ae,"The editor can be styled at various levels:"),Ae.forEach(t),q=d(e),m=c(e,"H2",{});var Ge=i(m);se=n(Ge,"Default Styles"),Ge.forEach(t),J=d(e),S=c(e,"P",{});var Me=i(S);ae=n(Me,"Each type of box has default styling incorporated."),Me.forEach(t),z=d(e),w=c(e,"H2",{});var Ue=i(w);ne=n(Ue,"Styles per Box Type"),Ue.forEach(t),F=d(e),k=c(e,"P",{});var D=i(k);oe=n(D,`Specific styles for each box type (LabelBox, TextBox, SelectBox, etc.) can be defined using the PiEditorStyle object.
An empty object of this type is generated, which can be filled in by the language engineer.`),le=c(D,"BR",{}),pe=n(D,`
This file can  be found under `),C=c(D,"CODE",{});var qe=i(C);ce=n(qe,"editor/styles"),qe.forEach(t),ie=n(D," after generation."),D.forEach(t),K=d(e),h=c(e,"P",{});var $=i(h);re=n($,"This is done using the "),B=c($,"CODE",{});var Je=i(B);ue=n(Je,"global"),Je.forEach(t),fe=n($," property as follows:"),$.forEach(t),N=d(e),v=c(e,"PRE",{class:!0});var ot=i(v);ot.forEach(t),Q=d(e),g=c(e,"P",{});var ze=i(g);de=n(ze,"The above defines the color and background of all label boxes in the editor, thus overriding the default values."),ze.forEach(t),V=d(e),r=c(e,"P",{});var u=i(r);be=n(u,`Using the same approach the style for each type of box can be defined per concept.
If my language includes the concepts `),O=c(u,"CODE",{});var Fe=i(O);ke=n(Fe,"Entity"),Fe.forEach(t),ye=n(u,`, the following style specifies that all labels belonging
to `),H=c(u,"CODE",{});var Ke=i(H);he=n(Ke,"Entity"),Ke.forEach(t),Ee=n(u," are "),j=c(u,"CODE",{});var Ne=i(j);ve=n(Ne,"blue"),Ne.forEach(t),_e=n(u," on "),I=c(u,"CODE",{});var Qe=i(I);xe=n(Qe,"white"),Qe.forEach(t),me=n(u," or "),L=c(u,"CODE",{});var Ve=i(L);Se=n(Ve,"white"),Ve.forEach(t),we=n(u," on "),R=c(u,"CODE",{});var We=i(R);ge=n(We,"blue"),We.forEach(t),Te=n(u,"."),u.forEach(t),W=d(e),_=c(e,"PRE",{class:!0});var lt=i(_);lt.forEach(t),X=d(e),b=c(e,"P",{});var E=i(b);Pe=n(E,`Global and concept specific box styles can be combined.
If the `),A=c(E,"CODE",{});var Xe=i(A);De=n(Xe,"global"),Xe.forEach(t),Ce=n(E," and the "),G=c(E,"CODE",{});var Ye=i(G);Be=n(Ye,"Entity"),Ye.forEach(t),Oe=n(E,` styles above are combined, then all labels will be black,
except for the label belonging to `),M=c(E,"CODE",{});var Ze=i(M);He=n(Ze,"Entity"),Ze.forEach(t),je=n(E,"."),E.forEach(t),Y=d(e),T=c(e,"H2",{});var $e=i(T);Ie=n($e,"Style per Box"),$e.forEach(t),Z=d(e),P=c(e,"P",{});var et=i(P);Le=n(et,"TypeScript code level: style parameter."),et.forEach(t),this.h()},h(){tt(v,"class","language-ts"),tt(_,"class","language-ts")},m(e,o){l(e,y,o),s(y,ee),l(e,U,o),l(e,x,o),s(x,te),l(e,q,o),l(e,m,o),s(m,se),l(e,J,o),l(e,S,o),s(S,ae),l(e,z,o),l(e,w,o),s(w,ne),l(e,F,o),l(e,k,o),s(k,oe),s(k,le),s(k,pe),s(k,C),s(C,ce),s(k,ie),l(e,K,o),l(e,h,o),s(h,re),s(h,B),s(B,ue),s(h,fe),l(e,N,o),l(e,v,o),v.innerHTML=at,l(e,Q,o),l(e,g,o),s(g,de),l(e,V,o),l(e,r,o),s(r,be),s(r,O),s(O,ke),s(r,ye),s(r,H),s(H,he),s(r,Ee),s(r,j),s(j,ve),s(r,_e),s(r,I),s(I,xe),s(r,me),s(r,L),s(L,Se),s(r,we),s(r,R),s(R,ge),s(r,Te),l(e,W,o),l(e,_,o),_.innerHTML=nt,l(e,X,o),l(e,b,o),s(b,Pe),s(b,A),s(A,De),s(b,Ce),s(b,G),s(G,Be),s(b,Oe),s(b,M),s(M,He),s(b,je),l(e,Y,o),l(e,T,o),s(T,Ie),l(e,Z,o),l(e,P,o),s(P,Le)},p:Re,i:Re,o:Re,d(e){e&&t(y),e&&t(U),e&&t(x),e&&t(q),e&&t(m),e&&t(J),e&&t(S),e&&t(z),e&&t(w),e&&t(F),e&&t(k),e&&t(K),e&&t(h),e&&t(N),e&&t(v),e&&t(Q),e&&t(g),e&&t(V),e&&t(r),e&&t(W),e&&t(_),e&&t(X),e&&t(b),e&&t(Y),e&&t(T),e&&t(Z),e&&t(P)}}}class ft extends pt{constructor(y){super();ct(this,y,null,rt,it,{})}}export{ft as default};
