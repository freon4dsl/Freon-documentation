import{S as hn,i as kn,s as En,e as o,t as a,k as d,c as p,a as r,h as s,d as n,m as h,b as oe,g as l,H as t,J as Ct}from"../../../chunks/vendor-0dc77bd0.js";function vn(an){let P,ye,pe,v,be,x,Pe,Le,we,Oe,re,i,S,De,Ce,H,Me,Re,q,Te,ge,N,Ie,xe,j,Se,He,G,qe,Ne,U,je,Ge,B,Ue,Be,A,Ae,Fe,F,Je,ze,ce,L,sn=`<code class="language-ts"><span class="token comment">// docu-project/defs/language-main.ast#L33-L35</span>

concept InsurancePart <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> identifier<span class="token punctuation">;</span>                       <span class="token comment">// internal name</span>
    isApproved<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">// indication of approval status</span></code>`,le,u,J,Ke,Qe,z,Ve,We,K,Xe,Ye,Q,Ze,$e,V,et,tt,ie,w,on=`<code class="language-ts"><span class="token comment">// docu-project/defs/language-main.ast#L33-L38</span>

concept InsurancePart <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> identifier<span class="token punctuation">;</span>                       <span class="token comment">// internal name</span>
    isApproved<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">// indication of approval status</span>
    statisticalRisk<span class="token operator">:</span> PercentageLiteral<span class="token punctuation">;</span>     <span class="token comment">// the statistical risk known for this event</span>
    maximumPayOut<span class="token operator">:</span> EuroLiteral<span class="token punctuation">;</span>             <span class="token comment">// maximum payout in case the insured event happens</span>
<span class="token punctuation">&#125;</span></code>`,me,k,W,nt,at,X,st,ot,Y,pt,rt,Z,ct,lt,ue,_,it,$,mt,ut,ee,ft,dt,fe,f,ht,te,kt,Et,ne,vt,_t,ae,yt,bt,se,Pt,Lt,de,O,pn=`<code class="language-ts"><span class="token comment">// docu-project/defs/language-main.ast#L42-L48</span>

concept InsuranceProduct <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> identifier<span class="token punctuation">;</span>                       <span class="token comment">// internal name</span>
    productName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>                    <span class="token comment">// name by which this product is known to the public</span>
    themes<span class="token operator">:</span> InsuranceTheme<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment">// the 'kind' of insurance</span>
    advertisedPremium<span class="token operator">:</span> EuroLiteral<span class="token punctuation">;</span>         <span class="token comment">// the premium as known to the public</span>
    nrPremiumDays<span class="token operator">:</span> PremiumDays<span class="token punctuation">;</span>             <span class="token comment">// the number of days for which the advertised premium is calculated</span>
    reference parts<span class="token operator">:</span> InsurancePart<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">// optionally, known parts can be included by reference</span></code>`,he,D,rn=`<code class="language-ts"><span class="token comment">// docu-project/defs/language-main.ast#L33-L34</span>

concept InsurancePart <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> identifier<span class="token punctuation">;</span>                       <span class="token comment">// internal name</span></code>`,ke,M,wt,Ee,R,Ot,ve,T,Dt,_e,C,cn=`<code class="language-ts"><span class="token comment">// docu-project/defs/language-main.ast#L57-L59</span>

concept CalcFunction <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> identifier<span class="token punctuation">;</span>                   <span class="token comment">// the name</span>
    description<span class="token operator">?</span><span class="token operator">:</span> Description<span class="token punctuation">;</span>          <span class="token comment">// an optional description</span></code>`;return{c(){P=o("h1"),ye=a("Defining Concept Properties"),pe=d(),v=o("p"),be=a("Each of the language structure elements (concepts, interfaces, expressions, \u2026) may have "),x=o("strong"),Pe=a("Properties"),Le=a("."),we=o("br"),Oe=a(`
Properties can be lists, this is indicated by square brackets after the type name. There are three types
of properties.`),re=d(),i=o("p"),S=o("strong"),De=a("Simple properties"),Ce=a(" have as type "),H=o("code"),Me=a("identifier"),Re=a(", "),q=o("code"),Te=a("string"),ge=a(", "),N=o("code"),Ie=a("number"),xe=a(", or "),j=o("code"),Se=a("boolean"),He=a(`, and are
always contained in the `),G=o("em"),qe=a("concept"),Ne=a(`. Simple properties may also be lists
of `),U=o("code"),je=a("identifier"),Ge=a(", "),B=o("code"),Ue=a("string"),Be=a(", "),A=o("code"),Ae=a("number"),Fe=a(", or "),F=o("code"),Je=a("boolean"),ze=a("."),ce=d(),L=o("pre"),le=d(),u=o("p"),J=o("strong"),Ke=a("Parts"),Qe=a(" have as type one of the "),z=o("em"),Ve=a("concepts"),We=a(" (including "),K=o("em"),Xe=a("expression concepts"),Ye=a(" and "),Q=o("em"),Ze=a("limited concepts"),$e=a(`)
in the language, and are `),V=o("em"),et=a("contained in the concept"),tt=a(` that holds the property (as in
the UML composition relationship). Note that simple properties are always considered to be parts.`),ie=d(),w=o("pre"),me=d(),k=o("p"),W=o("strong"),nt=a("References"),at=a(" also have as type one of the "),X=o("em"),st=a("concepts"),ot=a(` in the language, but a reference is not contained
in its `),Y=o("em"),pt=a("concept"),rt=a(` (as in the UML association relationship). References are indicated by the keyword
`),Z=o("em"),ct=a("reference"),lt=a(" in front of the definition."),ue=d(),_=o("p"),it=a("References are always by name, therefore the referred concept must have a "),$=o("code"),mt=a("name"),ut=a(" property of type "),ee=o("code"),ft=a("identifier"),dt=a("."),fe=d(),f=o("p"),ht=a("In the following example the concept "),te=o("code"),kt=a("InsuranceProduct"),Et=a(" holds a list of references to "),ne=o("code"),vt=a("InsuranceParts"),_t=a(`. The
concept `),ae=o("code"),yt=a("InsurancePart"),bt=a(" has a property "),se=o("code"),Pt=a("name: identifier"),Lt=a("."),de=d(),O=o("pre"),he=d(),D=o("pre"),ke=d(),M=o("h2"),wt=a("Optional Properties"),Ee=d(),R=o("p"),Ot=a(`Properties may be optional. This is indicated using a question mark after the property name.
Lists are always considered to be optional - there is no need for the question mark there.`),ve=d(),T=o("p"),Dt=a("Because this causes problems in the editor, simple properties may not be optional at the moment."),_e=d(),C=o("pre"),this.h()},l(e){P=p(e,"H1",{});var c=r(P);ye=s(c,"Defining Concept Properties"),c.forEach(n),pe=h(e),v=p(e,"P",{});var g=r(v);be=s(g,"Each of the language structure elements (concepts, interfaces, expressions, \u2026) may have "),x=p(g,"STRONG",{});var Mt=r(x);Pe=s(Mt,"Properties"),Mt.forEach(n),Le=s(g,"."),we=p(g,"BR",{}),Oe=s(g,`
Properties can be lists, this is indicated by square brackets after the type name. There are three types
of properties.`),g.forEach(n),re=h(e),i=p(e,"P",{});var m=r(i);S=p(m,"STRONG",{});var Rt=r(S);De=s(Rt,"Simple properties"),Rt.forEach(n),Ce=s(m," have as type "),H=p(m,"CODE",{});var Tt=r(H);Me=s(Tt,"identifier"),Tt.forEach(n),Re=s(m,", "),q=p(m,"CODE",{});var gt=r(q);Te=s(gt,"string"),gt.forEach(n),ge=s(m,", "),N=p(m,"CODE",{});var It=r(N);Ie=s(It,"number"),It.forEach(n),xe=s(m,", or "),j=p(m,"CODE",{});var xt=r(j);Se=s(xt,"boolean"),xt.forEach(n),He=s(m,`, and are
always contained in the `),G=p(m,"EM",{});var St=r(G);qe=s(St,"concept"),St.forEach(n),Ne=s(m,`. Simple properties may also be lists
of `),U=p(m,"CODE",{});var Ht=r(U);je=s(Ht,"identifier"),Ht.forEach(n),Ge=s(m,", "),B=p(m,"CODE",{});var qt=r(B);Ue=s(qt,"string"),qt.forEach(n),Be=s(m,", "),A=p(m,"CODE",{});var Nt=r(A);Ae=s(Nt,"number"),Nt.forEach(n),Fe=s(m,", or "),F=p(m,"CODE",{});var jt=r(F);Je=s(jt,"boolean"),jt.forEach(n),ze=s(m,"."),m.forEach(n),ce=h(e),L=p(e,"PRE",{class:!0});var ln=r(L);ln.forEach(n),le=h(e),u=p(e,"P",{});var E=r(u);J=p(E,"STRONG",{});var Gt=r(J);Ke=s(Gt,"Parts"),Gt.forEach(n),Qe=s(E," have as type one of the "),z=p(E,"EM",{});var Ut=r(z);Ve=s(Ut,"concepts"),Ut.forEach(n),We=s(E," (including "),K=p(E,"EM",{});var Bt=r(K);Xe=s(Bt,"expression concepts"),Bt.forEach(n),Ye=s(E," and "),Q=p(E,"EM",{});var At=r(Q);Ze=s(At,"limited concepts"),At.forEach(n),$e=s(E,`)
in the language, and are `),V=p(E,"EM",{});var Ft=r(V);et=s(Ft,"contained in the concept"),Ft.forEach(n),tt=s(E,` that holds the property (as in
the UML composition relationship). Note that simple properties are always considered to be parts.`),E.forEach(n),ie=h(e),w=p(e,"PRE",{class:!0});var mn=r(w);mn.forEach(n),me=h(e),k=p(e,"P",{});var b=r(k);W=p(b,"STRONG",{});var Jt=r(W);nt=s(Jt,"References"),Jt.forEach(n),at=s(b," also have as type one of the "),X=p(b,"EM",{});var zt=r(X);st=s(zt,"concepts"),zt.forEach(n),ot=s(b,` in the language, but a reference is not contained
in its `),Y=p(b,"EM",{});var Kt=r(Y);pt=s(Kt,"concept"),Kt.forEach(n),rt=s(b,` (as in the UML association relationship). References are indicated by the keyword
`),Z=p(b,"EM",{});var Qt=r(Z);ct=s(Qt,"reference"),Qt.forEach(n),lt=s(b," in front of the definition."),b.forEach(n),ue=h(e),_=p(e,"P",{});var I=r(_);it=s(I,"References are always by name, therefore the referred concept must have a "),$=p(I,"CODE",{});var Vt=r($);mt=s(Vt,"name"),Vt.forEach(n),ut=s(I," property of type "),ee=p(I,"CODE",{});var Wt=r(ee);ft=s(Wt,"identifier"),Wt.forEach(n),dt=s(I,"."),I.forEach(n),fe=h(e),f=p(e,"P",{});var y=r(f);ht=s(y,"In the following example the concept "),te=p(y,"CODE",{});var Xt=r(te);kt=s(Xt,"InsuranceProduct"),Xt.forEach(n),Et=s(y," holds a list of references to "),ne=p(y,"CODE",{});var Yt=r(ne);vt=s(Yt,"InsuranceParts"),Yt.forEach(n),_t=s(y,`. The
concept `),ae=p(y,"CODE",{});var Zt=r(ae);yt=s(Zt,"InsurancePart"),Zt.forEach(n),bt=s(y," has a property "),se=p(y,"CODE",{});var $t=r(se);Pt=s($t,"name: identifier"),$t.forEach(n),Lt=s(y,"."),y.forEach(n),de=h(e),O=p(e,"PRE",{class:!0});var un=r(O);un.forEach(n),he=h(e),D=p(e,"PRE",{class:!0});var fn=r(D);fn.forEach(n),ke=h(e),M=p(e,"H2",{});var en=r(M);wt=s(en,"Optional Properties"),en.forEach(n),Ee=h(e),R=p(e,"P",{});var tn=r(R);Ot=s(tn,`Properties may be optional. This is indicated using a question mark after the property name.
Lists are always considered to be optional - there is no need for the question mark there.`),tn.forEach(n),ve=h(e),T=p(e,"P",{});var nn=r(T);Dt=s(nn,"Because this causes problems in the editor, simple properties may not be optional at the moment."),nn.forEach(n),_e=h(e),C=p(e,"PRE",{class:!0});var dn=r(C);dn.forEach(n),this.h()},h(){oe(L,"class","language-ts"),oe(w,"class","language-ts"),oe(O,"class","language-ts"),oe(D,"class","language-ts"),oe(C,"class","language-ts")},m(e,c){l(e,P,c),t(P,ye),l(e,pe,c),l(e,v,c),t(v,be),t(v,x),t(x,Pe),t(v,Le),t(v,we),t(v,Oe),l(e,re,c),l(e,i,c),t(i,S),t(S,De),t(i,Ce),t(i,H),t(H,Me),t(i,Re),t(i,q),t(q,Te),t(i,ge),t(i,N),t(N,Ie),t(i,xe),t(i,j),t(j,Se),t(i,He),t(i,G),t(G,qe),t(i,Ne),t(i,U),t(U,je),t(i,Ge),t(i,B),t(B,Ue),t(i,Be),t(i,A),t(A,Ae),t(i,Fe),t(i,F),t(F,Je),t(i,ze),l(e,ce,c),l(e,L,c),L.innerHTML=sn,l(e,le,c),l(e,u,c),t(u,J),t(J,Ke),t(u,Qe),t(u,z),t(z,Ve),t(u,We),t(u,K),t(K,Xe),t(u,Ye),t(u,Q),t(Q,Ze),t(u,$e),t(u,V),t(V,et),t(u,tt),l(e,ie,c),l(e,w,c),w.innerHTML=on,l(e,me,c),l(e,k,c),t(k,W),t(W,nt),t(k,at),t(k,X),t(X,st),t(k,ot),t(k,Y),t(Y,pt),t(k,rt),t(k,Z),t(Z,ct),t(k,lt),l(e,ue,c),l(e,_,c),t(_,it),t(_,$),t($,mt),t(_,ut),t(_,ee),t(ee,ft),t(_,dt),l(e,fe,c),l(e,f,c),t(f,ht),t(f,te),t(te,kt),t(f,Et),t(f,ne),t(ne,vt),t(f,_t),t(f,ae),t(ae,yt),t(f,bt),t(f,se),t(se,Pt),t(f,Lt),l(e,de,c),l(e,O,c),O.innerHTML=pn,l(e,he,c),l(e,D,c),D.innerHTML=rn,l(e,ke,c),l(e,M,c),t(M,wt),l(e,Ee,c),l(e,R,c),t(R,Ot),l(e,ve,c),l(e,T,c),t(T,Dt),l(e,_e,c),l(e,C,c),C.innerHTML=cn},p:Ct,i:Ct,o:Ct,d(e){e&&n(P),e&&n(pe),e&&n(v),e&&n(re),e&&n(i),e&&n(ce),e&&n(L),e&&n(le),e&&n(u),e&&n(ie),e&&n(w),e&&n(me),e&&n(k),e&&n(ue),e&&n(_),e&&n(fe),e&&n(f),e&&n(de),e&&n(O),e&&n(he),e&&n(D),e&&n(ke),e&&n(M),e&&n(Ee),e&&n(R),e&&n(ve),e&&n(T),e&&n(_e),e&&n(C)}}}class yn extends hn{constructor(P){super();kn(this,P,null,vn,En,{})}}export{yn as default};
