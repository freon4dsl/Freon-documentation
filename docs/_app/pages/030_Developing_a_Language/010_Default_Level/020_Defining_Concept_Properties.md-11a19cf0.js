import{S as da,i as ha,s as ka,e as o,t as n,k as d,c as p,a as r,h as s,d as a,m as h,b as oe,g as l,H as t,J as Ct}from"../../../chunks/vendor-0dc77bd0.js";function Ea(na){let P,ye,pe,v,be,x,Pe,Le,we,Oe,re,i,S,De,Ce,H,Me,Re,q,Te,ge,N,Ie,xe,j,Se,He,G,qe,Ne,U,je,Ge,B,Ue,Be,A,Ae,Fe,F,Je,ze,ce,L,sa=`<code class="language-ts"><span class="token comment">// docu-project/defs/language-main.ast#L33-L35</span>

concept InsurancePart <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> identifier<span class="token punctuation">;</span>                       <span class="token comment">// internal name</span>
    isApproved<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">// indication of approval status</span></code>`,le,u,J,Ke,Qe,z,Ve,We,K,Xe,Ye,Q,Ze,$e,V,et,tt,ie,w,oa=`<code class="language-ts"><span class="token comment">// docu-project/defs/language-main.ast#L33-L38</span>

concept InsurancePart <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> identifier<span class="token punctuation">;</span>                       <span class="token comment">// internal name</span>
    isApproved<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">// indication of approval status</span>
    statisticalRisk<span class="token operator">:</span> PercentageLiteral<span class="token punctuation">;</span>     <span class="token comment">// the statistical risk known for this event</span>
    maximumPayOut<span class="token operator">:</span> EuroLiteral<span class="token punctuation">;</span>             <span class="token comment">// maximum payout in case the insured event happens</span>
<span class="token punctuation">&#125;</span></code>`,me,k,W,at,nt,X,st,ot,Y,pt,rt,Z,ct,lt,ue,_,it,$,mt,ut,ee,ft,dt,fe,f,ht,te,kt,Et,ae,vt,_t,ne,yt,bt,se,Pt,Lt,de,O,pa=`<code class="language-ts"><span class="token comment">// docu-project/defs/language-main.ast#L42-L48</span>

concept InsuranceProduct <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> identifier<span class="token punctuation">;</span>                       <span class="token comment">// internal name</span>
    productName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>                    <span class="token comment">// name by which this product is known to the public</span>
    themes<span class="token operator">:</span> InsuranceTheme<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment">// the 'kind' of insurance</span>
    advertisedPremium<span class="token operator">:</span> EuroLiteral<span class="token punctuation">;</span>         <span class="token comment">// the premium as known to the public</span>
    nrPremiumDays<span class="token operator">:</span> PremiumDays<span class="token punctuation">;</span>             <span class="token comment">// the number of days for which the advertised premium is calculated</span>
    reference parts<span class="token operator">:</span> InsurancePart<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">// optionally, known parts can be included by reference</span></code>`,he,D,ra=`<code class="language-ts"><span class="token comment">// docu-project/defs/language-main.ast#L33-L34</span>

concept InsurancePart <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> identifier<span class="token punctuation">;</span>                       <span class="token comment">// internal name</span></code>`,ke,M,wt,Ee,R,Ot,ve,T,Dt,_e,C,ca=`<code class="language-ts"><span class="token comment">// docu-project/defs/language-main.ast#L57-L59</span>

concept CalcFunction <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> identifier<span class="token punctuation">;</span>                   <span class="token comment">// the name</span>
    description<span class="token operator">?</span><span class="token operator">:</span> Description<span class="token punctuation">;</span>          <span class="token comment">// an optional description</span></code>`;return{c(){P=o("h1"),ye=n("Defining Concept Properties"),pe=d(),v=o("p"),be=n("Each of the language structure elements (concepts, interfaces, expressions, \u2026) may have "),x=o("strong"),Pe=n("Properties"),Le=n("."),we=o("br"),Oe=n(`
Properties can be lists, this is indicated by square brackets after the type name. There are three types
of properties.`),re=d(),i=o("p"),S=o("strong"),De=n("Simple properties"),Ce=n(" have as type "),H=o("code"),Me=n("identifier"),Re=n(", "),q=o("code"),Te=n("string"),ge=n(", "),N=o("code"),Ie=n("number"),xe=n(", or "),j=o("code"),Se=n("boolean"),He=n(`, and are
always contained in the `),G=o("em"),qe=n("concept"),Ne=n(`. Simple properties may also be lists
of `),U=o("code"),je=n("identifier"),Ge=n(", "),B=o("code"),Ue=n("string"),Be=n(", "),A=o("code"),Ae=n("number"),Fe=n(", or "),F=o("code"),Je=n("boolean"),ze=n("."),ce=d(),L=o("pre"),le=d(),u=o("p"),J=o("strong"),Ke=n("Parts"),Qe=n(" have as type one of the "),z=o("em"),Ve=n("concepts"),We=n(" (including "),K=o("em"),Xe=n("expression concepts"),Ye=n(" and "),Q=o("em"),Ze=n("limited concepts"),$e=n(`)
in the language, and are `),V=o("em"),et=n("contained in the concept"),tt=n(` that holds the property (as in
the UML composition relationship). Note that simple properties are always considered to be parts.`),ie=d(),w=o("pre"),me=d(),k=o("p"),W=o("strong"),at=n("References"),nt=n(" also have as type one of the "),X=o("em"),st=n("concepts"),ot=n(` in the language, but a reference is not contained
in its `),Y=o("em"),pt=n("concept"),rt=n(` (as in the UML association relationship). References are indicated by the keyword
`),Z=o("em"),ct=n("reference"),lt=n(" in front of the definition."),ue=d(),_=o("p"),it=n("References are always by name, therefore the referred concept must have a "),$=o("code"),mt=n("name"),ut=n(" property of type "),ee=o("code"),ft=n("identifier"),dt=n("."),fe=d(),f=o("p"),ht=n("In the following example the concept "),te=o("code"),kt=n("InsuranceProduct"),Et=n(" holds a list of references to "),ae=o("code"),vt=n("InsuranceParts"),_t=n(`. The
concept `),ne=o("code"),yt=n("InsurancePart"),bt=n(" has a property "),se=o("code"),Pt=n("name: identifier"),Lt=n("."),de=d(),O=o("pre"),he=d(),D=o("pre"),ke=d(),M=o("h2"),wt=n("Optional Properties"),Ee=d(),R=o("p"),Ot=n(`Properties may be optional. This is indicated using a question mark after the property name.
Lists are always considered to be optional, there is no need for the question mark there.`),ve=d(),T=o("p"),Dt=n("Because this causes problem is the editor, simple properties may not be optional at the moment."),_e=d(),C=o("pre"),this.h()},l(e){P=p(e,"H1",{});var c=r(P);ye=s(c,"Defining Concept Properties"),c.forEach(a),pe=h(e),v=p(e,"P",{});var g=r(v);be=s(g,"Each of the language structure elements (concepts, interfaces, expressions, \u2026) may have "),x=p(g,"STRONG",{});var Mt=r(x);Pe=s(Mt,"Properties"),Mt.forEach(a),Le=s(g,"."),we=p(g,"BR",{}),Oe=s(g,`
Properties can be lists, this is indicated by square brackets after the type name. There are three types
of properties.`),g.forEach(a),re=h(e),i=p(e,"P",{});var m=r(i);S=p(m,"STRONG",{});var Rt=r(S);De=s(Rt,"Simple properties"),Rt.forEach(a),Ce=s(m," have as type "),H=p(m,"CODE",{});var Tt=r(H);Me=s(Tt,"identifier"),Tt.forEach(a),Re=s(m,", "),q=p(m,"CODE",{});var gt=r(q);Te=s(gt,"string"),gt.forEach(a),ge=s(m,", "),N=p(m,"CODE",{});var It=r(N);Ie=s(It,"number"),It.forEach(a),xe=s(m,", or "),j=p(m,"CODE",{});var xt=r(j);Se=s(xt,"boolean"),xt.forEach(a),He=s(m,`, and are
always contained in the `),G=p(m,"EM",{});var St=r(G);qe=s(St,"concept"),St.forEach(a),Ne=s(m,`. Simple properties may also be lists
of `),U=p(m,"CODE",{});var Ht=r(U);je=s(Ht,"identifier"),Ht.forEach(a),Ge=s(m,", "),B=p(m,"CODE",{});var qt=r(B);Ue=s(qt,"string"),qt.forEach(a),Be=s(m,", "),A=p(m,"CODE",{});var Nt=r(A);Ae=s(Nt,"number"),Nt.forEach(a),Fe=s(m,", or "),F=p(m,"CODE",{});var jt=r(F);Je=s(jt,"boolean"),jt.forEach(a),ze=s(m,"."),m.forEach(a),ce=h(e),L=p(e,"PRE",{class:!0});var la=r(L);la.forEach(a),le=h(e),u=p(e,"P",{});var E=r(u);J=p(E,"STRONG",{});var Gt=r(J);Ke=s(Gt,"Parts"),Gt.forEach(a),Qe=s(E," have as type one of the "),z=p(E,"EM",{});var Ut=r(z);Ve=s(Ut,"concepts"),Ut.forEach(a),We=s(E," (including "),K=p(E,"EM",{});var Bt=r(K);Xe=s(Bt,"expression concepts"),Bt.forEach(a),Ye=s(E," and "),Q=p(E,"EM",{});var At=r(Q);Ze=s(At,"limited concepts"),At.forEach(a),$e=s(E,`)
in the language, and are `),V=p(E,"EM",{});var Ft=r(V);et=s(Ft,"contained in the concept"),Ft.forEach(a),tt=s(E,` that holds the property (as in
the UML composition relationship). Note that simple properties are always considered to be parts.`),E.forEach(a),ie=h(e),w=p(e,"PRE",{class:!0});var ia=r(w);ia.forEach(a),me=h(e),k=p(e,"P",{});var b=r(k);W=p(b,"STRONG",{});var Jt=r(W);at=s(Jt,"References"),Jt.forEach(a),nt=s(b," also have as type one of the "),X=p(b,"EM",{});var zt=r(X);st=s(zt,"concepts"),zt.forEach(a),ot=s(b,` in the language, but a reference is not contained
in its `),Y=p(b,"EM",{});var Kt=r(Y);pt=s(Kt,"concept"),Kt.forEach(a),rt=s(b,` (as in the UML association relationship). References are indicated by the keyword
`),Z=p(b,"EM",{});var Qt=r(Z);ct=s(Qt,"reference"),Qt.forEach(a),lt=s(b," in front of the definition."),b.forEach(a),ue=h(e),_=p(e,"P",{});var I=r(_);it=s(I,"References are always by name, therefore the referred concept must have a "),$=p(I,"CODE",{});var Vt=r($);mt=s(Vt,"name"),Vt.forEach(a),ut=s(I," property of type "),ee=p(I,"CODE",{});var Wt=r(ee);ft=s(Wt,"identifier"),Wt.forEach(a),dt=s(I,"."),I.forEach(a),fe=h(e),f=p(e,"P",{});var y=r(f);ht=s(y,"In the following example the concept "),te=p(y,"CODE",{});var Xt=r(te);kt=s(Xt,"InsuranceProduct"),Xt.forEach(a),Et=s(y," holds a list of references to "),ae=p(y,"CODE",{});var Yt=r(ae);vt=s(Yt,"InsuranceParts"),Yt.forEach(a),_t=s(y,`. The
concept `),ne=p(y,"CODE",{});var Zt=r(ne);yt=s(Zt,"InsurancePart"),Zt.forEach(a),bt=s(y," has a property "),se=p(y,"CODE",{});var $t=r(se);Pt=s($t,"name: identifier"),$t.forEach(a),Lt=s(y,"."),y.forEach(a),de=h(e),O=p(e,"PRE",{class:!0});var ma=r(O);ma.forEach(a),he=h(e),D=p(e,"PRE",{class:!0});var ua=r(D);ua.forEach(a),ke=h(e),M=p(e,"H2",{});var ea=r(M);wt=s(ea,"Optional Properties"),ea.forEach(a),Ee=h(e),R=p(e,"P",{});var ta=r(R);Ot=s(ta,`Properties may be optional. This is indicated using a question mark after the property name.
Lists are always considered to be optional, there is no need for the question mark there.`),ta.forEach(a),ve=h(e),T=p(e,"P",{});var aa=r(T);Dt=s(aa,"Because this causes problem is the editor, simple properties may not be optional at the moment."),aa.forEach(a),_e=h(e),C=p(e,"PRE",{class:!0});var fa=r(C);fa.forEach(a),this.h()},h(){oe(L,"class","language-ts"),oe(w,"class","language-ts"),oe(O,"class","language-ts"),oe(D,"class","language-ts"),oe(C,"class","language-ts")},m(e,c){l(e,P,c),t(P,ye),l(e,pe,c),l(e,v,c),t(v,be),t(v,x),t(x,Pe),t(v,Le),t(v,we),t(v,Oe),l(e,re,c),l(e,i,c),t(i,S),t(S,De),t(i,Ce),t(i,H),t(H,Me),t(i,Re),t(i,q),t(q,Te),t(i,ge),t(i,N),t(N,Ie),t(i,xe),t(i,j),t(j,Se),t(i,He),t(i,G),t(G,qe),t(i,Ne),t(i,U),t(U,je),t(i,Ge),t(i,B),t(B,Ue),t(i,Be),t(i,A),t(A,Ae),t(i,Fe),t(i,F),t(F,Je),t(i,ze),l(e,ce,c),l(e,L,c),L.innerHTML=sa,l(e,le,c),l(e,u,c),t(u,J),t(J,Ke),t(u,Qe),t(u,z),t(z,Ve),t(u,We),t(u,K),t(K,Xe),t(u,Ye),t(u,Q),t(Q,Ze),t(u,$e),t(u,V),t(V,et),t(u,tt),l(e,ie,c),l(e,w,c),w.innerHTML=oa,l(e,me,c),l(e,k,c),t(k,W),t(W,at),t(k,nt),t(k,X),t(X,st),t(k,ot),t(k,Y),t(Y,pt),t(k,rt),t(k,Z),t(Z,ct),t(k,lt),l(e,ue,c),l(e,_,c),t(_,it),t(_,$),t($,mt),t(_,ut),t(_,ee),t(ee,ft),t(_,dt),l(e,fe,c),l(e,f,c),t(f,ht),t(f,te),t(te,kt),t(f,Et),t(f,ae),t(ae,vt),t(f,_t),t(f,ne),t(ne,yt),t(f,bt),t(f,se),t(se,Pt),t(f,Lt),l(e,de,c),l(e,O,c),O.innerHTML=pa,l(e,he,c),l(e,D,c),D.innerHTML=ra,l(e,ke,c),l(e,M,c),t(M,wt),l(e,Ee,c),l(e,R,c),t(R,Ot),l(e,ve,c),l(e,T,c),t(T,Dt),l(e,_e,c),l(e,C,c),C.innerHTML=ca},p:Ct,i:Ct,o:Ct,d(e){e&&a(P),e&&a(pe),e&&a(v),e&&a(re),e&&a(i),e&&a(ce),e&&a(L),e&&a(le),e&&a(u),e&&a(ie),e&&a(w),e&&a(me),e&&a(k),e&&a(ue),e&&a(_),e&&a(fe),e&&a(f),e&&a(de),e&&a(O),e&&a(he),e&&a(D),e&&a(ke),e&&a(M),e&&a(Ee),e&&a(R),e&&a(ve),e&&a(T),e&&a(_e),e&&a(C)}}}class _a extends da{constructor(P){super();ha(this,P,null,Ea,ka,{})}}export{_a as default};
