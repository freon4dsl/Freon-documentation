import{S as us,i as cs,s as fs,e as i,t as a,k as u,c as p,a as r,h as l,d as t,m as c,b as F,g as o,H as s,J as Ct}from"../../../../chunks/vendor-0dc77bd0.js";/* empty css                                                            */function ds(gt){let k,He,ae,H,Ie,le,I,Ge,oe,h,Ne,j,Se,Ve,A,De,Oe,ie,f,Me,W,xe,Fe,$,je,Ae,J,We,$e,U,Je,Ue,pe,w,es=`<code class="language-ts"><span class="token comment">// docu-project/defs/validator-docu.valid#L27-L32</span>

<span class="token punctuation">&#125;</span>
CalcFunction <span class="token punctuation">&#123;</span>
    <span class="token comment">// typecheck conformsTo (self.body, self.declaredType);</span>
    isunique name <span class="token keyword">in</span> self<span class="token punctuation">.</span>parameters<span class="token punctuation">;</span>
    validIdentifier
    <span class="token punctuation">&#123;</span></code>`,re,G,ze,ue,N,Be,ce,L,ts=`<code class="language-ts"><span class="token comment">// docu-project/defs/validator-extras.valid#L3-L6</span>

EntityAttribute <span class="token punctuation">&#123;</span>
    self<span class="token punctuation">.</span>numVal <span class="token operator">>=</span> <span class="token number">12</span><span class="token punctuation">;</span>       <span class="token comment">// in .ast file: "numVal: number;"</span>
    self<span class="token punctuation">.</span>numVal <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,fe,S,Ke,de,E,Qe,z,Xe,Ye,me,_,Ze,B,ge,et,he,R,ss=`<code class="language-ts"><span class="token comment">// docu-project/defs/validator-docu.valid#L3-L7</span>

InsuranceProduct <span class="token punctuation">&#123;</span>
    notEmpty self<span class="token punctuation">.</span>parts<span class="token punctuation">;</span>
    isunique name <span class="token keyword">in</span> self<span class="token punctuation">.</span>parts<span class="token punctuation">;</span>
    isunique name <span class="token keyword">in</span> self<span class="token punctuation">.</span>helpers<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ve,V,tt,ye,d,st,K,nt,at,Q,lt,ot,X,it,pt,Y,rt,ut,ke,D,ct,Ee,C,ns=`<code class="language-ts"><span class="token comment">// docu-project/defs/validator-docu.valid#L10-L12</span>

MinusExpression  <span class="token punctuation">&#123;</span>
    typecheck <span class="token function">equalsType</span><span class="token punctuation">(</span> self<span class="token punctuation">.</span>left<span class="token punctuation">,</span> self<span class="token punctuation">.</span>right <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,_e,O,ft,Te,T,dt,Z,mt,ht,be,P,as=`<code class="language-ts"><span class="token comment">// docu-project/defs/validator-docu.valid#L28-L36</span>

CalcFunction <span class="token punctuation">&#123;</span>
    <span class="token comment">// typecheck conformsTo (self.body, self.declaredType);</span>
    isunique name <span class="token keyword">in</span> self<span class="token punctuation">.</span>parameters<span class="token punctuation">;</span>
    validIdentifier
    <span class="token punctuation">&#123;</span>
        message<span class="token operator">:</span> <span class="token string">"El nombre '$&#123;self.name&#125;' no es un identificador correcto."</span><span class="token punctuation">,</span>
        severity<span class="token operator">:</span> error
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,we,q,g,vt,Le,M,yt,Re,m,ee,kt,Et,te,_t,Tt,se,bt,wt,ne,Lt;return{c(){k=i("h1"),He=a("The Validator Definition File"),ae=u(),H=i("p"),Ie=a(`The validator definition defines the constraints or rules that should be true in the models build by your users.
Currently, there are four types of rules.`),le=u(),I=i("h2"),Ge=a("Valid Identifier Rules"),oe=u(),h=i("p"),Ne=a("Given a simple property of type "),j=i("em"),Se=a("identifier"),Ve=a(", a "),A=i("strong"),De=a("valid-identifier-rule"),Oe=a(` can be given. The property complies with the
rule if it is a valid identifier according to the TypeScript definition.`),ie=u(),f=i("p"),Me=a("For a "),W=i("em"),xe=a("valid-identifier-rule"),Fe=a(" the "),$=i("code"),je=a("validIdentifier"),Ae=a(` keyword is used followed by an optional simple property. When the
property is present, this property is checked. When the property is not present, Freon assumes that the
concept has a simple property named \u2018`),J=i("code"),We=a("name"),$e=a("\u2019 of type \u2018"),U=i("code"),Je=a("identifier"),Ue=a("\u2019, and it will check this property."),pe=u(),w=i("pre"),re=u(),G=i("h2"),ze=a("Simple Value Rules"),ue=u(),N=i("p"),Be=a("Given a simple property, its value can be limited to certain values."),ce=u(),L=i("pre"),fe=u(),S=i("h2"),Ke=a("List Rules"),de=u(),E=i("p"),Qe=a("Given a list property, a "),z=i("strong"),Xe=a("not-empty rule"),Ye=a(" can be stated. The list complies with the rule if it is not empty."),me=u(),_=i("p"),Ze=a("An "),B=i("strong"),ge=a("is-unique rule"),et=a(` is another rule that can be stated for a list property. The list
complies when the value of the property is unique within the list.`),he=u(),R=i("pre"),ve=u(),V=i("h2"),tt=a("Type Check Rules"),ye=u(),d=i("p"),st=a(`Given the rules in the typer definition, rules can be stated to ensure type compliance.
To indicate a `),K=i("strong"),nt=a("type checking rule"),at=a(" the keyword "),Q=i("code"),lt=a("typecheck"),ot=a(" is used, followed by either "),X=i("code"),it=a("equalsType"),pt=a(" or "),Y=i("code"),rt=a("conformsTo"),ut=a(`.
The first demands that the types of the two properties given are equal. The second demands that the type of the first
conforms to the type of the second.`),ke=u(),D=i("p"),ct=a("In type checking rules it is possible to use predefined instances of a limited concept."),Ee=u(),C=i("pre"),_e=u(),O=i("h2"),ft=a("Custom Messages"),Te=u(),T=i("p"),dt=a(`The generated error messages can be changed into custom ones. Similar to the editor definition,
properties can be used in the error message using the syntax `),Z=i("code"),mt=a("${propName}"),ht=a("."),be=u(),P=i("pre"),we=u(),q=i("h1"),g=i("a"),vt=a("The Default Validation Rules"),Le=u(),M=i("p"),yt=a("There are just a few default validation rules:"),Re=u(),m=i("ul"),ee=i("li"),kt=a("Non-optional properties must be set."),Et=u(),te=i("li"),_t=a("Non-optional lists must include one element."),Tt=u(),se=i("li"),bt=a("Names of model units should be valid identifiers."),wt=u(),ne=i("li"),Lt=a("Any reference must be present."),this.h()},l(e){k=p(e,"H1",{});var n=r(k);He=l(n,"The Validator Definition File"),n.forEach(t),ae=c(e),H=p(e,"P",{});var Pt=r(H);Ie=l(Pt,`The validator definition defines the constraints or rules that should be true in the models build by your users.
Currently, there are four types of rules.`),Pt.forEach(t),le=c(e),I=p(e,"H2",{});var qt=r(I);Ge=l(qt,"Valid Identifier Rules"),qt.forEach(t),oe=c(e),h=p(e,"P",{});var x=r(h);Ne=l(x,"Given a simple property of type "),j=p(x,"EM",{});var Ht=r(j);Se=l(Ht,"identifier"),Ht.forEach(t),Ve=l(x,", a "),A=p(x,"STRONG",{});var It=r(A);De=l(It,"valid-identifier-rule"),It.forEach(t),Oe=l(x,` can be given. The property complies with the
rule if it is a valid identifier according to the TypeScript definition.`),x.forEach(t),ie=c(e),f=p(e,"P",{});var v=r(f);Me=l(v,"For a "),W=p(v,"EM",{});var Gt=r(W);xe=l(Gt,"valid-identifier-rule"),Gt.forEach(t),Fe=l(v," the "),$=p(v,"CODE",{});var Nt=r($);je=l(Nt,"validIdentifier"),Nt.forEach(t),Ae=l(v,` keyword is used followed by an optional simple property. When the
property is present, this property is checked. When the property is not present, Freon assumes that the
concept has a simple property named \u2018`),J=p(v,"CODE",{});var St=r(J);We=l(St,"name"),St.forEach(t),$e=l(v,"\u2019 of type \u2018"),U=p(v,"CODE",{});var Vt=r(U);Je=l(Vt,"identifier"),Vt.forEach(t),Ue=l(v,"\u2019, and it will check this property."),v.forEach(t),pe=c(e),w=p(e,"PRE",{class:!0});var ls=r(w);ls.forEach(t),re=c(e),G=p(e,"H2",{});var Dt=r(G);ze=l(Dt,"Simple Value Rules"),Dt.forEach(t),ue=c(e),N=p(e,"P",{});var Ot=r(N);Be=l(Ot,"Given a simple property, its value can be limited to certain values."),Ot.forEach(t),ce=c(e),L=p(e,"PRE",{class:!0});var os=r(L);os.forEach(t),fe=c(e),S=p(e,"H2",{});var Mt=r(S);Ke=l(Mt,"List Rules"),Mt.forEach(t),de=c(e),E=p(e,"P",{});var Ce=r(E);Qe=l(Ce,"Given a list property, a "),z=p(Ce,"STRONG",{});var xt=r(z);Xe=l(xt,"not-empty rule"),xt.forEach(t),Ye=l(Ce," can be stated. The list complies with the rule if it is not empty."),Ce.forEach(t),me=c(e),_=p(e,"P",{});var Pe=r(_);Ze=l(Pe,"An "),B=p(Pe,"STRONG",{});var Ft=r(B);ge=l(Ft,"is-unique rule"),Ft.forEach(t),et=l(Pe,` is another rule that can be stated for a list property. The list
complies when the value of the property is unique within the list.`),Pe.forEach(t),he=c(e),R=p(e,"PRE",{class:!0});var is=r(R);is.forEach(t),ve=c(e),V=p(e,"H2",{});var jt=r(V);tt=l(jt,"Type Check Rules"),jt.forEach(t),ye=c(e),d=p(e,"P",{});var y=r(d);st=l(y,`Given the rules in the typer definition, rules can be stated to ensure type compliance.
To indicate a `),K=p(y,"STRONG",{});var At=r(K);nt=l(At,"type checking rule"),At.forEach(t),at=l(y," the keyword "),Q=p(y,"CODE",{});var Wt=r(Q);lt=l(Wt,"typecheck"),Wt.forEach(t),ot=l(y," is used, followed by either "),X=p(y,"CODE",{});var $t=r(X);it=l($t,"equalsType"),$t.forEach(t),pt=l(y," or "),Y=p(y,"CODE",{});var Jt=r(Y);rt=l(Jt,"conformsTo"),Jt.forEach(t),ut=l(y,`.
The first demands that the types of the two properties given are equal. The second demands that the type of the first
conforms to the type of the second.`),y.forEach(t),ke=c(e),D=p(e,"P",{});var Ut=r(D);ct=l(Ut,"In type checking rules it is possible to use predefined instances of a limited concept."),Ut.forEach(t),Ee=c(e),C=p(e,"PRE",{class:!0});var ps=r(C);ps.forEach(t),_e=c(e),O=p(e,"H2",{});var zt=r(O);ft=l(zt,"Custom Messages"),zt.forEach(t),Te=c(e),T=p(e,"P",{});var qe=r(T);dt=l(qe,`The generated error messages can be changed into custom ones. Similar to the editor definition,
properties can be used in the error message using the syntax `),Z=p(qe,"CODE",{});var Bt=r(Z);mt=l(Bt,"${propName}"),Bt.forEach(t),ht=l(qe,"."),qe.forEach(t),be=c(e),P=p(e,"PRE",{class:!0});var rs=r(P);rs.forEach(t),we=c(e),q=p(e,"H1",{});var Rt=r(q);g=p(Rt,"A",{name:!0}),r(g).forEach(t),vt=l(Rt,"The Default Validation Rules"),Rt.forEach(t),Le=c(e),M=p(e,"P",{});var Kt=r(M);yt=l(Kt,"There are just a few default validation rules:"),Kt.forEach(t),Re=c(e),m=p(e,"UL",{});var b=r(m);ee=p(b,"LI",{});var Qt=r(ee);kt=l(Qt,"Non-optional properties must be set."),Qt.forEach(t),Et=c(b),te=p(b,"LI",{});var Xt=r(te);_t=l(Xt,"Non-optional lists must include one element."),Xt.forEach(t),Tt=c(b),se=p(b,"LI",{});var Yt=r(se);bt=l(Yt,"Names of model units should be valid identifiers."),Yt.forEach(t),wt=c(b),ne=p(b,"LI",{});var Zt=r(ne);Lt=l(Zt,"Any reference must be present."),Zt.forEach(t),b.forEach(t),this.h()},h(){F(w,"class","language-ts"),F(L,"class","language-ts"),F(R,"class","language-ts"),F(C,"class","language-ts"),F(P,"class","language-ts"),F(g,"name","default-validation-rules")},m(e,n){o(e,k,n),s(k,He),o(e,ae,n),o(e,H,n),s(H,Ie),o(e,le,n),o(e,I,n),s(I,Ge),o(e,oe,n),o(e,h,n),s(h,Ne),s(h,j),s(j,Se),s(h,Ve),s(h,A),s(A,De),s(h,Oe),o(e,ie,n),o(e,f,n),s(f,Me),s(f,W),s(W,xe),s(f,Fe),s(f,$),s($,je),s(f,Ae),s(f,J),s(J,We),s(f,$e),s(f,U),s(U,Je),s(f,Ue),o(e,pe,n),o(e,w,n),w.innerHTML=es,o(e,re,n),o(e,G,n),s(G,ze),o(e,ue,n),o(e,N,n),s(N,Be),o(e,ce,n),o(e,L,n),L.innerHTML=ts,o(e,fe,n),o(e,S,n),s(S,Ke),o(e,de,n),o(e,E,n),s(E,Qe),s(E,z),s(z,Xe),s(E,Ye),o(e,me,n),o(e,_,n),s(_,Ze),s(_,B),s(B,ge),s(_,et),o(e,he,n),o(e,R,n),R.innerHTML=ss,o(e,ve,n),o(e,V,n),s(V,tt),o(e,ye,n),o(e,d,n),s(d,st),s(d,K),s(K,nt),s(d,at),s(d,Q),s(Q,lt),s(d,ot),s(d,X),s(X,it),s(d,pt),s(d,Y),s(Y,rt),s(d,ut),o(e,ke,n),o(e,D,n),s(D,ct),o(e,Ee,n),o(e,C,n),C.innerHTML=ns,o(e,_e,n),o(e,O,n),s(O,ft),o(e,Te,n),o(e,T,n),s(T,dt),s(T,Z),s(Z,mt),s(T,ht),o(e,be,n),o(e,P,n),P.innerHTML=as,o(e,we,n),o(e,q,n),s(q,g),s(q,vt),o(e,Le,n),o(e,M,n),s(M,yt),o(e,Re,n),o(e,m,n),s(m,ee),s(ee,kt),s(m,Et),s(m,te),s(te,_t),s(m,Tt),s(m,se),s(se,bt),s(m,wt),s(m,ne),s(ne,Lt)},p:Ct,i:Ct,o:Ct,d(e){e&&t(k),e&&t(ae),e&&t(H),e&&t(le),e&&t(I),e&&t(oe),e&&t(h),e&&t(ie),e&&t(f),e&&t(pe),e&&t(w),e&&t(re),e&&t(G),e&&t(ue),e&&t(N),e&&t(ce),e&&t(L),e&&t(fe),e&&t(S),e&&t(de),e&&t(E),e&&t(me),e&&t(_),e&&t(he),e&&t(R),e&&t(ve),e&&t(V),e&&t(ye),e&&t(d),e&&t(ke),e&&t(D),e&&t(Ee),e&&t(C),e&&t(_e),e&&t(O),e&&t(Te),e&&t(T),e&&t(be),e&&t(P),e&&t(we),e&&t(q),e&&t(Le),e&&t(M),e&&t(Re),e&&t(m)}}}class vs extends us{constructor(k){super();cs(this,k,null,ds,fs,{})}}export{vs as default};
