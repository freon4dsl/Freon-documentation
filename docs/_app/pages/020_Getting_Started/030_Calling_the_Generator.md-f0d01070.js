import{S as J,i as K,s as M,e as w,t as r,k as I,w as G,c as v,a as b,h as c,d as a,m as N,x as S,b as Q,g as h,H as m,y as q,q as D,o as H,B as U}from"../../chunks/vendor-0dc77bd0.js";import{N as z}from"../../chunks/Note-b0db7989.js";import{F as R}from"../../chunks/Figure-4dd15a94.js";/* empty css                                                      *//* empty css                                                        */function V(p){let t;return{c(){t=r("Incomplete code")},l(o){t=c(o,"Incomplete code")},m(o,s){h(o,t,s)},d(o){o&&a(t)}}}function X(p){let t;return{c(){t=r(`Note that every command except *all*, used individually (i.e. without the other commands), generates code that
does not compile correctly.
For instance, both the scoper and validator might need to use the typer, therefore the
code seeks to include the typer class, which might not be generated yet. Likewise, the editor seeks to include
the scoper.
The best way to go about is to first use the *all* command. Next, when you focus on one of the aspects of your
language, you can use the specific command for that aspect. Thus, you can keep regeneration-time as short as possible.`)},l(o){t=c(o,`Note that every command except *all*, used individually (i.e. without the other commands), generates code that
does not compile correctly.
For instance, both the scoper and validator might need to use the typer, therefore the
code seeks to include the typer class, which might not be generated yet. Likewise, the editor seeks to include
the scoper.
The best way to go about is to first use the *all* command. Next, when you focus on one of the aspects of your
language, you can use the specific command for that aspect. Thus, you can keep regeneration-time as short as possible.`)},m(o,s){h(o,t,s)},d(o){o&&a(t)}}}function Y(p){let t;return{c(){t=r("Watch Option")},l(o){t=c(o,"Watch Option")},m(o,s){h(o,t,s)},d(o){o&&a(t)}}}function Z(p){let t;return{c(){t=r("There also is a `-watch` option to automatically run the *all* command when a definition file changes.")},l(o){t=c(o,"There also is a `-watch` option to automatically run the *all* command when a definition file changes.")},m(o,s){h(o,t,s)},d(o){o&&a(t)}}}function ee(p){let t,o,s,i,P,_,T,E,$,L,A,g,C,O,x,d,j,f,k,u,F;return d=new R({props:{imageName:"projectit-command-line-options.png",caption:"Screenshot of commandline options",figureNumber:1}}),f=new z({props:{$$slots:{content:[X],header:[V]},$$scope:{ctx:p}}}),u=new z({props:{$$slots:{content:[Z],header:[Y]},$$scope:{ctx:p}}}),{c(){t=w("h1"),o=r("Use of the ProjectIt Generator"),s=I(),i=w("p"),P=r(`The ProjectIt commandline tool generates code from the various definition files as described in
`),_=w("a"),T=r("A Language in Five Parts"),E=r(`.
If you type \u2018`),$=w("code"),L=r("projectit"),A=r(`\u2019 in a (bash) terminal you will see
an overview of the different
arguments that can be used. For detailed help about a specific command, type: \u2018`),g=w("code"),C=r("projectit <command> -h"),O=r("\u2019."),x=I(),G(d.$$.fragment),j=I(),G(f.$$.fragment),k=I(),G(u.$$.fragment),this.h()},l(e){t=v(e,"H1",{});var n=b(t);o=c(n,"Use of the ProjectIt Generator"),n.forEach(a),s=N(e),i=v(e,"P",{});var l=b(i);P=c(l,`The ProjectIt commandline tool generates code from the various definition files as described in
`),_=v(l,"A",{href:!0});var y=b(_);T=c(y,"A Language in Five Parts"),y.forEach(a),E=c(l,`.
If you type \u2018`),$=v(l,"CODE",{});var W=b($);L=c(W,"projectit"),W.forEach(a),A=c(l,`\u2019 in a (bash) terminal you will see
an overview of the different
arguments that can be used. For detailed help about a specific command, type: \u2018`),g=v(l,"CODE",{});var B=b(g);C=c(B,"projectit <command> -h"),B.forEach(a),O=c(l,"\u2019."),l.forEach(a),x=N(e),S(d.$$.fragment,e),j=N(e),S(f.$$.fragment,e),k=N(e),S(u.$$.fragment,e),this.h()},h(){Q(_,"href","/010_Intro/040_A_Language_in_Five_Parts")},m(e,n){h(e,t,n),m(t,o),h(e,s,n),h(e,i,n),m(i,P),m(i,_),m(_,T),m(i,E),m(i,$),m($,L),m(i,A),m(i,g),m(g,C),m(i,O),h(e,x,n),q(d,e,n),h(e,j,n),q(f,e,n),h(e,k,n),q(u,e,n),F=!0},p(e,[n]){const l={};n&1&&(l.$$scope={dirty:n,ctx:e}),f.$set(l);const y={};n&1&&(y.$$scope={dirty:n,ctx:e}),u.$set(y)},i(e){F||(D(d.$$.fragment,e),D(f.$$.fragment,e),D(u.$$.fragment,e),F=!0)},o(e){H(d.$$.fragment,e),H(f.$$.fragment,e),H(u.$$.fragment,e),F=!1},d(e){e&&a(t),e&&a(s),e&&a(i),e&&a(x),U(d,e),e&&a(j),U(f,e),e&&a(k),U(u,e)}}}class ie extends J{constructor(t){super();K(this,t,null,ee,M,{})}}export{ie as default};
