import{S as hr,i as ur,s as pr,e as l,t as o,k as b,w as tr,c as i,a as n,h as a,d as t,m as g,x as or,b as M,g as s,H as e,y as ar,q as rr,o as lr,B as ir}from"../../chunks/vendor-492729b6.js";import{N as nr}from"../../chunks/Note-1bdf01a3.js";/* empty css                                                      */function mr(V){let v,m,L,_,f,w,j;return{c(){v=o("You can use your own names for "),m=l("i"),L=o("defs"),_=o(" and "),f=l("i"),w=o("picode"),j=o(".")},l(h){v=a(h,"You can use your own names for "),m=i(h,"I",{});var y=n(m);L=a(y,"defs"),y.forEach(t),_=a(h," and "),f=i(h,"I",{});var P=n(f);w=a(P,"picode"),P.forEach(t),j=a(h,".")},m(h,y){s(h,v,y),s(h,m,y),e(m,L),s(h,_,y),s(h,f,y),e(f,w),s(h,j,y)},d(h){h&&t(v),h&&t(m),h&&t(_),h&&t(f),h&&t(j)}}}function vr(V){let v,m,L,_,f,w,j,h,y,P,u,T,k,$,z,c;return{c(){v=o("The "),m=l("i"),L=o("defs"),_=o(" and "),f=l("i"),w=o("picode"),j=o(`
  folders can have any name as long as both the `),h=l("code"),y=o("generate"),P=o(" script in "),u=l("code"),T=o("package.json"),k=o(`, and the configuration of
  the web application in the file `),$=l("code"),z=o("~/src/webapp/WebappConfiguration.ts"),c=o(", are adjusted.")},l(d){v=a(d,"The "),m=i(d,"I",{});var I=n(m);L=a(I,"defs"),I.forEach(t),_=a(d," and "),f=i(d,"I",{});var W=n(f);w=a(W,"picode"),W.forEach(t),j=a(d,`
  folders can have any name as long as both the `),h=i(d,"CODE",{});var ae=n(h);y=a(ae,"generate"),ae.forEach(t),P=a(d," script in "),u=i(d,"CODE",{});var re=n(u);T=a(re,"package.json"),re.forEach(t),k=a(d,`, and the configuration of
  the web application in the file `),$=i(d,"CODE",{});var le=n($);z=a(le,"~/src/webapp/WebappConfiguration.ts"),le.forEach(t),c=a(d,", are adjusted.")},m(d,I){s(d,v,I),s(d,m,I),e(m,L),s(d,_,I),s(d,f,I),e(f,w),s(d,j,I),s(d,h,I),e(h,y),s(d,P,I),s(d,u,I),e(u,T),s(d,k,I),s(d,$,I),e($,z),s(d,c,I)},d(d){d&&t(v),d&&t(m),d&&t(_),d&&t(f),d&&t(j),d&&t(h),d&&t(P),d&&t(u),d&&t(k),d&&t($),d&&t(c)}}}function _r(V){let v,m,L,_;return{c(){v=o("Be careful with handmade changes in "),m=l("i"),L=o("picode"),_=o(".")},l(f){v=a(f,"Be careful with handmade changes in "),m=i(f,"I",{});var w=n(m);L=a(w,"picode"),w.forEach(t),_=a(f,".")},m(f,w){s(f,v,w),s(f,m,w),e(m,L),s(f,_,w)},d(f){f&&t(v),f&&t(m),f&&t(_)}}}function Er(V){let v,m,L,_,f,w,j,h,y,P;return{c(){v=o("The contents of all folders in "),m=l("i"),L=o("picode"),_=o(` is divided into files (usually TypeScript classes) 
that are contained directly in the folder, and files
that are contained in the subfolder `),f=l("i"),w=o("gen"),j=o(`. The latter are always removed before regeneration, so be careful
not to add important code to the `),h=l("i"),y=o("gen"),P=o(` folder.
Code that is contained directly in each folder is not changed upon regeneration.`)},l(u){v=a(u,"The contents of all folders in "),m=i(u,"I",{});var T=n(m);L=a(T,"picode"),T.forEach(t),_=a(u,` is divided into files (usually TypeScript classes) 
that are contained directly in the folder, and files
that are contained in the subfolder `),f=i(u,"I",{});var k=n(f);w=a(k,"gen"),k.forEach(t),j=a(u,`. The latter are always removed before regeneration, so be careful
not to add important code to the `),h=i(u,"I",{});var $=n(h);y=a($,"gen"),$.forEach(t),P=a(u,` folder.
Code that is contained directly in each folder is not changed upon regeneration.`)},m(u,T){s(u,v,T),s(u,m,T),e(m,L),s(u,_,T),s(u,f,T),e(f,w),s(u,j,T),s(u,h,T),e(h,y),s(u,P,T)},d(u){u&&t(v),u&&t(m),u&&t(_),u&&t(f),u&&t(j),u&&t(h),u&&t(P)}}}function wr(V){let v,m,L,_,f,w,j,h,y,P,u,T,k,$,z,c,d,I,W,ae,re,le,G,ie,ye,yt,Pt,It,H,Lt,Pe,N,Ie,Tt,jt,Le,Ct,$t,ne,Mt,Dt,kt,Te,C,je,At,Nt,Ce,xt,Ot,$e,St,zt,Me,Wt,Ht,se,Yt,Bt,Ut,De,de,ke,qt,Ft,Rt,Ae,Y,Ne,Vt,Gt,ce,Jt,Kt,Qt,xe,fe,Oe,Xt,Zt,eo,Se,B,ze,to,oo,he,ao,ro,lo,We,x,He,io,no,Ye,so,co,ue,fo,ho,uo,Be,pe,Ue,po,mo,vo,qe,O,Fe,_o,Eo,Re,wo,bo,me,go,yo,Po,Ve,U,Ge,Io,Lo,ve,To,jo,Co,Je,_e,Ke,$o,Mo,Do,Qe,J,ko,Xe,Ao,No,st,S,xo,Ze,Oo,So,et,zo,Wo,dt,q,ct,Ee,Ho,ft,we,Yo,ht,F,Bo,tt,Uo,qo,ut,K,sr='<code class="language-bash">    <span class="token function">yarn</span> model-server</code>',pt,D,Fo,ot,Ro,Vo,at,Go,Jo,Q,Ko,Qo,mt,X,dr='<code class="language-bash">    <span class="token function">yarn</span> dev</code>',vt,be,Xo,_t;return H=new nr({props:{$$slots:{content:[vr],header:[mr]},$$scope:{ctx:V}}}),q=new nr({props:{$$slots:{content:[Er],header:[_r]},$$scope:{ctx:V}}}),{c(){v=l("h1"),m=o("Project Structure"),L=b(),_=l("p"),f=o(`This description of the project structure of a ProjectIt project is based on
the `),w=l("a"),j=o("ProjectIt-example"),h=o(` project which
you can clone from github.`),y=b(),P=l("p"),u=o("The source code (in "),T=l("code"),k=o("~/src"),$=o(") in a ProjectIt project is organised into the following subfolders."),z=b(),c=l("ul"),d=l("li"),I=l("p"),W=l("em"),ae=o("defs"),re=o(": the language definition files."),le=b(),G=l("li"),ie=l("p"),ye=l("em"),yt=o("picode"),Pt=o(": the generated source code."),It=b(),tr(H.$$.fragment),Lt=b(),Pe=l("li"),N=l("p"),Ie=l("em"),Tt=o("picode/config"),jt=o(`: code that provides the coupling between all parts of the generated workbench.
This folder contains one file that will not be overwritten at regeneration: `),Le=l("code"),Ct=o("ProjectitConfiguration.ts"),$t=o(`.
Here you can configure any `),ne=l("a"),Mt=o("third-level customization"),Dt=o(` that you want the
generated code to take into account.`),kt=b(),Te=l("li"),C=l("p"),je=l("em"),At=o("picode/editor"),Nt=o(`: code for the editor. This folder contains two files that will not be overwritten
at regeneration: `),Ce=l("code"),xt=o("Custom<yourLanguageName>Actions.ts"),Ot=o("and "),$e=l("code"),St=o("Custom<yourLanguageName>Projection.ts"),zt=o(`.
(`),Me=l("code"),Wt=o("<yourLanguageName>"),Ht=o(` will be replaced by the name you have given your language in the .ast files.)
These two files are the placeholders for any `),se=l("a"),Yt=o("third-level customization"),Bt=o(` that you
would like to do.`),Ut=b(),De=l("li"),de=l("p"),ke=l("em"),qt=o("picode/language"),Ft=o(": code that implements the language structure."),Rt=b(),Ae=l("li"),Y=l("p"),Ne=l("em"),Vt=o("picode/reader"),Gt=o(": a parser that is able to read "),ce=l("a"),Jt=o("model units"),Kt=o(`
from a text string or file.`),Qt=b(),xe=l("li"),fe=l("p"),Oe=l("em"),Xt=o("picode/scoper"),Zt=o(": code for that determines which elements are visible for a certain element in the user\u2019s model."),eo=b(),Se=l("li"),B=l("p"),ze=l("em"),to=o("picode/stdlib"),oo=o(`: code that implements some standard elements of your language, for instance
`),he=l("a"),ao=o("limited concepts"),ro=o("."),lo=b(),We=l("li"),x=l("p"),He=l("em"),io=o("picode/typer"),no=o(`: code that that determines which type is associated with a certain element in the
user\u2019s model. The file `),Ye=l("code"),so=o("Custom<yourLanguageName>TyperPart.ts"),co=o(" is the placeholder for any "),ue=l("a"),fo=o("third-level customization"),ho=o(` that you
would like to do.`),uo=b(),Be=l("li"),pe=l("p"),Ue=l("em"),po=o("picode/utils"),mo=o(": a default implementation of a visitor for your user\u2019s model."),vo=b(),qe=l("li"),O=l("p"),Fe=l("em"),_o=o("picode/validator"),Eo=o(`: code that determines whether or not certain parts of your user\u2019s model contain
errors. The file `),Re=l("code"),wo=o("Custom<yourLanguageName>Validator.ts"),bo=o(" is the placeholder for any "),me=l("a"),go=o("third-level customization"),yo=o(` that you
would like to do.`),Po=b(),Ve=l("li"),U=l("p"),Ge=l("em"),Io=o("picode/writer"),Lo=o(": code that is able to write your user\u2019s "),ve=l("a"),To=o("model units"),jo=o(`
in string format to a file.`),Co=b(),Je=l("li"),_e=l("p"),Ke=l("em"),$o=o("webapp"),Mo=o(": source code for the web-application used for all generated languages."),Do=b(),Qe=l("li"),J=l("p"),ko=o("Note worthy is the file "),Xe=l("code"),Ao=o("picode/webapp/config/WebappConfiguration.ts"),No=o(`. This file holds the references to the generated language
workbench and the web address of the server which stores your user\u2019s models.`),st=b(),S=l("p"),xo=o("Another folder that can be found in the project is "),Ze=l("code"),Oo=o("~/modelstore"),So=o(`. This is the folder where
the server stores all models, and it is created at the moment that the server is started.
Each model is stored in a separate folder in which you can find its
modelunits as `),et=l("code"),zo=o(".json"),Wo=o(" files."),dt=b(),tr(q.$$.fragment),ct=b(),Ee=l("h2"),Ho=o("The Webapp and Server"),ft=b(),we=l("p"),Yo=o(`For the language environment to function, more is needed than the code for the editor, validator and such.
In particular,
there is a need for a server which can hold and provide stored users models, and for a small web application that
is able to show the editor, errors message, models that are available form the server, and so on.`),ht=b(),F=l("p"),Bo=o("Therefore, we provide a minimal "),tt=l("em"),Uo=o("server"),qo=o(` that stores your user models in a json format.
You can start it through the commandline:`),ut=b(),K=l("pre"),pt=b(),D=l("p"),Fo=o("A simple "),ot=l("em"),Ro=o("web application"),Vo=o(` where you can see your language in action is also provided.
The code can be found in `),at=l("code"),Go=o("~/webapp"),Jo=o(`. It was created
using `),Q=l("a"),Ko=o("Svelte"),Qo=o(`.
You can start it through the commandline:`),mt=b(),X=l("pre"),vt=b(),be=l("p"),Xo=o(`Note that both the server, and the web application are provided for your convenience. We assume
that when ProjectIt is used in a larger context, these two parts will be interchanged with
suitable choices made by the language engineer and team.`),this.h()},l(r){v=i(r,"H1",{});var p=n(v);m=a(p,"Project Structure"),p.forEach(t),L=g(r),_=i(r,"P",{});var Z=n(_);f=a(Z,`This description of the project structure of a ProjectIt project is based on
the `),w=i(Z,"A",{href:!0,target:!0});var rt=n(w);j=a(rt,"ProjectIt-example"),rt.forEach(t),h=a(Z,` project which
you can clone from github.`),Z.forEach(t),y=g(r),P=i(r,"P",{});var Et=n(P);u=a(Et,"The source code (in "),T=i(Et,"CODE",{});var la=n(T);k=a(la,"~/src"),la.forEach(t),$=a(Et,") in a ProjectIt project is organised into the following subfolders."),Et.forEach(t),z=g(r),c=i(r,"UL",{});var E=n(c);d=i(E,"LI",{});var ia=n(d);I=i(ia,"P",{});var Zo=n(I);W=i(Zo,"EM",{});var na=n(W);ae=a(na,"defs"),na.forEach(t),re=a(Zo,": the language definition files."),Zo.forEach(t),ia.forEach(t),le=g(E),G=i(E,"LI",{});var wt=n(G);ie=i(wt,"P",{});var ea=n(ie);ye=i(ea,"EM",{});var sa=n(ye);yt=a(sa,"picode"),sa.forEach(t),Pt=a(ea,": the generated source code."),ea.forEach(t),It=g(wt),or(H.$$.fragment,wt),wt.forEach(t),Lt=g(E),Pe=i(E,"LI",{});var da=n(Pe);N=i(da,"P",{});var ee=n(N);Ie=i(ee,"EM",{});var ca=n(Ie);Tt=a(ca,"picode/config"),ca.forEach(t),jt=a(ee,`: code that provides the coupling between all parts of the generated workbench.
This folder contains one file that will not be overwritten at regeneration: `),Le=i(ee,"CODE",{});var fa=n(Le);Ct=a(fa,"ProjectitConfiguration.ts"),fa.forEach(t),$t=a(ee,`.
Here you can configure any `),ne=i(ee,"A",{href:!0});var ha=n(ne);Mt=a(ha,"third-level customization"),ha.forEach(t),Dt=a(ee,` that you want the
generated code to take into account.`),ee.forEach(t),da.forEach(t),kt=g(E),Te=i(E,"LI",{});var ua=n(Te);C=i(ua,"P",{});var A=n(C);je=i(A,"EM",{});var pa=n(je);At=a(pa,"picode/editor"),pa.forEach(t),Nt=a(A,`: code for the editor. This folder contains two files that will not be overwritten
at regeneration: `),Ce=i(A,"CODE",{});var ma=n(Ce);xt=a(ma,"Custom<yourLanguageName>Actions.ts"),ma.forEach(t),Ot=a(A,"and "),$e=i(A,"CODE",{});var va=n($e);St=a(va,"Custom<yourLanguageName>Projection.ts"),va.forEach(t),zt=a(A,`.
(`),Me=i(A,"CODE",{});var _a=n(Me);Wt=a(_a,"<yourLanguageName>"),_a.forEach(t),Ht=a(A,` will be replaced by the name you have given your language in the .ast files.)
These two files are the placeholders for any `),se=i(A,"A",{href:!0});var Ea=n(se);Yt=a(Ea,"third-level customization"),Ea.forEach(t),Bt=a(A,` that you
would like to do.`),A.forEach(t),ua.forEach(t),Ut=g(E),De=i(E,"LI",{});var wa=n(De);de=i(wa,"P",{});var ta=n(de);ke=i(ta,"EM",{});var ba=n(ke);qt=a(ba,"picode/language"),ba.forEach(t),Ft=a(ta,": code that implements the language structure."),ta.forEach(t),wa.forEach(t),Rt=g(E),Ae=i(E,"LI",{});var ga=n(Ae);Y=i(ga,"P",{});var lt=n(Y);Ne=i(lt,"EM",{});var ya=n(Ne);Vt=a(ya,"picode/reader"),ya.forEach(t),Gt=a(lt,": a parser that is able to read "),ce=i(lt,"A",{href:!0});var Pa=n(ce);Jt=a(Pa,"model units"),Pa.forEach(t),Kt=a(lt,`
from a text string or file.`),lt.forEach(t),ga.forEach(t),Qt=g(E),xe=i(E,"LI",{});var Ia=n(xe);fe=i(Ia,"P",{});var oa=n(fe);Oe=i(oa,"EM",{});var La=n(Oe);Xt=a(La,"picode/scoper"),La.forEach(t),Zt=a(oa,": code for that determines which elements are visible for a certain element in the user\u2019s model."),oa.forEach(t),Ia.forEach(t),eo=g(E),Se=i(E,"LI",{});var Ta=n(Se);B=i(Ta,"P",{});var it=n(B);ze=i(it,"EM",{});var ja=n(ze);to=a(ja,"picode/stdlib"),ja.forEach(t),oo=a(it,`: code that implements some standard elements of your language, for instance
`),he=i(it,"A",{href:!0});var Ca=n(he);ao=a(Ca,"limited concepts"),Ca.forEach(t),ro=a(it,"."),it.forEach(t),Ta.forEach(t),lo=g(E),We=i(E,"LI",{});var $a=n(We);x=i($a,"P",{});var te=n(x);He=i(te,"EM",{});var Ma=n(He);io=a(Ma,"picode/typer"),Ma.forEach(t),no=a(te,`: code that that determines which type is associated with a certain element in the
user\u2019s model. The file `),Ye=i(te,"CODE",{});var Da=n(Ye);so=a(Da,"Custom<yourLanguageName>TyperPart.ts"),Da.forEach(t),co=a(te," is the placeholder for any "),ue=i(te,"A",{href:!0});var ka=n(ue);fo=a(ka,"third-level customization"),ka.forEach(t),ho=a(te,` that you
would like to do.`),te.forEach(t),$a.forEach(t),uo=g(E),Be=i(E,"LI",{});var Aa=n(Be);pe=i(Aa,"P",{});var aa=n(pe);Ue=i(aa,"EM",{});var Na=n(Ue);po=a(Na,"picode/utils"),Na.forEach(t),mo=a(aa,": a default implementation of a visitor for your user\u2019s model."),aa.forEach(t),Aa.forEach(t),vo=g(E),qe=i(E,"LI",{});var xa=n(qe);O=i(xa,"P",{});var oe=n(O);Fe=i(oe,"EM",{});var Oa=n(Fe);_o=a(Oa,"picode/validator"),Oa.forEach(t),Eo=a(oe,`: code that determines whether or not certain parts of your user\u2019s model contain
errors. The file `),Re=i(oe,"CODE",{});var Sa=n(Re);wo=a(Sa,"Custom<yourLanguageName>Validator.ts"),Sa.forEach(t),bo=a(oe," is the placeholder for any "),me=i(oe,"A",{href:!0});var za=n(me);go=a(za,"third-level customization"),za.forEach(t),yo=a(oe,` that you
would like to do.`),oe.forEach(t),xa.forEach(t),Po=g(E),Ve=i(E,"LI",{});var Wa=n(Ve);U=i(Wa,"P",{});var nt=n(U);Ge=i(nt,"EM",{});var Ha=n(Ge);Io=a(Ha,"picode/writer"),Ha.forEach(t),Lo=a(nt,": code that is able to write your user\u2019s "),ve=i(nt,"A",{href:!0});var Ya=n(ve);To=a(Ya,"model units"),Ya.forEach(t),jo=a(nt,`
in string format to a file.`),nt.forEach(t),Wa.forEach(t),Co=g(E),Je=i(E,"LI",{});var Ba=n(Je);_e=i(Ba,"P",{});var ra=n(_e);Ke=i(ra,"EM",{});var Ua=n(Ke);$o=a(Ua,"webapp"),Ua.forEach(t),Mo=a(ra,": source code for the web-application used for all generated languages."),ra.forEach(t),Ba.forEach(t),Do=g(E),Qe=i(E,"LI",{});var qa=n(Qe);J=i(qa,"P",{});var bt=n(J);ko=a(bt,"Note worthy is the file "),Xe=i(bt,"CODE",{});var Fa=n(Xe);Ao=a(Fa,"picode/webapp/config/WebappConfiguration.ts"),Fa.forEach(t),No=a(bt,`. This file holds the references to the generated language
workbench and the web address of the server which stores your user\u2019s models.`),bt.forEach(t),qa.forEach(t),E.forEach(t),st=g(r),S=i(r,"P",{});var ge=n(S);xo=a(ge,"Another folder that can be found in the project is "),Ze=i(ge,"CODE",{});var Ra=n(Ze);Oo=a(Ra,"~/modelstore"),Ra.forEach(t),So=a(ge,`. This is the folder where
the server stores all models, and it is created at the moment that the server is started.
Each model is stored in a separate folder in which you can find its
modelunits as `),et=i(ge,"CODE",{});var Va=n(et);zo=a(Va,".json"),Va.forEach(t),Wo=a(ge," files."),ge.forEach(t),dt=g(r),or(q.$$.fragment,r),ct=g(r),Ee=i(r,"H2",{});var Ga=n(Ee);Ho=a(Ga,"The Webapp and Server"),Ga.forEach(t),ft=g(r),we=i(r,"P",{});var Ja=n(we);Yo=a(Ja,`For the language environment to function, more is needed than the code for the editor, validator and such.
In particular,
there is a need for a server which can hold and provide stored users models, and for a small web application that
is able to show the editor, errors message, models that are available form the server, and so on.`),Ja.forEach(t),ht=g(r),F=i(r,"P",{});var gt=n(F);Bo=a(gt,"Therefore, we provide a minimal "),tt=i(gt,"EM",{});var Ka=n(tt);Uo=a(Ka,"server"),Ka.forEach(t),qo=a(gt,` that stores your user models in a json format.
You can start it through the commandline:`),gt.forEach(t),ut=g(r),K=i(r,"PRE",{class:!0});var cr=n(K);cr.forEach(t),pt=g(r),D=i(r,"P",{});var R=n(D);Fo=a(R,"A simple "),ot=i(R,"EM",{});var Qa=n(ot);Ro=a(Qa,"web application"),Qa.forEach(t),Vo=a(R,` where you can see your language in action is also provided.
The code can be found in `),at=i(R,"CODE",{});var Xa=n(at);Go=a(Xa,"~/webapp"),Xa.forEach(t),Jo=a(R,`. It was created
using `),Q=i(R,"A",{href:!0,target:!0});var Za=n(Q);Ko=a(Za,"Svelte"),Za.forEach(t),Qo=a(R,`.
You can start it through the commandline:`),R.forEach(t),mt=g(r),X=i(r,"PRE",{class:!0});var fr=n(X);fr.forEach(t),vt=g(r),be=i(r,"P",{});var er=n(be);Xo=a(er,`Note that both the server, and the web application are provided for your convenience. We assume
that when ProjectIt is used in a larger context, these two parts will be interchanged with
suitable choices made by the language engineer and team.`),er.forEach(t),this.h()},h(){M(w,"href","https://github.com/projectit-org/ProjectIt-example"),M(w,"target","_blank"),M(ne,"href","/030_Developing_a_Language/030_API_Level"),M(se,"href","/030_Developing_a_Language/030_API_Level"),M(ce,"href","/010_Intro/030_Models_and_Model_Units"),M(he,"href","/030_Developing_a_Language/010_Default_Level"),M(ue,"href","/030_Developing_a_Language/030_API_Level"),M(me,"href","/030_Developing_a_Language/030_API_Level"),M(ve,"href","/010_Intro/030_Models_and_Model_Units"),M(K,"class","language-bash"),M(Q,"href","https://svelte.dev/"),M(Q,"target","_blank"),M(X,"class","language-bash")},m(r,p){s(r,v,p),e(v,m),s(r,L,p),s(r,_,p),e(_,f),e(_,w),e(w,j),e(_,h),s(r,y,p),s(r,P,p),e(P,u),e(P,T),e(T,k),e(P,$),s(r,z,p),s(r,c,p),e(c,d),e(d,I),e(I,W),e(W,ae),e(I,re),e(c,le),e(c,G),e(G,ie),e(ie,ye),e(ye,yt),e(ie,Pt),e(G,It),ar(H,G,null),e(c,Lt),e(c,Pe),e(Pe,N),e(N,Ie),e(Ie,Tt),e(N,jt),e(N,Le),e(Le,Ct),e(N,$t),e(N,ne),e(ne,Mt),e(N,Dt),e(c,kt),e(c,Te),e(Te,C),e(C,je),e(je,At),e(C,Nt),e(C,Ce),e(Ce,xt),e(C,Ot),e(C,$e),e($e,St),e(C,zt),e(C,Me),e(Me,Wt),e(C,Ht),e(C,se),e(se,Yt),e(C,Bt),e(c,Ut),e(c,De),e(De,de),e(de,ke),e(ke,qt),e(de,Ft),e(c,Rt),e(c,Ae),e(Ae,Y),e(Y,Ne),e(Ne,Vt),e(Y,Gt),e(Y,ce),e(ce,Jt),e(Y,Kt),e(c,Qt),e(c,xe),e(xe,fe),e(fe,Oe),e(Oe,Xt),e(fe,Zt),e(c,eo),e(c,Se),e(Se,B),e(B,ze),e(ze,to),e(B,oo),e(B,he),e(he,ao),e(B,ro),e(c,lo),e(c,We),e(We,x),e(x,He),e(He,io),e(x,no),e(x,Ye),e(Ye,so),e(x,co),e(x,ue),e(ue,fo),e(x,ho),e(c,uo),e(c,Be),e(Be,pe),e(pe,Ue),e(Ue,po),e(pe,mo),e(c,vo),e(c,qe),e(qe,O),e(O,Fe),e(Fe,_o),e(O,Eo),e(O,Re),e(Re,wo),e(O,bo),e(O,me),e(me,go),e(O,yo),e(c,Po),e(c,Ve),e(Ve,U),e(U,Ge),e(Ge,Io),e(U,Lo),e(U,ve),e(ve,To),e(U,jo),e(c,Co),e(c,Je),e(Je,_e),e(_e,Ke),e(Ke,$o),e(_e,Mo),e(c,Do),e(c,Qe),e(Qe,J),e(J,ko),e(J,Xe),e(Xe,Ao),e(J,No),s(r,st,p),s(r,S,p),e(S,xo),e(S,Ze),e(Ze,Oo),e(S,So),e(S,et),e(et,zo),e(S,Wo),s(r,dt,p),ar(q,r,p),s(r,ct,p),s(r,Ee,p),e(Ee,Ho),s(r,ft,p),s(r,we,p),e(we,Yo),s(r,ht,p),s(r,F,p),e(F,Bo),e(F,tt),e(tt,Uo),e(F,qo),s(r,ut,p),s(r,K,p),K.innerHTML=sr,s(r,pt,p),s(r,D,p),e(D,Fo),e(D,ot),e(ot,Ro),e(D,Vo),e(D,at),e(at,Go),e(D,Jo),e(D,Q),e(Q,Ko),e(D,Qo),s(r,mt,p),s(r,X,p),X.innerHTML=dr,s(r,vt,p),s(r,be,p),e(be,Xo),_t=!0},p(r,[p]){const Z={};p&1&&(Z.$$scope={dirty:p,ctx:r}),H.$set(Z);const rt={};p&1&&(rt.$$scope={dirty:p,ctx:r}),q.$set(rt)},i(r){_t||(rr(H.$$.fragment,r),rr(q.$$.fragment,r),_t=!0)},o(r){lr(H.$$.fragment,r),lr(q.$$.fragment,r),_t=!1},d(r){r&&t(v),r&&t(L),r&&t(_),r&&t(y),r&&t(P),r&&t(z),r&&t(c),ir(H),r&&t(st),r&&t(S),r&&t(dt),ir(q,r),r&&t(ct),r&&t(Ee),r&&t(ft),r&&t(we),r&&t(ht),r&&t(F),r&&t(ut),r&&t(K),r&&t(pt),r&&t(D),r&&t(mt),r&&t(X),r&&t(vt),r&&t(be)}}}class Pr extends hr{constructor(v){super();ur(this,v,null,wr,pr,{})}}export{Pr as default};
