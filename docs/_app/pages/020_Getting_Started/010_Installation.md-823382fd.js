import{S as jl,i as Il,s as Pl,e as l,t as o,k as u,w as pe,c as n,a as s,h as a,d as r,m as p,x as de,b as d,g as h,H as e,y as _e,q as me,o as ge,B as ve}from"../../chunks/vendor-492729b6.js";import{N as It}from"../../chunks/Note-1bdf01a3.js";import{F as sl}from"../../chunks/Figure-d1c3817f.js";/* empty css                                                      *//* empty css                                                        */function kl(E){let c;return{c(){c=o("Open browser at localhost")},l(i){c=a(i,"Open browser at localhost")},m(i,_){h(i,c,_)},d(i){i&&r(c)}}}function Ll(E){let c,i,_,v;return{c(){c=o("The last command opens your preferred browser with the generated editor for the language `Entity` on\n`"),i=l("a"),_=o("http://localhost:5000/"),v=o(`\`. If Chrome is not
your preferred browser, please open the above page in Chrome, because we cannot
ensure that the editor functions as it should in other browsers."`),this.h()},l(m){c=a(m,"The last command opens your preferred browser with the generated editor for the language `Entity` on\n`"),i=n(m,"A",{href:!0,target:!0});var g=s(i);_=a(g,"http://localhost:5000/"),g.forEach(r),v=a(m,`\`. If Chrome is not
your preferred browser, please open the above page in Chrome, because we cannot
ensure that the editor functions as it should in other browsers."`),this.h()},h(){d(i,"href","http://localhost:5000/"),d(i,"target","_blank")},m(m,g){h(m,c,g),h(m,i,g),e(i,_),h(m,v,g)},d(m){m&&r(c),m&&r(i),m&&r(v)}}}function xl(E){let c;return{c(){c=o("Use Help Menu")},l(i){c=a(i,"Use Help Menu")},m(i,_){h(i,c,_)},d(i){i&&r(c)}}}function Cl(E){let c;return{c(){c=o("If you are having trouble using the editor, have a look at the key-bindings under the **Help* menu.")},l(i){c=a(i,"If you are having trouble using the editor, have a look at the key-bindings under the **Help* menu.")},m(i,_){h(i,c,_)},d(i){i&&r(c)}}}function Tl(E){let c;return{c(){c=o("Only the language structure is required")},l(i){c=a(i,"Only the language structure is required")},m(i,_){h(i,c,_)},d(i){i&&r(c)}}}function Hl(E){let c;return{c(){c=o(`To start, you only need to define the language structure,
    defaults will be generated for the editor, scoper, typer, and validator. This is called the first
    level of customization.`)},l(i){c=a(i,`To start, you only need to define the language structure,
    defaults will be generated for the editor, scoper, typer, and validator. This is called the first
    level of customization.`)},m(i,_){h(i,c,_)},d(i){i&&r(c)}}}function Ol(E){let c;return{c(){c=o("Open browser at localhost")},l(i){c=a(i,"Open browser at localhost")},m(i,_){h(i,c,_)},d(i){i&&r(c)}}}function Sl(E){let c,i,_,v;return{c(){c=o("The last command opens your preferred browser with the generated editor for the language\n    `Entity` on `"),i=l("a"),_=o("http://localhost:3000/"),v=o(`\`. 
    If Chrome is not your preferred browser, please open the above page in Chrome, because we 
    cannot ensure that the editor functions as it should in other browsers.`),this.h()},l(m){c=a(m,"The last command opens your preferred browser with the generated editor for the language\n    `Entity` on `"),i=n(m,"A",{href:!0,target:!0});var g=s(i);_=a(g,"http://localhost:3000/"),g.forEach(r),v=a(m,`\`. 
    If Chrome is not your preferred browser, please open the above page in Chrome, because we 
    cannot ensure that the editor functions as it should in other browsers.`),this.h()},h(){d(i,"href","http://localhost:3000/"),d(i,"target","_blank")},m(m,g){h(m,c,g),h(m,i,g),e(i,_),h(m,v,g)},d(m){m&&r(c),m&&r(i),m&&r(v)}}}function Dl(E){let c;return{c(){c=o("Use Help Menu")},l(i){c=a(i,"Use Help Menu")},m(i,_){h(i,c,_)},d(i){i&&r(c)}}}function Al(E){let c;return{c(){c=o("If you are having trouble using the editor, have a look at the key-bindings under the *Help* menu.")},l(i){c=a(i,"If you are having trouble using the editor, have a look at the key-bindings under the *Help* menu.")},m(i,_){h(i,c,_)},d(i){i&&r(c)}}}function Ml(E){let c,i,_,v,m,g,ur,pr,Pt,O,dr,kt,S,_r,Lt,we,mr,xt,Ee,gr,Ct,be,vr,Tt,b,qe,P,wr,Be,Er,br,B,yr,$r,ye,jr,Ir,Pr,z,ze,kr,Lr,$e,il='<code class="language-bash"><span class="token function">yarn</span> <span class="token function">install</span></code>',xr,J,Je,Cr,Tr,je,fl='<code class="language-bash"><span class="token function">yarn</span> generate</code>',Hr,K,Ke,Or,Sr,Ie,hl='<code class="language-bash"><span class="token function">yarn</span> model-server</code>',Dr,Q,Qe,Ar,Mr,Pe,cl='<code class="language-bash"><span class="token function">yarn</span> dev</code>',Ht,D,Ot,ke,Ve,Nr,St,A,Dt,Le,Ur,At,M,Rr,xe,Yr,Wr,Mt,j,Xe,k,Fr,Ze,Gr,qr,V,Br,zr,Ce,Jr,Kr,Qr,X,et,Vr,Xr,Te,ul='<code class="language-bash"><span class="token function">yarn</span> <span class="token function">install</span></code>',Zr,tt,L,eo,rt,to,ro,ot,oo,ao,at,lo,no,so,lt,$,io,nt,fo,ho,st,co,uo,it,po,_o,He,mo,go,Nt,N,Ut,Oe,w,vo,ft,wo,Eo,ht,bo,yo,ct,$o,jo,ut,Io,Po,pt,ko,Lo,dt,xo,Co,Rt,Z,Yt,Se,ee,To,_t,Ho,Oo,Wt,te,pl='<code class="language-bash">    <span class="token function">yarn</span> generate</code>',Ft,x,re,oe,So,mt,Do,Ao,Mo,ae,No,le,ne,Uo,gt,Ro,Yo,Wo,De,dl='<code class="language-bash"><span class="token function">yarn</span> model-server</code>',Fo,se,vt,Go,qo,Ae,_l='<code class="language-bash"><span class="token function">yarn</span> dev</code>',Gt,U,qt,Me,wt,Bo,Bt,R,zt,Ne,zo,Jt,Ue,Jo,Kt,I,H,Ko,ie,Qo,Vo,Et,Xo,Zo,ea,fe,ta,Re,ra,oa,aa,he,la,Ye,na,sa,ia,ce,fa,We,ha,ca,Qt;return D=new It({props:{$$slots:{content:[Ll],header:[kl]},$$scope:{ctx:E}}}),A=new It({props:{$$slots:{content:[Cl],header:[xl]},$$scope:{ctx:E}}}),N=new It({props:{$$slots:{content:[Hl],header:[Tl]},$$scope:{ctx:E}}}),Z=new sl({props:{imageName:"packagejsonadjustment.png",caption:"Screenshot of package.json",figureNumber:1}}),ae=new sl({props:{imageName:"webappconfiguration.png",caption:"Screenshot of WebappConfiguration",figureNumber:2}}),U=new It({props:{$$slots:{content:[Sl],header:[Ol]},$$scope:{ctx:E}}}),R=new It({props:{$$slots:{content:[Al],header:[Dl]},$$scope:{ctx:E}}}),{c(){c=l("h1"),i=o("Installing and Using ProjectIt"),_=u(),v=l("p"),m=o("Be sure to have "),g=l("a"),ur=o("node.js"),pr=o(" and"),Pt=u(),O=l("a"),dr=o("yarn"),kt=o(`
running. We are typically using the latest versions of all,
although older versions likely work just as well.
You could also try and use `),S=l("a"),_r=o("npm"),Lt=o(` instead of yarn.
`),we=l("p"),mr=o(`There are two ways to start with ProjectIt, either use our
Example project or use our Template project.`),xt=u(),Ee=l("h2"),gr=o("Start with the Example Project"),Ct=u(),be=l("p"),vr=o(`The simplest manner to start working with ProjectIt is to clone the example project from github.
In the following the root of your project will be indicated with \u2019~\u2018.`),Tt=u(),b=l("ul"),qe=l("li"),P=l("p"),wr=o("Clone branch "),Be=l("code"),Er=o("master"),br=o(" from "),B=l("a"),yr=o("https://github.com/projectit-org/ProjectIt-example"),$r=o(` in your preferred IDE.
(For an explanation of the content of the project see
`),ye=l("a"),jr=o("Project_Structure"),Ir=o(")."),Pr=u(),z=l("li"),ze=l("p"),kr=o("Next, install all necessary packages by running:"),Lr=u(),$e=l("pre"),xr=u(),J=l("li"),Je=l("p"),Cr=o("Run the generator and see the generated files appearing in the folder ~/src/picode:"),Tr=u(),je=l("pre"),Hr=u(),K=l("li"),Ke=l("p"),Or=o("Start the server (note that anything that is saved in the editor will be stored in ~/modelstore):"),Sr=u(),Ie=l("pre"),Dr=u(),Q=l("li"),Qe=l("p"),Ar=o("Open another (bash) terminal, and start the generated editor from it:"),Mr=u(),Pe=l("pre"),Ht=u(),pe(D.$$.fragment),Ot=u(),ke=l("ul"),Ve=l("li"),Nr=o("Try out the editor"),St=u(),pe(A.$$.fragment),Dt=u(),Le=l("h2"),Ur=o("Start with the Template project"),At=u(),M=l("p"),Rr=o(`Another way to start working with ProjectIt is to clone our template project from github. The template
project provides a shell for the generated editor that enables the user to work with multiple models and
`),xe=l("a"),Yr=o("model units"),Wr=o(`.
In the following the root of the project will be indicated with \u2019~\u2018.`),Mt=u(),j=l("ul"),Xe=l("li"),k=l("p"),Fr=o("Clone branch "),Ze=l("code"),Gr=o("master"),qr=o(" from "),V=l("a"),Br=o("https://github.com/projectit-org/ProjectIt-template"),zr=o(`.
(For an explanation of the content of the project see
`),Ce=l("a"),Jr=o("Project_Structure"),Kr=o(")."),Qr=u(),X=l("li"),et=l("p"),Vr=o("Next, install all necessary packages by running:"),Xr=u(),Te=l("pre"),Zr=u(),tt=l("li"),L=l("p"),eo=o("Create a folder for your language in "),rt=l("code"),to=o("~/src"),ro=o(`, to hold the definition files for your language.
We usually call it `),ot=l("em"),oo=o("defs"),ao=o(", but any name will do. (Here the name "),at=l("em"),lo=o("defs"),no=o(" will be used.)"),so=u(),lt=l("li"),$=l("p"),io=o(`Create a language definition file which defines the structure of your language. The
extension of this file must be `),nt=l("code"),fo=o(".ast"),ho=o(`. You can, for instance, copy
`),st=l("code"),co=o("EntityLanguage.ast"),uo=o(" from the ProjectIt example to your own "),it=l("code"),po=o("defs"),_o=o(`-folder. Or, you can follow the
tutorial on `),He=l("a"),mo=o("language structure definition"),go=o("."),Nt=u(),pe(N.$$.fragment),Ut=u(),Oe=l("ul"),w=l("li"),vo=o("Next, adjust the "),ft=l("code"),wo=o("scripts"),Eo=o(" entry in the "),ht=l("em"),bo=o("package.json"),yo=o(" file. The "),ct=l("code"),$o=o("generate"),jo=o(`
script should include your `),ut=l("em"),Io=o("defs"),Po=o(` folder as well as the folder where you want the
generated code to be stored.
In the following screenshot, we use `),pt=l("code"),ko=o("~/src/defs"),Lo=o(" and "),dt=l("code"),xo=o("~/src/picode"),Co=o(", respectively."),Rt=u(),pe(Z.$$.fragment),Yt=u(),Se=l("ul"),ee=l("li"),To=o(`Run the generator and see the generated files appearing in the folder where you
decided to store the generated code (in the screenshot we used `),_t=l("code"),Ho=o("src/picode"),Oo=o("):"),Wt=u(),te=l("pre"),Ft=u(),x=l("ul"),re=l("li"),oe=l("p"),So=o(`Adjust the configuration of the web application by changing the two lines in the file
`),mt=l("code"),Do=o("~/src/webapp/WebappConfiguration.ts"),Ao=o("."),Mo=u(),pe(ae.$$.fragment),No=u(),le=l("li"),ne=l("p"),Uo=o("Start the server (note that anything that is saved in the editor will be stored in "),gt=l("code"),Ro=o("~/modelstore"),Yo=o("):"),Wo=u(),De=l("pre"),Fo=u(),se=l("li"),vt=l("p"),Go=o("Open another (bash) terminal, and start the generated editor from it:"),qo=u(),Ae=l("pre"),Gt=u(),pe(U.$$.fragment),qt=u(),Me=l("ul"),wt=l("li"),Bo=o("Try out the editor"),Bt=u(),pe(R.$$.fragment),zt=u(),Ne=l("h2"),zo=o("Next steps"),Jt=u(),Ue=l("p"),Jo=o("Now you are ready for a closer look at ProjectIt. You can for instance:"),Kt=u(),I=l("ul"),H=l("li"),Ko=o(`Have a look at how the example language is defined by browsing through the language definition
files in the `),ie=l("a"),Qo=o("ProjectIt Example project"),Vo=o(`.
You can find them in `),Et=l("code"),Xo=o("~/src/defs"),Zo=o("."),ea=u(),fe=l("li"),ta=o("Read "),Re=l("a"),ra=o("Developing a language"),oa=o(" to see how you can create your own language."),aa=u(),he=l("li"),la=o("Have a look at the "),Ye=l("a"),na=o("structure"),sa=o(" of the generated project."),ia=u(),ce=l("li"),fa=o("See what the different options there are for calling the "),We=l("a"),ha=o("ProjectIt generator"),ca=o("."),this.h()},l(t){c=n(t,"H1",{});var f=s(c);i=a(f,"Installing and Using ProjectIt"),f.forEach(r),_=p(t),v=n(t,"P",{});var ue=s(v);m=a(ue,"Be sure to have "),g=n(ue,"A",{href:!0,target:!0});var bt=s(g);ur=a(bt,"node.js"),bt.forEach(r),pr=a(ue," and"),ue.forEach(r),Pt=p(t),O=n(t,"A",{href:!0,target:!0});var yt=s(O);dr=a(yt,"yarn"),yt.forEach(r),kt=a(t,`
running. We are typically using the latest versions of all,
although older versions likely work just as well.
You could also try and use `),S=n(t,"A",{href:!0,target:!0});var $t=s(S);_r=a($t,"npm"),$t.forEach(r),Lt=a(t,` instead of yarn.
`),we=n(t,"P",{});var jt=s(we);mr=a(jt,`There are two ways to start with ProjectIt, either use our
Example project or use our Template project.`),jt.forEach(r),xt=p(t),Ee=n(t,"H2",{});var ua=s(Ee);gr=a(ua,"Start with the Example Project"),ua.forEach(r),Ct=p(t),be=n(t,"P",{});var pa=s(be);vr=a(pa,`The simplest manner to start working with ProjectIt is to clone the example project from github.
In the following the root of your project will be indicated with \u2019~\u2018.`),pa.forEach(r),Tt=p(t),b=n(t,"UL",{});var C=s(b);qe=n(C,"LI",{});var da=s(qe);P=n(da,"P",{});var Y=s(P);wr=a(Y,"Clone branch "),Be=n(Y,"CODE",{});var _a=s(Be);Er=a(_a,"master"),_a.forEach(r),br=a(Y," from "),B=n(Y,"A",{href:!0,target:!0});var ma=s(B);yr=a(ma,"https://github.com/projectit-org/ProjectIt-example"),ma.forEach(r),$r=a(Y,` in your preferred IDE.
(For an explanation of the content of the project see
`),ye=n(Y,"A",{href:!0});var ga=s(ye);jr=a(ga,"Project_Structure"),ga.forEach(r),Ir=a(Y,")."),Y.forEach(r),da.forEach(r),Pr=p(C),z=n(C,"LI",{});var Vt=s(z);ze=n(Vt,"P",{});var va=s(ze);kr=a(va,"Next, install all necessary packages by running:"),va.forEach(r),Lr=p(Vt),$e=n(Vt,"PRE",{class:!0});var ml=s($e);ml.forEach(r),Vt.forEach(r),xr=p(C),J=n(C,"LI",{});var Xt=s(J);Je=n(Xt,"P",{});var wa=s(Je);Cr=a(wa,"Run the generator and see the generated files appearing in the folder ~/src/picode:"),wa.forEach(r),Tr=p(Xt),je=n(Xt,"PRE",{class:!0});var gl=s(je);gl.forEach(r),Xt.forEach(r),Hr=p(C),K=n(C,"LI",{});var Zt=s(K);Ke=n(Zt,"P",{});var Ea=s(Ke);Or=a(Ea,"Start the server (note that anything that is saved in the editor will be stored in ~/modelstore):"),Ea.forEach(r),Sr=p(Zt),Ie=n(Zt,"PRE",{class:!0});var vl=s(Ie);vl.forEach(r),Zt.forEach(r),Dr=p(C),Q=n(C,"LI",{});var er=s(Q);Qe=n(er,"P",{});var ba=s(Qe);Ar=a(ba,"Open another (bash) terminal, and start the generated editor from it:"),ba.forEach(r),Mr=p(er),Pe=n(er,"PRE",{class:!0});var wl=s(Pe);wl.forEach(r),er.forEach(r),C.forEach(r),Ht=p(t),de(D.$$.fragment,t),Ot=p(t),ke=n(t,"UL",{});var ya=s(ke);Ve=n(ya,"LI",{});var $a=s(Ve);Nr=a($a,"Try out the editor"),$a.forEach(r),ya.forEach(r),St=p(t),de(A.$$.fragment,t),Dt=p(t),Le=n(t,"H2",{});var ja=s(Le);Ur=a(ja,"Start with the Template project"),ja.forEach(r),At=p(t),M=n(t,"P",{});var tr=s(M);Rr=a(tr,`Another way to start working with ProjectIt is to clone our template project from github. The template
project provides a shell for the generated editor that enables the user to work with multiple models and
`),xe=n(tr,"A",{href:!0});var Ia=s(xe);Yr=a(Ia,"model units"),Ia.forEach(r),Wr=a(tr,`.
In the following the root of the project will be indicated with \u2019~\u2018.`),tr.forEach(r),Mt=p(t),j=n(t,"UL",{});var W=s(j);Xe=n(W,"LI",{});var Pa=s(Xe);k=n(Pa,"P",{});var F=s(k);Fr=a(F,"Clone branch "),Ze=n(F,"CODE",{});var ka=s(Ze);Gr=a(ka,"master"),ka.forEach(r),qr=a(F," from "),V=n(F,"A",{href:!0,target:!0});var La=s(V);Br=a(La,"https://github.com/projectit-org/ProjectIt-template"),La.forEach(r),zr=a(F,`.
(For an explanation of the content of the project see
`),Ce=n(F,"A",{href:!0});var xa=s(Ce);Jr=a(xa,"Project_Structure"),xa.forEach(r),Kr=a(F,")."),F.forEach(r),Pa.forEach(r),Qr=p(W),X=n(W,"LI",{});var rr=s(X);et=n(rr,"P",{});var Ca=s(et);Vr=a(Ca,"Next, install all necessary packages by running:"),Ca.forEach(r),Xr=p(rr),Te=n(rr,"PRE",{class:!0});var El=s(Te);El.forEach(r),rr.forEach(r),Zr=p(W),tt=n(W,"LI",{});var Ta=s(tt);L=n(Ta,"P",{});var G=s(L);eo=a(G,"Create a folder for your language in "),rt=n(G,"CODE",{});var Ha=s(rt);to=a(Ha,"~/src"),Ha.forEach(r),ro=a(G,`, to hold the definition files for your language.
We usually call it `),ot=n(G,"EM",{});var Oa=s(ot);oo=a(Oa,"defs"),Oa.forEach(r),ao=a(G,", but any name will do. (Here the name "),at=n(G,"EM",{});var Sa=s(at);lo=a(Sa,"defs"),Sa.forEach(r),no=a(G," will be used.)"),G.forEach(r),Ta.forEach(r),so=p(W),lt=n(W,"LI",{});var Da=s(lt);$=n(Da,"P",{});var T=s($);io=a(T,`Create a language definition file which defines the structure of your language. The
extension of this file must be `),nt=n(T,"CODE",{});var Aa=s(nt);fo=a(Aa,".ast"),Aa.forEach(r),ho=a(T,`. You can, for instance, copy
`),st=n(T,"CODE",{});var Ma=s(st);co=a(Ma,"EntityLanguage.ast"),Ma.forEach(r),uo=a(T," from the ProjectIt example to your own "),it=n(T,"CODE",{});var Na=s(it);po=a(Na,"defs"),Na.forEach(r),_o=a(T,`-folder. Or, you can follow the
tutorial on `),He=n(T,"A",{href:!0});var Ua=s(He);mo=a(Ua,"language structure definition"),Ua.forEach(r),go=a(T,"."),T.forEach(r),Da.forEach(r),W.forEach(r),Nt=p(t),de(N.$$.fragment,t),Ut=p(t),Oe=n(t,"UL",{});var Ra=s(Oe);w=n(Ra,"LI",{});var y=s(w);vo=a(y,"Next, adjust the "),ft=n(y,"CODE",{});var Ya=s(ft);wo=a(Ya,"scripts"),Ya.forEach(r),Eo=a(y," entry in the "),ht=n(y,"EM",{});var Wa=s(ht);bo=a(Wa,"package.json"),Wa.forEach(r),yo=a(y," file. The "),ct=n(y,"CODE",{});var Fa=s(ct);$o=a(Fa,"generate"),Fa.forEach(r),jo=a(y,`
script should include your `),ut=n(y,"EM",{});var Ga=s(ut);Io=a(Ga,"defs"),Ga.forEach(r),Po=a(y,` folder as well as the folder where you want the
generated code to be stored.
In the following screenshot, we use `),pt=n(y,"CODE",{});var qa=s(pt);ko=a(qa,"~/src/defs"),qa.forEach(r),Lo=a(y," and "),dt=n(y,"CODE",{});var Ba=s(dt);xo=a(Ba,"~/src/picode"),Ba.forEach(r),Co=a(y,", respectively."),y.forEach(r),Ra.forEach(r),Rt=p(t),de(Z.$$.fragment,t),Yt=p(t),Se=n(t,"UL",{});var za=s(Se);ee=n(za,"LI",{});var or=s(ee);To=a(or,`Run the generator and see the generated files appearing in the folder where you
decided to store the generated code (in the screenshot we used `),_t=n(or,"CODE",{});var Ja=s(_t);Ho=a(Ja,"src/picode"),Ja.forEach(r),Oo=a(or,"):"),or.forEach(r),za.forEach(r),Wt=p(t),te=n(t,"PRE",{class:!0});var bl=s(te);bl.forEach(r),Ft=p(t),x=n(t,"UL",{});var Fe=s(x);re=n(Fe,"LI",{});var ar=s(re);oe=n(ar,"P",{});var lr=s(oe);So=a(lr,`Adjust the configuration of the web application by changing the two lines in the file
`),mt=n(lr,"CODE",{});var Ka=s(mt);Do=a(Ka,"~/src/webapp/WebappConfiguration.ts"),Ka.forEach(r),Ao=a(lr,"."),lr.forEach(r),Mo=p(ar),de(ae.$$.fragment,ar),ar.forEach(r),No=p(Fe),le=n(Fe,"LI",{});var nr=s(le);ne=n(nr,"P",{});var sr=s(ne);Uo=a(sr,"Start the server (note that anything that is saved in the editor will be stored in "),gt=n(sr,"CODE",{});var Qa=s(gt);Ro=a(Qa,"~/modelstore"),Qa.forEach(r),Yo=a(sr,"):"),sr.forEach(r),Wo=p(nr),De=n(nr,"PRE",{class:!0});var yl=s(De);yl.forEach(r),nr.forEach(r),Fo=p(Fe),se=n(Fe,"LI",{});var ir=s(se);vt=n(ir,"P",{});var Va=s(vt);Go=a(Va,"Open another (bash) terminal, and start the generated editor from it:"),Va.forEach(r),qo=p(ir),Ae=n(ir,"PRE",{class:!0});var $l=s(Ae);$l.forEach(r),ir.forEach(r),Fe.forEach(r),Gt=p(t),de(U.$$.fragment,t),qt=p(t),Me=n(t,"UL",{});var Xa=s(Me);wt=n(Xa,"LI",{});var Za=s(wt);Bo=a(Za,"Try out the editor"),Za.forEach(r),Xa.forEach(r),Bt=p(t),de(R.$$.fragment,t),zt=p(t),Ne=n(t,"H2",{});var el=s(Ne);zo=a(el,"Next steps"),el.forEach(r),Jt=p(t),Ue=n(t,"P",{});var tl=s(Ue);Jo=a(tl,"Now you are ready for a closer look at ProjectIt. You can for instance:"),tl.forEach(r),Kt=p(t),I=n(t,"UL",{});var q=s(I);H=n(q,"LI",{});var Ge=s(H);Ko=a(Ge,`Have a look at how the example language is defined by browsing through the language definition
files in the `),ie=n(Ge,"A",{href:!0,target:!0});var rl=s(ie);Qo=a(rl,"ProjectIt Example project"),rl.forEach(r),Vo=a(Ge,`.
You can find them in `),Et=n(Ge,"CODE",{});var ol=s(Et);Xo=a(ol,"~/src/defs"),ol.forEach(r),Zo=a(Ge,"."),Ge.forEach(r),ea=p(q),fe=n(q,"LI",{});var fr=s(fe);ta=a(fr,"Read "),Re=n(fr,"A",{href:!0});var al=s(Re);ra=a(al,"Developing a language"),al.forEach(r),oa=a(fr," to see how you can create your own language."),fr.forEach(r),aa=p(q),he=n(q,"LI",{});var hr=s(he);la=a(hr,"Have a look at the "),Ye=n(hr,"A",{href:!0});var ll=s(Ye);na=a(ll,"structure"),ll.forEach(r),sa=a(hr," of the generated project."),hr.forEach(r),ia=p(q),ce=n(q,"LI",{});var cr=s(ce);fa=a(cr,"See what the different options there are for calling the "),We=n(cr,"A",{href:!0});var nl=s(We);ha=a(nl,"ProjectIt generator"),nl.forEach(r),ca=a(cr,"."),cr.forEach(r),q.forEach(r),this.h()},h(){d(g,"href","https://nodejs.org/"),d(g,"target","_blank"),d(O,"href","https://yarnpkg.com/"),d(O,"target","_blank"),d(S,"href","https://www.npmjs.com/"),d(S,"target","_blank"),d(B,"href","https://github.com/projectit-org/ProjectIt-example"),d(B,"target","_blank"),d(ye,"href","/020_Getting_Started/020_Project_Structure"),d($e,"class","language-bash"),d(je,"class","language-bash"),d(Ie,"class","language-bash"),d(Pe,"class","language-bash"),d(xe,"href","/010_Intro/030_Models_and_Model_Units"),d(V,"href","https://github.com/projectit-org/ProjectIt-template"),d(V,"target","_blank"),d(Ce,"href","/020_Getting_Started/020_Project_Structure"),d(Te,"class","language-bash"),d(He,"href","/030_Developing_a_Language/010_Default_Level"),d(te,"class","language-bash"),d(De,"class","language-bash"),d(Ae,"class","language-bash"),d(ie,"href","https://github.com/projectit-org/ProjectIt-example"),d(ie,"target","_blank"),d(Re,"href","/030_Developing_a_Language"),d(Ye,"href","/020_Getting_Started/020_Project_Structure"),d(We,"href","/020_Getting_Started/030_Calling_the_Generator")},m(t,f){h(t,c,f),e(c,i),h(t,_,f),h(t,v,f),e(v,m),e(v,g),e(g,ur),e(v,pr),h(t,Pt,f),h(t,O,f),e(O,dr),h(t,kt,f),h(t,S,f),e(S,_r),h(t,Lt,f),h(t,we,f),e(we,mr),h(t,xt,f),h(t,Ee,f),e(Ee,gr),h(t,Ct,f),h(t,be,f),e(be,vr),h(t,Tt,f),h(t,b,f),e(b,qe),e(qe,P),e(P,wr),e(P,Be),e(Be,Er),e(P,br),e(P,B),e(B,yr),e(P,$r),e(P,ye),e(ye,jr),e(P,Ir),e(b,Pr),e(b,z),e(z,ze),e(ze,kr),e(z,Lr),e(z,$e),$e.innerHTML=il,e(b,xr),e(b,J),e(J,Je),e(Je,Cr),e(J,Tr),e(J,je),je.innerHTML=fl,e(b,Hr),e(b,K),e(K,Ke),e(Ke,Or),e(K,Sr),e(K,Ie),Ie.innerHTML=hl,e(b,Dr),e(b,Q),e(Q,Qe),e(Qe,Ar),e(Q,Mr),e(Q,Pe),Pe.innerHTML=cl,h(t,Ht,f),_e(D,t,f),h(t,Ot,f),h(t,ke,f),e(ke,Ve),e(Ve,Nr),h(t,St,f),_e(A,t,f),h(t,Dt,f),h(t,Le,f),e(Le,Ur),h(t,At,f),h(t,M,f),e(M,Rr),e(M,xe),e(xe,Yr),e(M,Wr),h(t,Mt,f),h(t,j,f),e(j,Xe),e(Xe,k),e(k,Fr),e(k,Ze),e(Ze,Gr),e(k,qr),e(k,V),e(V,Br),e(k,zr),e(k,Ce),e(Ce,Jr),e(k,Kr),e(j,Qr),e(j,X),e(X,et),e(et,Vr),e(X,Xr),e(X,Te),Te.innerHTML=ul,e(j,Zr),e(j,tt),e(tt,L),e(L,eo),e(L,rt),e(rt,to),e(L,ro),e(L,ot),e(ot,oo),e(L,ao),e(L,at),e(at,lo),e(L,no),e(j,so),e(j,lt),e(lt,$),e($,io),e($,nt),e(nt,fo),e($,ho),e($,st),e(st,co),e($,uo),e($,it),e(it,po),e($,_o),e($,He),e(He,mo),e($,go),h(t,Nt,f),_e(N,t,f),h(t,Ut,f),h(t,Oe,f),e(Oe,w),e(w,vo),e(w,ft),e(ft,wo),e(w,Eo),e(w,ht),e(ht,bo),e(w,yo),e(w,ct),e(ct,$o),e(w,jo),e(w,ut),e(ut,Io),e(w,Po),e(w,pt),e(pt,ko),e(w,Lo),e(w,dt),e(dt,xo),e(w,Co),h(t,Rt,f),_e(Z,t,f),h(t,Yt,f),h(t,Se,f),e(Se,ee),e(ee,To),e(ee,_t),e(_t,Ho),e(ee,Oo),h(t,Wt,f),h(t,te,f),te.innerHTML=pl,h(t,Ft,f),h(t,x,f),e(x,re),e(re,oe),e(oe,So),e(oe,mt),e(mt,Do),e(oe,Ao),e(re,Mo),_e(ae,re,null),e(x,No),e(x,le),e(le,ne),e(ne,Uo),e(ne,gt),e(gt,Ro),e(ne,Yo),e(le,Wo),e(le,De),De.innerHTML=dl,e(x,Fo),e(x,se),e(se,vt),e(vt,Go),e(se,qo),e(se,Ae),Ae.innerHTML=_l,h(t,Gt,f),_e(U,t,f),h(t,qt,f),h(t,Me,f),e(Me,wt),e(wt,Bo),h(t,Bt,f),_e(R,t,f),h(t,zt,f),h(t,Ne,f),e(Ne,zo),h(t,Jt,f),h(t,Ue,f),e(Ue,Jo),h(t,Kt,f),h(t,I,f),e(I,H),e(H,Ko),e(H,ie),e(ie,Qo),e(H,Vo),e(H,Et),e(Et,Xo),e(H,Zo),e(I,ea),e(I,fe),e(fe,ta),e(fe,Re),e(Re,ra),e(fe,oa),e(I,aa),e(I,he),e(he,la),e(he,Ye),e(Ye,na),e(he,sa),e(I,ia),e(I,ce),e(ce,fa),e(ce,We),e(We,ha),e(ce,ca),Qt=!0},p(t,[f]){const ue={};f&1&&(ue.$$scope={dirty:f,ctx:t}),D.$set(ue);const bt={};f&1&&(bt.$$scope={dirty:f,ctx:t}),A.$set(bt);const yt={};f&1&&(yt.$$scope={dirty:f,ctx:t}),N.$set(yt);const $t={};f&1&&($t.$$scope={dirty:f,ctx:t}),U.$set($t);const jt={};f&1&&(jt.$$scope={dirty:f,ctx:t}),R.$set(jt)},i(t){Qt||(me(D.$$.fragment,t),me(A.$$.fragment,t),me(N.$$.fragment,t),me(Z.$$.fragment,t),me(ae.$$.fragment,t),me(U.$$.fragment,t),me(R.$$.fragment,t),Qt=!0)},o(t){ge(D.$$.fragment,t),ge(A.$$.fragment,t),ge(N.$$.fragment,t),ge(Z.$$.fragment,t),ge(ae.$$.fragment,t),ge(U.$$.fragment,t),ge(R.$$.fragment,t),Qt=!1},d(t){t&&r(c),t&&r(_),t&&r(v),t&&r(Pt),t&&r(O),t&&r(kt),t&&r(S),t&&r(Lt),t&&r(we),t&&r(xt),t&&r(Ee),t&&r(Ct),t&&r(be),t&&r(Tt),t&&r(b),t&&r(Ht),ve(D,t),t&&r(Ot),t&&r(ke),t&&r(St),ve(A,t),t&&r(Dt),t&&r(Le),t&&r(At),t&&r(M),t&&r(Mt),t&&r(j),t&&r(Nt),ve(N,t),t&&r(Ut),t&&r(Oe),t&&r(Rt),ve(Z,t),t&&r(Yt),t&&r(Se),t&&r(Wt),t&&r(te),t&&r(Ft),t&&r(x),ve(ae),t&&r(Gt),ve(U,t),t&&r(qt),t&&r(Me),t&&r(Bt),ve(R,t),t&&r(zt),t&&r(Ne),t&&r(Jt),t&&r(Ue),t&&r(Kt),t&&r(I)}}}class Fl extends jl{constructor(c){super();Il(this,c,null,Ml,Pl,{})}}export{Fl as default};
