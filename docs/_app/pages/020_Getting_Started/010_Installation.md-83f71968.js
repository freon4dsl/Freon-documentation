import{S as jl,i as Il,s as Pl,e as l,t as o,k as u,j as de,c as n,a as s,g as a,d as r,n as p,m as _e,b as d,f as c,F as e,o as ge,x as me,u as ve,v as we}from"../../chunks/vendor-0216fdcb.js";import{N as It}from"../../chunks/Note-1a08578a.js";import{F as sl}from"../../chunks/Figure-017955ce.js";/* empty css                                                      *//* empty css                                                        */function kl(E){let h;return{c(){h=o("Open browser at localhost")},l(i){h=a(i,"Open browser at localhost")},m(i,_){c(i,h,_)},d(i){i&&r(h)}}}function Ll(E){let h,i,_,v;return{c(){h=o("The last command opens your preferred browser with the generated editor for the language `Entity` on\n`"),i=l("a"),_=o("http://localhost:3000/"),v=o(`\`. If Chrome is not
your preferred browser, please open the above page in Chrome, because we cannot
ensure that the editor functions as it should in other browsers."`),this.h()},l(g){h=a(g,"The last command opens your preferred browser with the generated editor for the language `Entity` on\n`"),i=n(g,"A",{href:!0,target:!0});var m=s(i);_=a(m,"http://localhost:3000/"),m.forEach(r),v=a(g,`\`. If Chrome is not
your preferred browser, please open the above page in Chrome, because we cannot
ensure that the editor functions as it should in other browsers."`),this.h()},h(){d(i,"href","http://localhost:3000/"),d(i,"target","_blank")},m(g,m){c(g,h,m),c(g,i,m),e(i,_),c(g,v,m)},d(g){g&&r(h),g&&r(i),g&&r(v)}}}function xl(E){let h;return{c(){h=o("Use Help Menu")},l(i){h=a(i,"Use Help Menu")},m(i,_){c(i,h,_)},d(i){i&&r(h)}}}function Cl(E){let h;return{c(){h=o("If you are having trouble using the editor, have a look at the key-bindings under the **Help* menu.")},l(i){h=a(i,"If you are having trouble using the editor, have a look at the key-bindings under the **Help* menu.")},m(i,_){c(i,h,_)},d(i){i&&r(h)}}}function Tl(E){let h;return{c(){h=o("Only the language structure is required")},l(i){h=a(i,"Only the language structure is required")},m(i,_){c(i,h,_)},d(i){i&&r(h)}}}function Hl(E){let h;return{c(){h=o(`To start, you only need to define the language structure,
    defaults will be generated for the editor, scoper, typer, and validator. This is called the first
    level of customization.`)},l(i){h=a(i,`To start, you only need to define the language structure,
    defaults will be generated for the editor, scoper, typer, and validator. This is called the first
    level of customization.`)},m(i,_){c(i,h,_)},d(i){i&&r(h)}}}function Ol(E){let h;return{c(){h=o("Open browser at localhost")},l(i){h=a(i,"Open browser at localhost")},m(i,_){c(i,h,_)},d(i){i&&r(h)}}}function Sl(E){let h,i,_,v;return{c(){h=o("The last command opens your preferred browser with the generated editor for the language\n    `Entity` on `"),i=l("a"),_=o("http://localhost:3000/"),v=o(`\`. 
    If Chrome is not your preferred browser, please open the above page in Chrome, because we 
    cannot ensure that the editor functions as it should in other browsers.`),this.h()},l(g){h=a(g,"The last command opens your preferred browser with the generated editor for the language\n    `Entity` on `"),i=n(g,"A",{href:!0,target:!0});var m=s(i);_=a(m,"http://localhost:3000/"),m.forEach(r),v=a(g,`\`. 
    If Chrome is not your preferred browser, please open the above page in Chrome, because we 
    cannot ensure that the editor functions as it should in other browsers.`),this.h()},h(){d(i,"href","http://localhost:3000/"),d(i,"target","_blank")},m(g,m){c(g,h,m),c(g,i,m),e(i,_),c(g,v,m)},d(g){g&&r(h),g&&r(i),g&&r(v)}}}function Dl(E){let h;return{c(){h=o("Use Help Menu")},l(i){h=a(i,"Use Help Menu")},m(i,_){c(i,h,_)},d(i){i&&r(h)}}}function Al(E){let h;return{c(){h=o("If you are having trouble using the editor, have a look at the key-bindings under the **Help* menu.")},l(i){h=a(i,"If you are having trouble using the editor, have a look at the key-bindings under the **Help* menu.")},m(i,_){c(i,h,_)},d(i){i&&r(h)}}}function Ml(E){let h,i,_,v,g,m,cr,ur,Pt,O,pr,kt,S,dr,Lt,Ee,_r,xt,be,gr,Ct,ye,mr,Tt,b,qe,k,vr,ze,wr,Er,B,br,yr,$e,$r,jr,Ir,J,Be,Pr,kr,je,il='<code class="language-bash"><span class="token function">yarn</span> <span class="token function">install</span></code>',Lr,K,Je,xr,Cr,Ie,fl='<code class="language-bash"><span class="token function">yarn</span> generate</code>',Tr,Q,Ke,Hr,Or,Pe,hl='<code class="language-bash"><span class="token function">yarn</span> model-server</code>',Sr,V,Qe,Dr,Ar,ke,cl='<code class="language-bash"><span class="token function">yarn</span> start</code>',Ht,D,Ot,Le,Ve,Mr,St,A,Dt,xe,Nr,At,M,Rr,Ce,Ur,Fr,Mt,j,Xe,L,Yr,Ze,Wr,Gr,X,qr,zr,Te,Br,Jr,Kr,Z,et,Qr,Vr,He,ul='<code class="language-bash"><span class="token function">yarn</span> <span class="token function">install</span></code>',Xr,tt,x,Zr,rt,eo,to,ot,ro,oo,at,ao,lo,no,lt,$,so,nt,io,fo,st,ho,co,it,uo,po,Oe,_o,go,Nt,N,Rt,Se,w,mo,ft,vo,wo,ht,Eo,bo,ct,yo,$o,ut,jo,Io,pt,Po,ko,dt,Lo,xo,Ut,ee,Ft,I,te,re,Co,_t,To,Ho,Oo,De,pl=`<code class="language-bash"><span class="token function">yarn</span> generate
</code>`,So,oe,ae,Do,gt,Ao,Mo,No,le,Ro,ne,se,Uo,mt,Fo,Yo,Wo,Ae,dl='<code class="language-bash"><span class="token function">yarn</span> model-server</code>',Go,ie,vt,qo,zo,Me,_l='<code class="language-bash"><span class="token function">yarn</span> start</code>',Yt,R,Wt,Ne,wt,Bo,Gt,U,qt,Re,Jo,zt,Ue,Ko,Bt,P,H,Qo,fe,Vo,Xo,Et,Zo,ea,ta,he,ra,Fe,oa,aa,la,ce,na,Ye,sa,ia,fa,ue,ha,We,ca,ua,Jt;return D=new It({props:{$$slots:{content:[Ll],header:[kl]},$$scope:{ctx:E}}}),A=new It({props:{$$slots:{content:[Cl],header:[xl]},$$scope:{ctx:E}}}),N=new It({props:{$$slots:{content:[Hl],header:[Tl]},$$scope:{ctx:E}}}),ee=new sl({props:{imageName:"packagejsonadjustment.png",caption:"Screenshot of package.json",figureNumber:1}}),le=new sl({props:{imageName:"webappconfiguration.png",caption:"Screenshot of WebappConfiguration",figureNumber:2}}),R=new It({props:{$$slots:{content:[Sl],header:[Ol]},$$scope:{ctx:E}}}),U=new It({props:{$$slots:{content:[Al],header:[Dl]},$$scope:{ctx:E}}}),{c(){h=l("h1"),i=o("Installing and Using ProjectIt"),_=u(),v=l("p"),g=o("Be sure to have "),m=l("a"),cr=o("node.js"),ur=o(" and"),Pt=u(),O=l("a"),pr=o("yarn"),kt=o(`
running. We are typically using the latest versions of all,
although older versions likely work just as well.
You could also try and use `),S=l("a"),dr=o("npm"),Lt=o(` instead of yarn.
`),Ee=l("p"),_r=o(`There are two ways to start with ProjectIt, either use our
Example project or use our Template project.`),xt=u(),be=l("h2"),gr=o("Start with the Example Project"),Ct=u(),ye=l("p"),mr=o(`The simplest manner to start working with ProjectIt is to clone the example project from github.
In the following the root of your project will be indicated with \u2019~\u2018.`),Tt=u(),b=l("ul"),qe=l("li"),k=l("p"),vr=o("Clone branch "),ze=l("code"),wr=o("master"),Er=o(" from "),B=l("a"),br=o("https://github.com/projectit-org/ProjectIt-example"),yr=o(` in your preferred IDE.
(For an explanation of the content of the project see
`),$e=l("a"),$r=o("Project_Structure"),jr=o(")."),Ir=u(),J=l("li"),Be=l("p"),Pr=o("Next, install all necessary packages by running:"),kr=u(),je=l("pre"),Lr=u(),K=l("li"),Je=l("p"),xr=o("Run the generator and see the generated files appearing in the folder ~/src/picode:"),Cr=u(),Ie=l("pre"),Tr=u(),Q=l("li"),Ke=l("p"),Hr=o("Start the server (note that anything that is saved in the editor will be stored in ~/modelstore):"),Or=u(),Pe=l("pre"),Sr=u(),V=l("li"),Qe=l("p"),Dr=o("Open another (bash) terminal, and start the generated editor from it:"),Ar=u(),ke=l("pre"),Ht=u(),de(D.$$.fragment),Ot=u(),Le=l("ul"),Ve=l("li"),Mr=o("Try out the editor"),St=u(),de(A.$$.fragment),Dt=u(),xe=l("h2"),Nr=o("Start with the Template project"),At=u(),M=l("p"),Rr=o(`Another way to start working with ProjectIt is to clone our template project from github. The template
project provides a shell for the generated editor that enables the user to work with multiple models and
`),Ce=l("a"),Ur=o("model units"),Fr=o(`.
In the following the root of the project will be indicated with \u2019~\u2018.`),Mt=u(),j=l("ul"),Xe=l("li"),L=l("p"),Yr=o("Clone branch "),Ze=l("code"),Wr=o("master"),Gr=o(" from "),X=l("a"),qr=o("https://github.com/projectit-org/ProjectIt-template"),zr=o(`.
(For an explanation of the content of the project see
`),Te=l("a"),Br=o("Project_Structure"),Jr=o(")."),Kr=u(),Z=l("li"),et=l("p"),Qr=o("Next, install all necessary packages by running:"),Vr=u(),He=l("pre"),Xr=u(),tt=l("li"),x=l("p"),Zr=o("Create a folder for your language in "),rt=l("code"),eo=o("~/src"),to=o(`, to hold the definition files for your language.
We usually call it `),ot=l("em"),ro=o("defs"),oo=o(", but any name will do. (Here the name "),at=l("em"),ao=o("defs"),lo=o(" will be used.)"),no=u(),lt=l("li"),$=l("p"),so=o(`Create a language definition file which defines the structure of your language. The
extension of this file must be `),nt=l("code"),io=o(".ast"),fo=o(`. You can, for instance, copy
`),st=l("code"),ho=o("EntityLanguage.ast"),co=o(" from the ProjectIt example to your own "),it=l("code"),uo=o("defs"),po=o(`-folder. Or, you can follow the
tutorial on `),Oe=l("a"),_o=o("language structure definition"),go=o("."),Nt=u(),de(N.$$.fragment),Rt=u(),Se=l("ul"),w=l("li"),mo=o("Next, adjust the "),ft=l("code"),vo=o("scripts"),wo=o(" entry in the "),ht=l("em"),Eo=o("package.json"),bo=o(" file. The "),ct=l("code"),yo=o("generate"),$o=o(`
script should include your `),ut=l("em"),jo=o("defs"),Io=o(` folder as well as the folder where you want the
generated code to be stored.
In the following screenshot, we use `),pt=l("code"),Po=o("~/src/defs"),ko=o(" and "),dt=l("code"),Lo=o("~/src/picode"),xo=o(", respectively."),Ut=u(),de(ee.$$.fragment),Ft=u(),I=l("ul"),te=l("li"),re=l("p"),Co=o(`Run the generator and see the generated files appearing in the folder where you
decided to store the generated code (in the screenshot we used `),_t=l("code"),To=o("src/picode"),Ho=o("):"),Oo=u(),De=l("pre"),So=u(),oe=l("li"),ae=l("p"),Do=o(`Adjust the configuration of the web application by changing the two lines in the file
`),gt=l("code"),Ao=o("~/src/webapp/WebappConfiguration.ts"),Mo=o("."),No=u(),de(le.$$.fragment),Ro=u(),ne=l("li"),se=l("p"),Uo=o("Start the server (note that anything that is saved in the editor will be stored in "),mt=l("code"),Fo=o("~/modelstore"),Yo=o("):"),Wo=u(),Ae=l("pre"),Go=u(),ie=l("li"),vt=l("p"),qo=o("Open another (bash) terminal, and start the generated editor from it:"),zo=u(),Me=l("pre"),Yt=u(),de(R.$$.fragment),Wt=u(),Ne=l("ul"),wt=l("li"),Bo=o("Try out the editor"),Gt=u(),de(U.$$.fragment),qt=u(),Re=l("h2"),Jo=o("Next steps"),zt=u(),Ue=l("p"),Ko=o("Now you are ready for a closer look at ProjectIt. You can for instance:"),Bt=u(),P=l("ul"),H=l("li"),Qo=o(`Have a look at how the example language is defined by browsing through the language definition
files in the `),fe=l("a"),Vo=o("ProjectIt Example project"),Xo=o(`.
You can find them in `),Et=l("code"),Zo=o("~/src/defs"),ea=o("."),ta=u(),he=l("li"),ra=o("Read "),Fe=l("a"),oa=o("Developing a language"),aa=o(" to see how you can create your own language."),la=u(),ce=l("li"),na=o("Have a look at the "),Ye=l("a"),sa=o("structure"),ia=o(" of the generated project."),fa=u(),ue=l("li"),ha=o("See what the different options there are for calling the "),We=l("a"),ca=o("ProjectIt generator"),ua=o("."),this.h()},l(t){h=n(t,"H1",{});var f=s(h);i=a(f,"Installing and Using ProjectIt"),f.forEach(r),_=p(t),v=n(t,"P",{});var pe=s(v);g=a(pe,"Be sure to have "),m=n(pe,"A",{href:!0,target:!0});var bt=s(m);cr=a(bt,"node.js"),bt.forEach(r),ur=a(pe," and"),pe.forEach(r),Pt=p(t),O=n(t,"A",{href:!0,target:!0});var yt=s(O);pr=a(yt,"yarn"),yt.forEach(r),kt=a(t,`
running. We are typically using the latest versions of all,
although older versions likely work just as well.
You could also try and use `),S=n(t,"A",{href:!0,target:!0});var $t=s(S);dr=a($t,"npm"),$t.forEach(r),Lt=a(t,` instead of yarn.
`),Ee=n(t,"P",{});var jt=s(Ee);_r=a(jt,`There are two ways to start with ProjectIt, either use our
Example project or use our Template project.`),jt.forEach(r),xt=p(t),be=n(t,"H2",{});var pa=s(be);gr=a(pa,"Start with the Example Project"),pa.forEach(r),Ct=p(t),ye=n(t,"P",{});var da=s(ye);mr=a(da,`The simplest manner to start working with ProjectIt is to clone the example project from github.
In the following the root of your project will be indicated with \u2019~\u2018.`),da.forEach(r),Tt=p(t),b=n(t,"UL",{});var C=s(b);qe=n(C,"LI",{});var _a=s(qe);k=n(_a,"P",{});var F=s(k);vr=a(F,"Clone branch "),ze=n(F,"CODE",{});var ga=s(ze);wr=a(ga,"master"),ga.forEach(r),Er=a(F," from "),B=n(F,"A",{href:!0,target:!0});var ma=s(B);br=a(ma,"https://github.com/projectit-org/ProjectIt-example"),ma.forEach(r),yr=a(F,` in your preferred IDE.
(For an explanation of the content of the project see
`),$e=n(F,"A",{href:!0});var va=s($e);$r=a(va,"Project_Structure"),va.forEach(r),jr=a(F,")."),F.forEach(r),_a.forEach(r),Ir=p(C),J=n(C,"LI",{});var Kt=s(J);Be=n(Kt,"P",{});var wa=s(Be);Pr=a(wa,"Next, install all necessary packages by running:"),wa.forEach(r),kr=p(Kt),je=n(Kt,"PRE",{class:!0});var gl=s(je);gl.forEach(r),Kt.forEach(r),Lr=p(C),K=n(C,"LI",{});var Qt=s(K);Je=n(Qt,"P",{});var Ea=s(Je);xr=a(Ea,"Run the generator and see the generated files appearing in the folder ~/src/picode:"),Ea.forEach(r),Cr=p(Qt),Ie=n(Qt,"PRE",{class:!0});var ml=s(Ie);ml.forEach(r),Qt.forEach(r),Tr=p(C),Q=n(C,"LI",{});var Vt=s(Q);Ke=n(Vt,"P",{});var ba=s(Ke);Hr=a(ba,"Start the server (note that anything that is saved in the editor will be stored in ~/modelstore):"),ba.forEach(r),Or=p(Vt),Pe=n(Vt,"PRE",{class:!0});var vl=s(Pe);vl.forEach(r),Vt.forEach(r),Sr=p(C),V=n(C,"LI",{});var Xt=s(V);Qe=n(Xt,"P",{});var ya=s(Qe);Dr=a(ya,"Open another (bash) terminal, and start the generated editor from it:"),ya.forEach(r),Ar=p(Xt),ke=n(Xt,"PRE",{class:!0});var wl=s(ke);wl.forEach(r),Xt.forEach(r),C.forEach(r),Ht=p(t),_e(D.$$.fragment,t),Ot=p(t),Le=n(t,"UL",{});var $a=s(Le);Ve=n($a,"LI",{});var ja=s(Ve);Mr=a(ja,"Try out the editor"),ja.forEach(r),$a.forEach(r),St=p(t),_e(A.$$.fragment,t),Dt=p(t),xe=n(t,"H2",{});var Ia=s(xe);Nr=a(Ia,"Start with the Template project"),Ia.forEach(r),At=p(t),M=n(t,"P",{});var Zt=s(M);Rr=a(Zt,`Another way to start working with ProjectIt is to clone our template project from github. The template
project provides a shell for the generated editor that enables the user to work with multiple models and
`),Ce=n(Zt,"A",{href:!0});var Pa=s(Ce);Ur=a(Pa,"model units"),Pa.forEach(r),Fr=a(Zt,`.
In the following the root of the project will be indicated with \u2019~\u2018.`),Zt.forEach(r),Mt=p(t),j=n(t,"UL",{});var Y=s(j);Xe=n(Y,"LI",{});var ka=s(Xe);L=n(ka,"P",{});var W=s(L);Yr=a(W,"Clone branch "),Ze=n(W,"CODE",{});var La=s(Ze);Wr=a(La,"master"),La.forEach(r),Gr=a(W," from "),X=n(W,"A",{href:!0,target:!0});var xa=s(X);qr=a(xa,"https://github.com/projectit-org/ProjectIt-template"),xa.forEach(r),zr=a(W,`.
(For an explanation of the content of the project see
`),Te=n(W,"A",{href:!0});var Ca=s(Te);Br=a(Ca,"Project_Structure"),Ca.forEach(r),Jr=a(W,")."),W.forEach(r),ka.forEach(r),Kr=p(Y),Z=n(Y,"LI",{});var er=s(Z);et=n(er,"P",{});var Ta=s(et);Qr=a(Ta,"Next, install all necessary packages by running:"),Ta.forEach(r),Vr=p(er),He=n(er,"PRE",{class:!0});var El=s(He);El.forEach(r),er.forEach(r),Xr=p(Y),tt=n(Y,"LI",{});var Ha=s(tt);x=n(Ha,"P",{});var G=s(x);Zr=a(G,"Create a folder for your language in "),rt=n(G,"CODE",{});var Oa=s(rt);eo=a(Oa,"~/src"),Oa.forEach(r),to=a(G,`, to hold the definition files for your language.
We usually call it `),ot=n(G,"EM",{});var Sa=s(ot);ro=a(Sa,"defs"),Sa.forEach(r),oo=a(G,", but any name will do. (Here the name "),at=n(G,"EM",{});var Da=s(at);ao=a(Da,"defs"),Da.forEach(r),lo=a(G," will be used.)"),G.forEach(r),Ha.forEach(r),no=p(Y),lt=n(Y,"LI",{});var Aa=s(lt);$=n(Aa,"P",{});var T=s($);so=a(T,`Create a language definition file which defines the structure of your language. The
extension of this file must be `),nt=n(T,"CODE",{});var Ma=s(nt);io=a(Ma,".ast"),Ma.forEach(r),fo=a(T,`. You can, for instance, copy
`),st=n(T,"CODE",{});var Na=s(st);ho=a(Na,"EntityLanguage.ast"),Na.forEach(r),co=a(T," from the ProjectIt example to your own "),it=n(T,"CODE",{});var Ra=s(it);uo=a(Ra,"defs"),Ra.forEach(r),po=a(T,`-folder. Or, you can follow the
tutorial on `),Oe=n(T,"A",{href:!0});var Ua=s(Oe);_o=a(Ua,"language structure definition"),Ua.forEach(r),go=a(T,"."),T.forEach(r),Aa.forEach(r),Y.forEach(r),Nt=p(t),_e(N.$$.fragment,t),Rt=p(t),Se=n(t,"UL",{});var Fa=s(Se);w=n(Fa,"LI",{});var y=s(w);mo=a(y,"Next, adjust the "),ft=n(y,"CODE",{});var Ya=s(ft);vo=a(Ya,"scripts"),Ya.forEach(r),wo=a(y," entry in the "),ht=n(y,"EM",{});var Wa=s(ht);Eo=a(Wa,"package.json"),Wa.forEach(r),bo=a(y," file. The "),ct=n(y,"CODE",{});var Ga=s(ct);yo=a(Ga,"generate"),Ga.forEach(r),$o=a(y,`
script should include your `),ut=n(y,"EM",{});var qa=s(ut);jo=a(qa,"defs"),qa.forEach(r),Io=a(y,` folder as well as the folder where you want the
generated code to be stored.
In the following screenshot, we use `),pt=n(y,"CODE",{});var za=s(pt);Po=a(za,"~/src/defs"),za.forEach(r),ko=a(y," and "),dt=n(y,"CODE",{});var Ba=s(dt);Lo=a(Ba,"~/src/picode"),Ba.forEach(r),xo=a(y,", respectively."),y.forEach(r),Fa.forEach(r),Ut=p(t),_e(ee.$$.fragment,t),Ft=p(t),I=n(t,"UL",{});var q=s(I);te=n(q,"LI",{});var tr=s(te);re=n(tr,"P",{});var rr=s(re);Co=a(rr,`Run the generator and see the generated files appearing in the folder where you
decided to store the generated code (in the screenshot we used `),_t=n(rr,"CODE",{});var Ja=s(_t);To=a(Ja,"src/picode"),Ja.forEach(r),Ho=a(rr,"):"),rr.forEach(r),Oo=p(tr),De=n(tr,"PRE",{class:!0});var bl=s(De);bl.forEach(r),tr.forEach(r),So=p(q),oe=n(q,"LI",{});var or=s(oe);ae=n(or,"P",{});var ar=s(ae);Do=a(ar,`Adjust the configuration of the web application by changing the two lines in the file
`),gt=n(ar,"CODE",{});var Ka=s(gt);Ao=a(Ka,"~/src/webapp/WebappConfiguration.ts"),Ka.forEach(r),Mo=a(ar,"."),ar.forEach(r),No=p(or),_e(le.$$.fragment,or),or.forEach(r),Ro=p(q),ne=n(q,"LI",{});var lr=s(ne);se=n(lr,"P",{});var nr=s(se);Uo=a(nr,"Start the server (note that anything that is saved in the editor will be stored in "),mt=n(nr,"CODE",{});var Qa=s(mt);Fo=a(Qa,"~/modelstore"),Qa.forEach(r),Yo=a(nr,"):"),nr.forEach(r),Wo=p(lr),Ae=n(lr,"PRE",{class:!0});var yl=s(Ae);yl.forEach(r),lr.forEach(r),Go=p(q),ie=n(q,"LI",{});var sr=s(ie);vt=n(sr,"P",{});var Va=s(vt);qo=a(Va,"Open another (bash) terminal, and start the generated editor from it:"),Va.forEach(r),zo=p(sr),Me=n(sr,"PRE",{class:!0});var $l=s(Me);$l.forEach(r),sr.forEach(r),q.forEach(r),Yt=p(t),_e(R.$$.fragment,t),Wt=p(t),Ne=n(t,"UL",{});var Xa=s(Ne);wt=n(Xa,"LI",{});var Za=s(wt);Bo=a(Za,"Try out the editor"),Za.forEach(r),Xa.forEach(r),Gt=p(t),_e(U.$$.fragment,t),qt=p(t),Re=n(t,"H2",{});var el=s(Re);Jo=a(el,"Next steps"),el.forEach(r),zt=p(t),Ue=n(t,"P",{});var tl=s(Ue);Ko=a(tl,"Now you are ready for a closer look at ProjectIt. You can for instance:"),tl.forEach(r),Bt=p(t),P=n(t,"UL",{});var z=s(P);H=n(z,"LI",{});var Ge=s(H);Qo=a(Ge,`Have a look at how the example language is defined by browsing through the language definition
files in the `),fe=n(Ge,"A",{href:!0,target:!0});var rl=s(fe);Vo=a(rl,"ProjectIt Example project"),rl.forEach(r),Xo=a(Ge,`.
You can find them in `),Et=n(Ge,"CODE",{});var ol=s(Et);Zo=a(ol,"~/src/defs"),ol.forEach(r),ea=a(Ge,"."),Ge.forEach(r),ta=p(z),he=n(z,"LI",{});var ir=s(he);ra=a(ir,"Read "),Fe=n(ir,"A",{href:!0});var al=s(Fe);oa=a(al,"Developing a language"),al.forEach(r),aa=a(ir," to see how you can create your own language."),ir.forEach(r),la=p(z),ce=n(z,"LI",{});var fr=s(ce);na=a(fr,"Have a look at the "),Ye=n(fr,"A",{href:!0});var ll=s(Ye);sa=a(ll,"structure"),ll.forEach(r),ia=a(fr," of the generated project."),fr.forEach(r),fa=p(z),ue=n(z,"LI",{});var hr=s(ue);ha=a(hr,"See what the different options there are for calling the "),We=n(hr,"A",{href:!0});var nl=s(We);ca=a(nl,"ProjectIt generator"),nl.forEach(r),ua=a(hr,"."),hr.forEach(r),z.forEach(r),this.h()},h(){d(m,"href","https://nodejs.org/"),d(m,"target","_blank"),d(O,"href","https://yarnpkg.com/"),d(O,"target","_blank"),d(S,"href","https://www.npmjs.com/"),d(S,"target","_blank"),d(B,"href","https://github.com/projectit-org/ProjectIt-example"),d(B,"target","_blank"),d($e,"href","/020_Getting_Started/020_Project_Structure"),d(je,"class","language-bash"),d(Ie,"class","language-bash"),d(Pe,"class","language-bash"),d(ke,"class","language-bash"),d(Ce,"href","/010_Intro/030_Models_and_Model_Units"),d(X,"href","https://github.com/projectit-org/ProjectIt-template"),d(X,"target","_blank"),d(Te,"href","/020_Getting_Started/020_Project_Structure"),d(He,"class","language-bash"),d(Oe,"href","/030_Developing_a_Language/010_Default_Level"),d(De,"class","language-bash"),d(Ae,"class","language-bash"),d(Me,"class","language-bash"),d(fe,"href","https://github.com/projectit-org/ProjectIt-example"),d(fe,"target","_blank"),d(Fe,"href","/030_Developing_a_Language"),d(Ye,"href","/020_Getting_Started/020_Project_Structure"),d(We,"href","/020_Getting_Started/030_Calling_the_Generator")},m(t,f){c(t,h,f),e(h,i),c(t,_,f),c(t,v,f),e(v,g),e(v,m),e(m,cr),e(v,ur),c(t,Pt,f),c(t,O,f),e(O,pr),c(t,kt,f),c(t,S,f),e(S,dr),c(t,Lt,f),c(t,Ee,f),e(Ee,_r),c(t,xt,f),c(t,be,f),e(be,gr),c(t,Ct,f),c(t,ye,f),e(ye,mr),c(t,Tt,f),c(t,b,f),e(b,qe),e(qe,k),e(k,vr),e(k,ze),e(ze,wr),e(k,Er),e(k,B),e(B,br),e(k,yr),e(k,$e),e($e,$r),e(k,jr),e(b,Ir),e(b,J),e(J,Be),e(Be,Pr),e(J,kr),e(J,je),je.innerHTML=il,e(b,Lr),e(b,K),e(K,Je),e(Je,xr),e(K,Cr),e(K,Ie),Ie.innerHTML=fl,e(b,Tr),e(b,Q),e(Q,Ke),e(Ke,Hr),e(Q,Or),e(Q,Pe),Pe.innerHTML=hl,e(b,Sr),e(b,V),e(V,Qe),e(Qe,Dr),e(V,Ar),e(V,ke),ke.innerHTML=cl,c(t,Ht,f),ge(D,t,f),c(t,Ot,f),c(t,Le,f),e(Le,Ve),e(Ve,Mr),c(t,St,f),ge(A,t,f),c(t,Dt,f),c(t,xe,f),e(xe,Nr),c(t,At,f),c(t,M,f),e(M,Rr),e(M,Ce),e(Ce,Ur),e(M,Fr),c(t,Mt,f),c(t,j,f),e(j,Xe),e(Xe,L),e(L,Yr),e(L,Ze),e(Ze,Wr),e(L,Gr),e(L,X),e(X,qr),e(L,zr),e(L,Te),e(Te,Br),e(L,Jr),e(j,Kr),e(j,Z),e(Z,et),e(et,Qr),e(Z,Vr),e(Z,He),He.innerHTML=ul,e(j,Xr),e(j,tt),e(tt,x),e(x,Zr),e(x,rt),e(rt,eo),e(x,to),e(x,ot),e(ot,ro),e(x,oo),e(x,at),e(at,ao),e(x,lo),e(j,no),e(j,lt),e(lt,$),e($,so),e($,nt),e(nt,io),e($,fo),e($,st),e(st,ho),e($,co),e($,it),e(it,uo),e($,po),e($,Oe),e(Oe,_o),e($,go),c(t,Nt,f),ge(N,t,f),c(t,Rt,f),c(t,Se,f),e(Se,w),e(w,mo),e(w,ft),e(ft,vo),e(w,wo),e(w,ht),e(ht,Eo),e(w,bo),e(w,ct),e(ct,yo),e(w,$o),e(w,ut),e(ut,jo),e(w,Io),e(w,pt),e(pt,Po),e(w,ko),e(w,dt),e(dt,Lo),e(w,xo),c(t,Ut,f),ge(ee,t,f),c(t,Ft,f),c(t,I,f),e(I,te),e(te,re),e(re,Co),e(re,_t),e(_t,To),e(re,Ho),e(te,Oo),e(te,De),De.innerHTML=pl,e(I,So),e(I,oe),e(oe,ae),e(ae,Do),e(ae,gt),e(gt,Ao),e(ae,Mo),e(oe,No),ge(le,oe,null),e(I,Ro),e(I,ne),e(ne,se),e(se,Uo),e(se,mt),e(mt,Fo),e(se,Yo),e(ne,Wo),e(ne,Ae),Ae.innerHTML=dl,e(I,Go),e(I,ie),e(ie,vt),e(vt,qo),e(ie,zo),e(ie,Me),Me.innerHTML=_l,c(t,Yt,f),ge(R,t,f),c(t,Wt,f),c(t,Ne,f),e(Ne,wt),e(wt,Bo),c(t,Gt,f),ge(U,t,f),c(t,qt,f),c(t,Re,f),e(Re,Jo),c(t,zt,f),c(t,Ue,f),e(Ue,Ko),c(t,Bt,f),c(t,P,f),e(P,H),e(H,Qo),e(H,fe),e(fe,Vo),e(H,Xo),e(H,Et),e(Et,Zo),e(H,ea),e(P,ta),e(P,he),e(he,ra),e(he,Fe),e(Fe,oa),e(he,aa),e(P,la),e(P,ce),e(ce,na),e(ce,Ye),e(Ye,sa),e(ce,ia),e(P,fa),e(P,ue),e(ue,ha),e(ue,We),e(We,ca),e(ue,ua),Jt=!0},p(t,[f]){const pe={};f&1&&(pe.$$scope={dirty:f,ctx:t}),D.$set(pe);const bt={};f&1&&(bt.$$scope={dirty:f,ctx:t}),A.$set(bt);const yt={};f&1&&(yt.$$scope={dirty:f,ctx:t}),N.$set(yt);const $t={};f&1&&($t.$$scope={dirty:f,ctx:t}),R.$set($t);const jt={};f&1&&(jt.$$scope={dirty:f,ctx:t}),U.$set(jt)},i(t){Jt||(me(D.$$.fragment,t),me(A.$$.fragment,t),me(N.$$.fragment,t),me(ee.$$.fragment,t),me(le.$$.fragment,t),me(R.$$.fragment,t),me(U.$$.fragment,t),Jt=!0)},o(t){ve(D.$$.fragment,t),ve(A.$$.fragment,t),ve(N.$$.fragment,t),ve(ee.$$.fragment,t),ve(le.$$.fragment,t),ve(R.$$.fragment,t),ve(U.$$.fragment,t),Jt=!1},d(t){t&&r(h),t&&r(_),t&&r(v),t&&r(Pt),t&&r(O),t&&r(kt),t&&r(S),t&&r(Lt),t&&r(Ee),t&&r(xt),t&&r(be),t&&r(Ct),t&&r(ye),t&&r(Tt),t&&r(b),t&&r(Ht),we(D,t),t&&r(Ot),t&&r(Le),t&&r(St),we(A,t),t&&r(Dt),t&&r(xe),t&&r(At),t&&r(M),t&&r(Mt),t&&r(j),t&&r(Nt),we(N,t),t&&r(Rt),t&&r(Se),t&&r(Ut),we(ee,t),t&&r(Ft),t&&r(I),we(le),t&&r(Yt),we(R,t),t&&r(Wt),t&&r(Ne),t&&r(Gt),we(U,t),t&&r(qt),t&&r(Re),t&&r(zt),t&&r(Ue),t&&r(Bt),t&&r(P)}}}class Wl extends jl{constructor(h){super();Il(this,h,null,Ml,Pl,{})}}export{Wl as default};
