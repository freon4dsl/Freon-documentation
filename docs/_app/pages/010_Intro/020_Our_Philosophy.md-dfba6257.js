import{S as zo,i as Xo,s as Yo,e as i,t as r,k as f,c as a,a as l,h as n,d as o,m as p,b as m,a2 as Zo,g as h,H as t,J as co}from"../../chunks/vendor-0dc77bd0.js";function $o(Jo){let _,Be,ye,N,Qe,we,j,k,Y,Ve,Je,F,ze,Xe,Ee,L,Ye,_e,x,Ze,S,$e,et,ke,P,tt,Z,ot,rt,xe,v,nt,$,it,at,ee,lt,st,Pe,D,ht,Oe,d,ft,te,pt,dt,oe,mt,ct,O,uo,ut,re,vt,gt,ne,bt,yt,Te,g,R,wt,ie,Et,_t,kt,M,xt,ae,Pt,Ot,Tt,G,At,le,It,Ft,Ae,b,St,se,Rt,Mt,he,Gt,qt,Ie,y,Nt,fe,jt,Lt,H,Dt,Ht,Fe,K,Kt,Se,c,Ut,U,Ct,Wt,pe,Bt,Qt,q,Vt,Jt,Re,Me,Ge,w,C,de,zt,Xt,Yt,me,Zt,$t,eo,qe,T,to,ce,oo,ro,Ne,E,ue,no,io,ve,ao,lo,ge,so,je,A,ho,W,fo,po;return{c(){_=i("h1"),Be=r("Our Philosophy"),ye=f(),N=i("p"),Qe=r(`The design philosophy that we follow in Freon can best be described by the following quote from
the well-known graphical user interface designer Alan Kay.`),we=f(),j=i("blockquote"),k=i("p"),Y=i("em"),Ve=r("Simple things should be simple, complex things should be possible."),Je=r(`
(`),F=i("a"),ze=r("Alan Kay, Turing Award Winner"),Xe=r(")"),Ee=f(),L=i("h2"),Ye=r("The Pareto Principle"),_e=f(),x=i("p"),Ze=r(`Freon is a minimal viable product which supports the
language engineer in creating a work environment for a mini-language. A key principle
is the `),S=i("a"),$e=r("Pareto principle"),et=r(`
(or 80%-20% rule),
which states that for many events, roughly 80% of the effects come from 20% of the causes.
For example, it is an axiom of business  management that \u201C80% of sales come from 20% of clients\u201D.`),ke=f(),P=i("p"),tt=r("In software development the Pareto principle translates to \u201C"),Z=i("em"),ot=r(`80% of the development
effort is spent on 20% of the application`),rt=r(`\u201D, this 20% being the more complex parts.
Still, the other 80% of the application needs to be created as well.`),xe=f(),v=i("p"),nt=r(`Freon aims to
make the latter `),$=i("strong"),it=r("as simple as possible"),at=r(", while keeping the generated code "),ee=i("strong"),lt=r("open"),st=r(` for the
language engineer to code the more complex parts by hand. One of our use cases is the
creation of a prototype language in a day or in a couple of days at most.`),Pe=f(),D=i("h2"),ht=r("Other Guidelines"),Oe=f(),d=i("p"),ft=r("Other guidelines have been "),te=i("strong"),pt=r("ease of use"),dt=r(", and "),oe=i("strong"),mt=r("flexibility"),ct=r(". Freon may not (yet "),O=i("img"),ut=r(`) do
everything you need, but what it does, should be very easy to get into. Furthermore,
Freon is designed to be `),re=i("strong"),vt=r("extendable"),gt=r(", and "),ne=i("strong"),bt=r("easy to integrate with other tooling"),yt=r(`.
In practise this means that:`),Te=f(),g=i("ul"),R=i("li"),wt=r("Every part of the work environment that is generated, can be "),ie=i("em"),Et=r("exchanged"),_t=r(` for one
that suits the language engineer better, provided the right interface is implemented.`),kt=f(),M=i("li"),xt=r(`Every part of the work environment is made by its own generator, so you can adjust which
parts you want to generate and which parts you `),ae=i("em"),Pt=r("omit"),Ot=r("."),Tt=f(),G=i("li"),At=r(`The different parts of the work environment can be run on either the server or the client.
Thus creating `),le=i("em"),It=r("multiple deployment options"),Ft=r("."),Ae=f(),b=i("p"),St=r(`With these principles in mind, we have started of small and simple. Every definition language,
from the language structure to the validation rules, is kept `),se=i("strong"),Rt=r("minimal"),Mt=r(". Over time, in an "),he=i("strong"),Gt=r("agile"),qt=r(`
fashion, these will be extended whenever the need arises.`),Ie=f(),y=i("p"),Nt=r("Furthermore, we intend to use "),fe=i("strong"),jt=r("bootstrapping"),Lt=r(` in one of the next versions of Freon
to create editors for every one of the definition languages. If you are interested, you can
check out our `),H=i("a"),Dt=r("wish list"),Ht=r(" of features to be developed in the future."),Fe=f(),K=i("h2"),Kt=r("Name-Based References"),Se=f(),c=i("p"),Ut=r("In "),U=i("a"),Ct=r("Support for Expressions"),Wt=r(` we explain
that editing expressions is a known challenge for projectional editors. A second challenge
is posed by `),pe=i("em"),Bt=r("references"),Qt=r(", which is stated in "),q=i("a"),Vt=r("Efficiency of Projectional Editing: A Controlled Experiment"),Jt=r(" as follows."),Re=f(),Me=i("hr"),Ge=f(),w=i("blockquote"),C=i("p"),de=i("strong"),zt=r("References."),Xt=r(`
References are based on pointers to the targetnode\u2019s ID. Despite some advantages (e.g., robust
refactorings) of this approach, we observe problems with the tradeoff that the reference target
has to exist at the time the reference is created.  A more robust and intuitive handling of
references is desirable.  While some problems can be solved by language developers (e.g.,
quick fixes to create reference targets), there should be a better way to support references
by the IDE itself.`),Yt=f(),me=i("p"),Zt=r("[Markus Voelter a.o., Efficiency of Projectional Editing]"),$t=f(),eo=i("hr"),qe=f(),T=i("p"),to=r(`This is the reason that in Freon we allow only name-based references, which are resolved
on a need-to basis. Every reference is
an instance of the class `),ce=i("code"),oo=r("PiElementReference"),ro=r(", which holds:"),Ne=f(),E=i("ul"),ue=i("li"),no=r("the name or path (i.e. a list of names) of the referred element"),io=f(),ve=i("li"),ao=r("the meta-type of the referred element"),lo=f(),ge=i("li"),so=r("a cache of the element itself"),je=f(),A=i("p"),ho=r(`This means that the AST is truly a tree, not a graph. One advantage is that we are not obliged
to have the complete model in memory. Our use of
multi-file models is explained in `),W=i("a"),fo=r("Models and Model Units"),po=r("."),this.h()},l(e){_=a(e,"H1",{});var s=l(_);Be=n(s,"Our Philosophy"),s.forEach(o),ye=p(e),N=a(e,"P",{});var vo=l(N);Qe=n(vo,`The design philosophy that we follow in Freon can best be described by the following quote from
the well-known graphical user interface designer Alan Kay.`),vo.forEach(o),we=p(e),j=a(e,"BLOCKQUOTE",{});var go=l(j);k=a(go,"P",{});var be=l(k);Y=a(be,"EM",{});var bo=l(Y);Ve=n(bo,"Simple things should be simple, complex things should be possible."),bo.forEach(o),Je=n(be,`
(`),F=a(be,"A",{href:!0,target:!0});var yo=l(F);ze=n(yo,"Alan Kay, Turing Award Winner"),yo.forEach(o),Xe=n(be,")"),be.forEach(o),go.forEach(o),Ee=p(e),L=a(e,"H2",{});var wo=l(L);Ye=n(wo,"The Pareto Principle"),wo.forEach(o),_e=p(e),x=a(e,"P",{});var Le=l(x);Ze=n(Le,`Freon is a minimal viable product which supports the
language engineer in creating a work environment for a mini-language. A key principle
is the `),S=a(Le,"A",{href:!0,target:!0});var Eo=l(S);$e=n(Eo,"Pareto principle"),Eo.forEach(o),et=n(Le,`
(or 80%-20% rule),
which states that for many events, roughly 80% of the effects come from 20% of the causes.
For example, it is an axiom of business  management that \u201C80% of sales come from 20% of clients\u201D.`),Le.forEach(o),ke=p(e),P=a(e,"P",{});var De=l(P);tt=n(De,"In software development the Pareto principle translates to \u201C"),Z=a(De,"EM",{});var _o=l(Z);ot=n(_o,`80% of the development
effort is spent on 20% of the application`),_o.forEach(o),rt=n(De,`\u201D, this 20% being the more complex parts.
Still, the other 80% of the application needs to be created as well.`),De.forEach(o),xe=p(e),v=a(e,"P",{});var B=l(v);nt=n(B,`Freon aims to
make the latter `),$=a(B,"STRONG",{});var ko=l($);it=n(ko,"as simple as possible"),ko.forEach(o),at=n(B,", while keeping the generated code "),ee=a(B,"STRONG",{});var xo=l(ee);lt=n(xo,"open"),xo.forEach(o),st=n(B,` for the
language engineer to code the more complex parts by hand. One of our use cases is the
creation of a prototype language in a day or in a couple of days at most.`),B.forEach(o),Pe=p(e),D=a(e,"H2",{});var Po=l(D);ht=n(Po,"Other Guidelines"),Po.forEach(o),Oe=p(e),d=a(e,"P",{});var u=l(d);ft=n(u,"Other guidelines have been "),te=a(u,"STRONG",{});var Oo=l(te);pt=n(Oo,"ease of use"),Oo.forEach(o),dt=n(u,", and "),oe=a(u,"STRONG",{});var To=l(oe);mt=n(To,"flexibility"),To.forEach(o),ct=n(u,". Freon may not (yet "),O=a(u,"IMG",{src:!0,alt:!0,width:!0,height:!0}),ut=n(u,`) do
everything you need, but what it does, should be very easy to get into. Furthermore,
Freon is designed to be `),re=a(u,"STRONG",{});var Ao=l(re);vt=n(Ao,"extendable"),Ao.forEach(o),gt=n(u,", and "),ne=a(u,"STRONG",{});var Io=l(ne);bt=n(Io,"easy to integrate with other tooling"),Io.forEach(o),yt=n(u,`.
In practise this means that:`),u.forEach(o),Te=p(e),g=a(e,"UL",{});var Q=l(g);R=a(Q,"LI",{});var He=l(R);wt=n(He,"Every part of the work environment that is generated, can be "),ie=a(He,"EM",{});var Fo=l(ie);Et=n(Fo,"exchanged"),Fo.forEach(o),_t=n(He,` for one
that suits the language engineer better, provided the right interface is implemented.`),He.forEach(o),kt=p(Q),M=a(Q,"LI",{});var Ke=l(M);xt=n(Ke,`Every part of the work environment is made by its own generator, so you can adjust which
parts you want to generate and which parts you `),ae=a(Ke,"EM",{});var So=l(ae);Pt=n(So,"omit"),So.forEach(o),Ot=n(Ke,"."),Ke.forEach(o),Tt=p(Q),G=a(Q,"LI",{});var Ue=l(G);At=n(Ue,`The different parts of the work environment can be run on either the server or the client.
Thus creating `),le=a(Ue,"EM",{});var Ro=l(le);It=n(Ro,"multiple deployment options"),Ro.forEach(o),Ft=n(Ue,"."),Ue.forEach(o),Q.forEach(o),Ae=p(e),b=a(e,"P",{});var V=l(b);St=n(V,`With these principles in mind, we have started of small and simple. Every definition language,
from the language structure to the validation rules, is kept `),se=a(V,"STRONG",{});var Mo=l(se);Rt=n(Mo,"minimal"),Mo.forEach(o),Mt=n(V,". Over time, in an "),he=a(V,"STRONG",{});var Go=l(he);Gt=n(Go,"agile"),Go.forEach(o),qt=n(V,`
fashion, these will be extended whenever the need arises.`),V.forEach(o),Ie=p(e),y=a(e,"P",{});var J=l(y);Nt=n(J,"Furthermore, we intend to use "),fe=a(J,"STRONG",{});var qo=l(fe);jt=n(qo,"bootstrapping"),qo.forEach(o),Lt=n(J,` in one of the next versions of Freon
to create editors for every one of the definition languages. If you are interested, you can
check out our `),H=a(J,"A",{href:!0});var No=l(H);Dt=n(No,"wish list"),No.forEach(o),Ht=n(J," of features to be developed in the future."),J.forEach(o),Fe=p(e),K=a(e,"H2",{});var jo=l(K);Kt=n(jo,"Name-Based References"),jo.forEach(o),Se=p(e),c=a(e,"P",{});var I=l(c);Ut=n(I,"In "),U=a(I,"A",{href:!0});var Lo=l(U);Ct=n(Lo,"Support for Expressions"),Lo.forEach(o),Wt=n(I,` we explain
that editing expressions is a known challenge for projectional editors. A second challenge
is posed by `),pe=a(I,"EM",{});var Do=l(pe);Bt=n(Do,"references"),Do.forEach(o),Qt=n(I,", which is stated in "),q=a(I,"A",{href:!0,target:!0});var Ho=l(q);Vt=n(Ho,"Efficiency of Projectional Editing: A Controlled Experiment"),Ho.forEach(o),Jt=n(I," as follows."),I.forEach(o),Re=p(e),Me=a(e,"HR",{}),Ge=p(e),w=a(e,"BLOCKQUOTE",{});var z=l(w);C=a(z,"P",{});var mo=l(C);de=a(mo,"STRONG",{});var Ko=l(de);zt=n(Ko,"References."),Ko.forEach(o),Xt=n(mo,`
References are based on pointers to the targetnode\u2019s ID. Despite some advantages (e.g., robust
refactorings) of this approach, we observe problems with the tradeoff that the reference target
has to exist at the time the reference is created.  A more robust and intuitive handling of
references is desirable.  While some problems can be solved by language developers (e.g.,
quick fixes to create reference targets), there should be a better way to support references
by the IDE itself.`),mo.forEach(o),Yt=p(z),me=a(z,"P",{});var Uo=l(me);Zt=n(Uo,"[Markus Voelter a.o., Efficiency of Projectional Editing]"),Uo.forEach(o),$t=p(z),eo=a(z,"HR",{}),z.forEach(o),qe=p(e),T=a(e,"P",{});var Ce=l(T);to=n(Ce,`This is the reason that in Freon we allow only name-based references, which are resolved
on a need-to basis. Every reference is
an instance of the class `),ce=a(Ce,"CODE",{});var Co=l(ce);oo=n(Co,"PiElementReference"),Co.forEach(o),ro=n(Ce,", which holds:"),Ce.forEach(o),Ne=p(e),E=a(e,"UL",{});var X=l(E);ue=a(X,"LI",{});var Wo=l(ue);no=n(Wo,"the name or path (i.e. a list of names) of the referred element"),Wo.forEach(o),io=p(X),ve=a(X,"LI",{});var Bo=l(ve);ao=n(Bo,"the meta-type of the referred element"),Bo.forEach(o),lo=p(X),ge=a(X,"LI",{});var Qo=l(ge);so=n(Qo,"a cache of the element itself"),Qo.forEach(o),X.forEach(o),je=p(e),A=a(e,"P",{});var We=l(A);ho=n(We,`This means that the AST is truly a tree, not a graph. One advantage is that we are not obliged
to have the complete model in memory. Our use of
multi-file models is explained in `),W=a(We,"A",{href:!0});var Vo=l(W);fo=n(Vo,"Models and Model Units"),Vo.forEach(o),po=n(We,"."),We.forEach(o),this.h()},h(){m(F,"href","https://en.wikipedia.org/wiki/Alan_Kay"),m(F,"target","_blank"),m(S,"href","https://en.wikipedia.org/wiki/Pareto*principle"),m(S,"target","_blank"),Zo(O.src,uo="/images/smile.png")||m(O,"src",uo),m(O,"alt","OOPS"),m(O,"width","20"),m(O,"height","20"),m(H,"href","/010_Intro/090_Future_Developments"),m(U,"href","/010_Intro/010_Projectional_Editing#expressions"),m(q,"href","https://www.voelter.de/data/pub/fse2016-projEditing.pdf"),m(q,"target","_blank"),m(W,"href","/010_Intro/030_Models_and_Model_Units")},m(e,s){h(e,_,s),t(_,Be),h(e,ye,s),h(e,N,s),t(N,Qe),h(e,we,s),h(e,j,s),t(j,k),t(k,Y),t(Y,Ve),t(k,Je),t(k,F),t(F,ze),t(k,Xe),h(e,Ee,s),h(e,L,s),t(L,Ye),h(e,_e,s),h(e,x,s),t(x,Ze),t(x,S),t(S,$e),t(x,et),h(e,ke,s),h(e,P,s),t(P,tt),t(P,Z),t(Z,ot),t(P,rt),h(e,xe,s),h(e,v,s),t(v,nt),t(v,$),t($,it),t(v,at),t(v,ee),t(ee,lt),t(v,st),h(e,Pe,s),h(e,D,s),t(D,ht),h(e,Oe,s),h(e,d,s),t(d,ft),t(d,te),t(te,pt),t(d,dt),t(d,oe),t(oe,mt),t(d,ct),t(d,O),t(d,ut),t(d,re),t(re,vt),t(d,gt),t(d,ne),t(ne,bt),t(d,yt),h(e,Te,s),h(e,g,s),t(g,R),t(R,wt),t(R,ie),t(ie,Et),t(R,_t),t(g,kt),t(g,M),t(M,xt),t(M,ae),t(ae,Pt),t(M,Ot),t(g,Tt),t(g,G),t(G,At),t(G,le),t(le,It),t(G,Ft),h(e,Ae,s),h(e,b,s),t(b,St),t(b,se),t(se,Rt),t(b,Mt),t(b,he),t(he,Gt),t(b,qt),h(e,Ie,s),h(e,y,s),t(y,Nt),t(y,fe),t(fe,jt),t(y,Lt),t(y,H),t(H,Dt),t(y,Ht),h(e,Fe,s),h(e,K,s),t(K,Kt),h(e,Se,s),h(e,c,s),t(c,Ut),t(c,U),t(U,Ct),t(c,Wt),t(c,pe),t(pe,Bt),t(c,Qt),t(c,q),t(q,Vt),t(c,Jt),h(e,Re,s),h(e,Me,s),h(e,Ge,s),h(e,w,s),t(w,C),t(C,de),t(de,zt),t(C,Xt),t(w,Yt),t(w,me),t(me,Zt),t(w,$t),t(w,eo),h(e,qe,s),h(e,T,s),t(T,to),t(T,ce),t(ce,oo),t(T,ro),h(e,Ne,s),h(e,E,s),t(E,ue),t(ue,no),t(E,io),t(E,ve),t(ve,ao),t(E,lo),t(E,ge),t(ge,so),h(e,je,s),h(e,A,s),t(A,ho),t(A,W),t(W,fo),t(A,po)},p:co,i:co,o:co,d(e){e&&o(_),e&&o(ye),e&&o(N),e&&o(we),e&&o(j),e&&o(Ee),e&&o(L),e&&o(_e),e&&o(x),e&&o(ke),e&&o(P),e&&o(xe),e&&o(v),e&&o(Pe),e&&o(D),e&&o(Oe),e&&o(d),e&&o(Te),e&&o(g),e&&o(Ae),e&&o(b),e&&o(Ie),e&&o(y),e&&o(Fe),e&&o(K),e&&o(Se),e&&o(c),e&&o(Re),e&&o(Me),e&&o(Ge),e&&o(w),e&&o(qe),e&&o(T),e&&o(Ne),e&&o(E),e&&o(je),e&&o(A)}}}class tr extends zo{constructor(_){super();Xo(this,_,null,$o,Yo,{})}}export{tr as default};
