import{S as tn,i as sn,s as an,e as o,t as a,k as c,w as za,c as p,a as i,h as n,d as t,m as u,x as Na,b as x,g as r,H as s,y as Ra,J as nn,q as Ka,o as Ua,B as Ga}from"../../../chunks/vendor-0dc77bd0.js";import{F as Wa}from"../../../chunks/Figure-4dd15a94.js";/* empty css                                                           */function on(Ja){let y,Et,je,d,wt,I,_t,Tt,N,Pt,Bt,Ce,R,Lt,De,E,St,ce,gt,At,qe,w,It,K,Ot,jt,$e,_,Ct,ue,Dt,qt,He,O,Fe,T,$t,U,Ht,Ft,Me,j,Qa=`<code class="language-ts"><span class="token keyword">new</span> <span class="token class-name">HorizontalListBox</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">LabelBox</span><span class="token punctuation">(</span><span class="token string">"""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">TextBox</span><span class="token punctuation">(</span>stringLiteral<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">LabelBox</span><span class="token punctuation">(</span><span class="token string">"""</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,ze,G,Mt,Ne,m,zt,he,Nt,Rt,fe,Kt,Ut,Re,W,Gt,Ke,C,Ue,b,Wt,ke,Jt,Qt,de,Vt,Xt,Ge,D,Va=`<code class="language-ts"><span class="token comment">//</span>
<span class="token keyword">new</span> <span class="token class-name">HorizontalListBox</span><span class="token punctuation">(</span>literal<span class="token punctuation">,</span> <span class="token string">"full-string"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token comment">// &lt;1></span>
    <span class="token keyword">new</span> <span class="token class-name">LabelBox</span><span class="token punctuation">(</span>literal<span class="token punctuation">,</span> <span class="token string">"start-quote"</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment">// &lt;2></span>
    <span class="token keyword">new</span> <span class="token class-name">TextBox</span><span class="token punctuation">(</span>                                        <span class="token comment">// &lt;3></span>
        literal<span class="token punctuation">,</span>
        <span class="token string">"value"</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> literal<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
        <span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>literal<span class="token punctuation">.</span>value # v<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">LabelBox</span><span class="token punctuation">(</span>literal<span class="token punctuation">,</span> <span class="token string">"end-quote"</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">)</span>             <span class="token comment">// &lt;4></span>
<span class="token punctuation">]</span><span class="token punctuation">)</span></code>`,We,h,me,Yt,Zt,be,es,ts,ve,ss,as,xe,ns,Je,q,ye,os,Qe,v,ps,Ee,is,ls,we,rs,cs,Ve,f,$,us,_e,hs,fs,ks,H,ds,Te,ms,bs,vs,F,xs,Pe,ys,Es,ws,M,_s,Be,Ts,Ps,Xe,P,Bs,Le,Ls,Ss,Ye,k,J,Se,gs,As,Is,Q,ge,Os,js,Cs,V,Ae,Ds,qs,$s,X,Ie,Hs,Fs,Ze,z,Xa=`<code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">PiBehavior</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">/**
	 * The trigger to activate this behavior
	 */</span>
	trigger<span class="token operator">:</span> PiTriggerType<span class="token punctuation">;</span>
	<span class="token comment">/**
	 * The box roles in which this trigger is active
	 */</span>
	activeInBoxRoles<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token comment">/**
	 * Optional callback function that returns whether the trigger is applicable for the specific box.
	 */</span>
	isApplicable<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>box<span class="token operator">:</span> Box<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
	<span class="token comment">// TODO add comments here and in the source code</span>
	boxRoleToSelect<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
	caretPosition<span class="token operator">?</span><span class="token operator">:</span> PiCaret<span class="token punctuation">;</span>
	referenceShortcut<span class="token operator">?</span><span class="token operator">:</span> ReferenceShortcut<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/**
 * Behavior with custom action, intended to be used to create non expression elements.
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">PiCustomBehavior</span> <span class="token keyword">extends</span> <span class="token class-name">PiBehavior</span> <span class="token punctuation">&#123;</span>
	<span class="token function-variable function">action</span><span class="token operator">:</span> <span class="token punctuation">(</span>box<span class="token operator">:</span> Box<span class="token punctuation">,</span> trigger<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> editor<span class="token operator">:</span> PiEditor<span class="token punctuation">,</span> propertyName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> PiElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	undo<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>box<span class="token operator">:</span> Box<span class="token punctuation">,</span> ed<span class="token operator">:</span> PiEditor<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/**
 * Special behavior for creating an expression.
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">PiExpressionCreator</span> <span class="token keyword">extends</span> <span class="token class-name">PiBehavior</span> <span class="token punctuation">&#123;</span>
	<span class="token function-variable function">expressionBuilder</span><span class="token operator">:</span> <span class="token punctuation">(</span>box<span class="token operator">:</span> Box<span class="token punctuation">,</span> trigger<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> editor<span class="token operator">:</span> PiEditor<span class="token punctuation">,</span> propertyName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> PiExpression<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/**
 * Special behavior for creating a binary expression.
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">PiBinaryExpressionCreator</span> <span class="token keyword">extends</span> <span class="token class-name">PiBehavior</span> <span class="token punctuation">&#123;</span>
	<span class="token function-variable function">expressionBuilder</span><span class="token operator">:</span> <span class="token punctuation">(</span>box<span class="token operator">:</span> Box<span class="token punctuation">,</span> trigger<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> editor<span class="token operator">:</span> PiEditor<span class="token punctuation">,</span> propertyName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> PiBinaryExpression<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/**
 * Special behavior initialized by keyboard strokes.
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">KeyboardShortcutBehavior</span> <span class="token keyword">extends</span> <span class="token class-name">PiBehavior</span> <span class="token punctuation">&#123;</span>
	<span class="token function-variable function">action</span><span class="token operator">:</span> <span class="token punctuation">(</span>box<span class="token operator">:</span> Box<span class="token punctuation">,</span> trigger<span class="token operator">:</span> PiKey<span class="token punctuation">,</span> editor<span class="token operator">:</span> PiEditor<span class="token punctuation">,</span> propertyName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>PiElement<span class="token operator">></span><span class="token punctuation">;</span>
	trigger<span class="token operator">:</span> PiKey<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,et,B,Ms,Oe,zs,Ns,tt,Y,Rs,st,Z,Ks,at,ee,Us,nt,te,Gs,ot,L,Ws,se,Js,Qs,pt,ae,Vs,it,ne,Xs,lt,oe,Ys,rt;return O=new Wa({props:{imageName:"mapping-example-stringliteral.svg",caption:"Mapping a StringLiteral",figureNumber:1}}),C=new Wa({props:{caption:"Mapping a StringLiteral with Roles",imageName:"mapping-example-stringliteral-with-roles.svg",figureNumber:2}}),{c(){y=o("h1"),Et=a("The Projectional Editor Framework"),je=c(),d=o("p"),wt=a("The Projectional Editor Framework is written in TypeScript and "),I=o("a"),_t=a("Svelte"),Tt=a(`. This page provides an overview of the Framework.
If you want to know how to use it, see `),N=o("a"),Pt=a("Editor API"),Bt=a("."),Ce=c(),R=o("h2"),Lt=a("Projection Layout Based on Boxes"),De=c(),E=o("p"),St=a("The layout of every visible element in the editor is based on "),ce=o("em"),gt=a("boxes"),At=a(`. A box is a rectangular area
in the editor. A box can contain any number of child boxes. Every AST node is projected in a box.`),qe=c(),w=o("p"),It=a(`The framework provides many types of predefined boxes. See
`),K=o("a"),Ot=a("Boxes"),jt=a(` for an overview.
These boxes can be used to build a projection.`),$e=c(),_=o("p"),Ct=a("Let\u2019s look at a small example to start with. Figure 1 shows the projection of the concept "),ue=o("code"),Dt=a("StringLiteral"),qt=a(`. This is mapped to a horizontal list
of a quote (\u201D), an editable text with the value of the StringLiteral, and a closing quote (\u201D). Note
that the quotes are not part of the AST. They are part of the concrete syntax used in this projection
of the AST.`),He=c(),za(O.$$.fragment),Fe=c(),T=o("p"),$t=a("In TypeScript, using the predefined "),U=o("a"),Ht=a("Boxes"),Ft=a(", this projection might look something like:"),Me=c(),j=o("pre"),ze=c(),G=o("h2"),Mt=a("Coupling Behavior to Boxes"),Ne=c(),m=o("p"),zt=a(`User actions on boxes need to be translated into interactions with the projected AST. To know which part of the
projection represents the AST node, we give each `),he=o("code"),Nt=a("Box"),Rt=a(" in the projection a "),fe=o("em"),Kt=a("role"),Ut=a(`, which is unique
within its parent box. This way we can identify every box by its model element plus its role.`),Re=c(),W=o("p"),Gt=a("In the following figure the roles are shown above the boxes in green."),Ke=c(),za(C.$$.fragment),Ue=c(),b=o("p"),Wt=a("We can now show the full typescript code for this projection. Given that "),ke=o("code"),Jt=a("literal"),Qt=a(" is the "),de=o("code"),Vt=a("StringLiteral"),Xt=a(" object:"),Ge=c(),D=o("pre"),We=c(),h=o("ol"),me=o("li"),Yt=a(`The overall horizontal list box to group everything. Its parameters are the model element that is shown,
the role of the box, and a list of child boxes.`),Zt=c(),be=o("li"),es=a(`The first label box for the start quote. Its parameters are, like the horizontal box, the model element,
the role of the box, and its content, which is the quote character.`),ts=c(),ve=o("li"),ss=a(`The text box for the value of the string literal. Its parameters are, like the horizontal box, the model element,
the role of the box, the getter function for the content, and the setter function, used when the content changes.`),as=c(),xe=o("li"),ns=a("The second label box for the end quote. Except for its role, this is identical to the first label box."),Je=c(),q=o("h2"),ye=o("a"),os=a(" Behavior is Defined by Actions"),Qe=c(),v=o("p"),ps=a("The behavior coupled to a "),Ee=o("em"),is=a("Box"),ls=a(" is defined by an "),we=o("code"),rs=a("Action"),cs=a(`. To identify which action should be executed,
each behavior is specified by:`),Ve=c(),f=o("ul"),$=o("li"),us=a("a "),_e=o("em"),hs=a("trigger"),fs=a(", describing the key(s) that will trigger the behavior, and"),ks=c(),H=o("li"),ds=a("one or more "),Te=o("em"),ms=a("roles"),bs=a(", specifying that the behavior is only active in boxes with that specific role,"),vs=c(),F=o("li"),xs=a("an "),Pe=o("em"),ys=a("action"),Es=a(`,  which is a typescript/javascript function that will be executed when the
behavior is being triggered.`),ws=c(),M=o("li"),_s=a("a "),Be=o("em"),Ts=a("caretPosition"),Ps=a(`, which is the box where the cursor should be placed after the execution of
the action (optional).`),Xe=c(),P=o("p"),Bs=a("There are four different types of action, each of which extend the "),Le=o("code"),Ls=a("PiBehavior"),Ss=a(" interface."),Ye=c(),k=o("ol"),J=o("li"),Se=o("code"),gs=a("PiCustomBehavior"),As=a(", used for most types of behavior, but specifically the creation of non expression concepts."),Is=c(),Q=o("li"),ge=o("code"),Os=a("PiExpressionCreator"),js=a(", used to create an expression."),Cs=c(),V=o("li"),Ae=o("code"),Ds=a("PiBinaryExpressionCreator"),qs=a(", used to create a binary expression."),$s=c(),X=o("li"),Ie=o("code"),Hs=a("KeyboardShortcutBehavior"),Fs=a(", behaviour initiated through a keystroke."),Ze=c(),z=o("pre"),et=c(),B=o("p"),Ms=a("To attach the behavior to one or more boxes, these box roles are added to the "),Oe=o("code"),zs=a("activeInBoxRoles"),Ns=a(`
property of an action.
//TODO: describe the optional properties`),tt=c(),Y=o("h2"),Rs=a("Custom Actions"),st=c(),Z=o("p"),Ks=a("// TODO document custom actions"),at=c(),ee=o("h2"),Us=a("Expressions and Binary Expressions"),nt=c(),te=o("p"),Gs=a("// TODO document expression actions"),ot=c(),L=o("p"),Ws=a(`The challenge posed by editing expressions in a projectional editor are explained
in `),se=o("a"),Js=a("Expressions"),Qs=a("."),pt=c(),ae=o("h2"),Vs=a("Keyboard Shortcuts"),it=c(),ne=o("p"),Xs=a("// TODO document keyboard actions"),lt=c(),oe=o("p"),Ys=a("A keyboard shortcut specifies an action that is triggered by special keys, like e.g. Ctrl-A."),this.h()},l(e){y=p(e,"H1",{});var l=i(y);Et=n(l,"The Projectional Editor Framework"),l.forEach(t),je=u(e),d=p(e,"P",{});var pe=i(d);wt=n(pe,"The Projectional Editor Framework is written in TypeScript and "),I=p(pe,"A",{href:!0,target:!0});var na=i(I);_t=n(na,"Svelte"),na.forEach(t),Tt=n(pe,`. This page provides an overview of the Framework.
If you want to know how to use it, see `),N=p(pe,"A",{href:!0});var oa=i(N);Pt=n(oa,"Editor API"),oa.forEach(t),Bt=n(pe,"."),pe.forEach(t),Ce=u(e),R=p(e,"H2",{});var pa=i(R);Lt=n(pa,"Projection Layout Based on Boxes"),pa.forEach(t),De=u(e),E=p(e,"P",{});var ct=i(E);St=n(ct,"The layout of every visible element in the editor is based on "),ce=p(ct,"EM",{});var ia=i(ce);gt=n(ia,"boxes"),ia.forEach(t),At=n(ct,`. A box is a rectangular area
in the editor. A box can contain any number of child boxes. Every AST node is projected in a box.`),ct.forEach(t),qe=u(e),w=p(e,"P",{});var ut=i(w);It=n(ut,`The framework provides many types of predefined boxes. See
`),K=p(ut,"A",{href:!0});var la=i(K);Ot=n(la,"Boxes"),la.forEach(t),jt=n(ut,` for an overview.
These boxes can be used to build a projection.`),ut.forEach(t),$e=u(e),_=p(e,"P",{});var ht=i(_);Ct=n(ht,"Let\u2019s look at a small example to start with. Figure 1 shows the projection of the concept "),ue=p(ht,"CODE",{});var ra=i(ue);Dt=n(ra,"StringLiteral"),ra.forEach(t),qt=n(ht,`. This is mapped to a horizontal list
of a quote (\u201D), an editable text with the value of the StringLiteral, and a closing quote (\u201D). Note
that the quotes are not part of the AST. They are part of the concrete syntax used in this projection
of the AST.`),ht.forEach(t),He=u(e),Na(O.$$.fragment,e),Fe=u(e),T=p(e,"P",{});var ft=i(T);$t=n(ft,"In TypeScript, using the predefined "),U=p(ft,"A",{href:!0});var ca=i(U);Ht=n(ca,"Boxes"),ca.forEach(t),Ft=n(ft,", this projection might look something like:"),ft.forEach(t),Me=u(e),j=p(e,"PRE",{class:!0});var Ya=i(j);Ya.forEach(t),ze=u(e),G=p(e,"H2",{});var ua=i(G);Mt=n(ua,"Coupling Behavior to Boxes"),ua.forEach(t),Ne=u(e),m=p(e,"P",{});var ie=i(m);zt=n(ie,`User actions on boxes need to be translated into interactions with the projected AST. To know which part of the
projection represents the AST node, we give each `),he=p(ie,"CODE",{});var ha=i(he);Nt=n(ha,"Box"),ha.forEach(t),Rt=n(ie," in the projection a "),fe=p(ie,"EM",{});var fa=i(fe);Kt=n(fa,"role"),fa.forEach(t),Ut=n(ie,`, which is unique
within its parent box. This way we can identify every box by its model element plus its role.`),ie.forEach(t),Re=u(e),W=p(e,"P",{});var ka=i(W);Gt=n(ka,"In the following figure the roles are shown above the boxes in green."),ka.forEach(t),Ke=u(e),Na(C.$$.fragment,e),Ue=u(e),b=p(e,"P",{});var le=i(b);Wt=n(le,"We can now show the full typescript code for this projection. Given that "),ke=p(le,"CODE",{});var da=i(ke);Jt=n(da,"literal"),da.forEach(t),Qt=n(le," is the "),de=p(le,"CODE",{});var ma=i(de);Vt=n(ma,"StringLiteral"),ma.forEach(t),Xt=n(le," object:"),le.forEach(t),Ge=u(e),D=p(e,"PRE",{class:!0});var Za=i(D);Za.forEach(t),We=u(e),h=p(e,"OL",{});var S=i(h);me=p(S,"LI",{});var ba=i(me);Yt=n(ba,`The overall horizontal list box to group everything. Its parameters are the model element that is shown,
the role of the box, and a list of child boxes.`),ba.forEach(t),Zt=u(S),be=p(S,"LI",{});var va=i(be);es=n(va,`The first label box for the start quote. Its parameters are, like the horizontal box, the model element,
the role of the box, and its content, which is the quote character.`),va.forEach(t),ts=u(S),ve=p(S,"LI",{});var xa=i(ve);ss=n(xa,`The text box for the value of the string literal. Its parameters are, like the horizontal box, the model element,
the role of the box, the getter function for the content, and the setter function, used when the content changes.`),xa.forEach(t),as=u(S),xe=p(S,"LI",{});var ya=i(xe);ns=n(ya,"The second label box for the end quote. Except for its role, this is identical to the first label box."),ya.forEach(t),S.forEach(t),Je=u(e),q=p(e,"H2",{});var Zs=i(q);ye=p(Zs,"A",{name:!0}),i(ye).forEach(t),os=n(Zs," Behavior is Defined by Actions"),Zs.forEach(t),Qe=u(e),v=p(e,"P",{});var re=i(v);ps=n(re,"The behavior coupled to a "),Ee=p(re,"EM",{});var Ea=i(Ee);is=n(Ea,"Box"),Ea.forEach(t),ls=n(re," is defined by an "),we=p(re,"CODE",{});var wa=i(we);rs=n(wa,"Action"),wa.forEach(t),cs=n(re,`. To identify which action should be executed,
each behavior is specified by:`),re.forEach(t),Ve=u(e),f=p(e,"UL",{});var g=i(f);$=p(g,"LI",{});var kt=i($);us=n(kt,"a "),_e=p(kt,"EM",{});var _a=i(_e);hs=n(_a,"trigger"),_a.forEach(t),fs=n(kt,", describing the key(s) that will trigger the behavior, and"),kt.forEach(t),ks=u(g),H=p(g,"LI",{});var dt=i(H);ds=n(dt,"one or more "),Te=p(dt,"EM",{});var Ta=i(Te);ms=n(Ta,"roles"),Ta.forEach(t),bs=n(dt,", specifying that the behavior is only active in boxes with that specific role,"),dt.forEach(t),vs=u(g),F=p(g,"LI",{});var mt=i(F);xs=n(mt,"an "),Pe=p(mt,"EM",{});var Pa=i(Pe);ys=n(Pa,"action"),Pa.forEach(t),Es=n(mt,`,  which is a typescript/javascript function that will be executed when the
behavior is being triggered.`),mt.forEach(t),ws=u(g),M=p(g,"LI",{});var bt=i(M);_s=n(bt,"a "),Be=p(bt,"EM",{});var Ba=i(Be);Ts=n(Ba,"caretPosition"),Ba.forEach(t),Ps=n(bt,`, which is the box where the cursor should be placed after the execution of
the action (optional).`),bt.forEach(t),g.forEach(t),Xe=u(e),P=p(e,"P",{});var vt=i(P);Bs=n(vt,"There are four different types of action, each of which extend the "),Le=p(vt,"CODE",{});var La=i(Le);Ls=n(La,"PiBehavior"),La.forEach(t),Ss=n(vt," interface."),vt.forEach(t),Ye=u(e),k=p(e,"OL",{});var A=i(k);J=p(A,"LI",{});var ea=i(J);Se=p(ea,"CODE",{});var Sa=i(Se);gs=n(Sa,"PiCustomBehavior"),Sa.forEach(t),As=n(ea,", used for most types of behavior, but specifically the creation of non expression concepts."),ea.forEach(t),Is=u(A),Q=p(A,"LI",{});var ta=i(Q);ge=p(ta,"CODE",{});var ga=i(ge);Os=n(ga,"PiExpressionCreator"),ga.forEach(t),js=n(ta,", used to create an expression."),ta.forEach(t),Cs=u(A),V=p(A,"LI",{});var sa=i(V);Ae=p(sa,"CODE",{});var Aa=i(Ae);Ds=n(Aa,"PiBinaryExpressionCreator"),Aa.forEach(t),qs=n(sa,", used to create a binary expression."),sa.forEach(t),$s=u(A),X=p(A,"LI",{});var aa=i(X);Ie=p(aa,"CODE",{});var Ia=i(Ie);Hs=n(Ia,"KeyboardShortcutBehavior"),Ia.forEach(t),Fs=n(aa,", behaviour initiated through a keystroke."),aa.forEach(t),A.forEach(t),Ze=u(e),z=p(e,"PRE",{class:!0});var en=i(z);en.forEach(t),et=u(e),B=p(e,"P",{});var xt=i(B);Ms=n(xt,"To attach the behavior to one or more boxes, these box roles are added to the "),Oe=p(xt,"CODE",{});var Oa=i(Oe);zs=n(Oa,"activeInBoxRoles"),Oa.forEach(t),Ns=n(xt,`
property of an action.
//TODO: describe the optional properties`),xt.forEach(t),tt=u(e),Y=p(e,"H2",{});var ja=i(Y);Rs=n(ja,"Custom Actions"),ja.forEach(t),st=u(e),Z=p(e,"P",{});var Ca=i(Z);Ks=n(Ca,"// TODO document custom actions"),Ca.forEach(t),at=u(e),ee=p(e,"H2",{});var Da=i(ee);Us=n(Da,"Expressions and Binary Expressions"),Da.forEach(t),nt=u(e),te=p(e,"P",{});var qa=i(te);Gs=n(qa,"// TODO document expression actions"),qa.forEach(t),ot=u(e),L=p(e,"P",{});var yt=i(L);Ws=n(yt,`The challenge posed by editing expressions in a projectional editor are explained
in `),se=p(yt,"A",{href:!0});var $a=i(se);Js=n($a,"Expressions"),$a.forEach(t),Qs=n(yt,"."),yt.forEach(t),pt=u(e),ae=p(e,"H2",{});var Ha=i(ae);Vs=n(Ha,"Keyboard Shortcuts"),Ha.forEach(t),it=u(e),ne=p(e,"P",{});var Fa=i(ne);Xs=n(Fa,"// TODO document keyboard actions"),Fa.forEach(t),lt=u(e),oe=p(e,"P",{});var Ma=i(oe);Ys=n(Ma,"A keyboard shortcut specifies an action that is triggered by special keys, like e.g. Ctrl-A."),Ma.forEach(t),this.h()},h(){x(I,"href","https://svelte.dev/"),x(I,"target","_blank"),x(N,"href","/030_Developing_a_Language/030_API_Level/010_Editor_API"),x(K,"href","/060_Under_the_Hood/010_The_Editor_Framework/010_Predefined_Boxes"),x(U,"href","/060_Under_the_Hood/010_The_Editor_Framework/010_Predefined_Boxes"),x(j,"class","language-ts"),x(D,"class","language-ts"),x(ye,"name","defining-actions"),x(z,"class","language-ts"),x(se,"href","/010_Intro/010_Projectional_Editing#expressions")},m(e,l){r(e,y,l),s(y,Et),r(e,je,l),r(e,d,l),s(d,wt),s(d,I),s(I,_t),s(d,Tt),s(d,N),s(N,Pt),s(d,Bt),r(e,Ce,l),r(e,R,l),s(R,Lt),r(e,De,l),r(e,E,l),s(E,St),s(E,ce),s(ce,gt),s(E,At),r(e,qe,l),r(e,w,l),s(w,It),s(w,K),s(K,Ot),s(w,jt),r(e,$e,l),r(e,_,l),s(_,Ct),s(_,ue),s(ue,Dt),s(_,qt),r(e,He,l),Ra(O,e,l),r(e,Fe,l),r(e,T,l),s(T,$t),s(T,U),s(U,Ht),s(T,Ft),r(e,Me,l),r(e,j,l),j.innerHTML=Qa,r(e,ze,l),r(e,G,l),s(G,Mt),r(e,Ne,l),r(e,m,l),s(m,zt),s(m,he),s(he,Nt),s(m,Rt),s(m,fe),s(fe,Kt),s(m,Ut),r(e,Re,l),r(e,W,l),s(W,Gt),r(e,Ke,l),Ra(C,e,l),r(e,Ue,l),r(e,b,l),s(b,Wt),s(b,ke),s(ke,Jt),s(b,Qt),s(b,de),s(de,Vt),s(b,Xt),r(e,Ge,l),r(e,D,l),D.innerHTML=Va,r(e,We,l),r(e,h,l),s(h,me),s(me,Yt),s(h,Zt),s(h,be),s(be,es),s(h,ts),s(h,ve),s(ve,ss),s(h,as),s(h,xe),s(xe,ns),r(e,Je,l),r(e,q,l),s(q,ye),s(q,os),r(e,Qe,l),r(e,v,l),s(v,ps),s(v,Ee),s(Ee,is),s(v,ls),s(v,we),s(we,rs),s(v,cs),r(e,Ve,l),r(e,f,l),s(f,$),s($,us),s($,_e),s(_e,hs),s($,fs),s(f,ks),s(f,H),s(H,ds),s(H,Te),s(Te,ms),s(H,bs),s(f,vs),s(f,F),s(F,xs),s(F,Pe),s(Pe,ys),s(F,Es),s(f,ws),s(f,M),s(M,_s),s(M,Be),s(Be,Ts),s(M,Ps),r(e,Xe,l),r(e,P,l),s(P,Bs),s(P,Le),s(Le,Ls),s(P,Ss),r(e,Ye,l),r(e,k,l),s(k,J),s(J,Se),s(Se,gs),s(J,As),s(k,Is),s(k,Q),s(Q,ge),s(ge,Os),s(Q,js),s(k,Cs),s(k,V),s(V,Ae),s(Ae,Ds),s(V,qs),s(k,$s),s(k,X),s(X,Ie),s(Ie,Hs),s(X,Fs),r(e,Ze,l),r(e,z,l),z.innerHTML=Xa,r(e,et,l),r(e,B,l),s(B,Ms),s(B,Oe),s(Oe,zs),s(B,Ns),r(e,tt,l),r(e,Y,l),s(Y,Rs),r(e,st,l),r(e,Z,l),s(Z,Ks),r(e,at,l),r(e,ee,l),s(ee,Us),r(e,nt,l),r(e,te,l),s(te,Gs),r(e,ot,l),r(e,L,l),s(L,Ws),s(L,se),s(se,Js),s(L,Qs),r(e,pt,l),r(e,ae,l),s(ae,Vs),r(e,it,l),r(e,ne,l),s(ne,Xs),r(e,lt,l),r(e,oe,l),s(oe,Ys),rt=!0},p:nn,i(e){rt||(Ka(O.$$.fragment,e),Ka(C.$$.fragment,e),rt=!0)},o(e){Ua(O.$$.fragment,e),Ua(C.$$.fragment,e),rt=!1},d(e){e&&t(y),e&&t(je),e&&t(d),e&&t(Ce),e&&t(R),e&&t(De),e&&t(E),e&&t(qe),e&&t(w),e&&t($e),e&&t(_),e&&t(He),Ga(O,e),e&&t(Fe),e&&t(T),e&&t(Me),e&&t(j),e&&t(ze),e&&t(G),e&&t(Ne),e&&t(m),e&&t(Re),e&&t(W),e&&t(Ke),Ga(C,e),e&&t(Ue),e&&t(b),e&&t(Ge),e&&t(D),e&&t(We),e&&t(h),e&&t(Je),e&&t(q),e&&t(Qe),e&&t(v),e&&t(Ve),e&&t(f),e&&t(Xe),e&&t(P),e&&t(Ye),e&&t(k),e&&t(Ze),e&&t(z),e&&t(et),e&&t(B),e&&t(tt),e&&t(Y),e&&t(st),e&&t(Z),e&&t(at),e&&t(ee),e&&t(nt),e&&t(te),e&&t(ot),e&&t(L),e&&t(pt),e&&t(ae),e&&t(it),e&&t(ne),e&&t(lt),e&&t(oe)}}}class cn extends tn{constructor(y){super();sn(this,y,null,on,an,{})}}export{cn as default};
